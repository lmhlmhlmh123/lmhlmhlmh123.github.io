<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React中父传子、子传父、兄弟传值、多层级传递</title>
    <url>/2023/05/19/conduction/</url>
    <content><![CDATA[<h2 id="React中父传子、子传父、兄弟传值、多层级传递"><a href="#React中父传子、子传父、兄弟传值、多层级传递" class="headerlink" title="React中父传子、子传父、兄弟传值、多层级传递"></a>React中父传子、子传父、兄弟传值、多层级传递</h2><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><ul>
<li>【父组件】给【子组件】传递数据：通过props传递<h5 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Home</span> <span class="attr">text</span>=<span class="string">&quot;hello React&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx"><a href="#Home-jsx" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* hello React */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4></li>
<li>【父组件】给【子组件】传递数据：通过props传递<h5 id="App-jsx-1"><a href="#App-jsx-1" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 父组件向子组件传递一个回调 父组件通过回调的方式接收子组件传递过来的数据 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Home</span> <span class="attr">onFunction</span>=<span class="string">&#123;(data)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        console.log(data) //&#123;name: &#x27;zs&#x27;, age: 18&#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx-1"><a href="#Home-jsx-1" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [obj]=<span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 点击按钮 向父组件传递数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onBtn</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        props.<span class="title function_">onFunction</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onBtn&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="兄弟传值-消息订阅与发布机制"><a href="#兄弟传值-消息订阅与发布机制" class="headerlink" title="兄弟传值(消息订阅与发布机制)"></a>兄弟传值(消息订阅与发布机制)</h4><ul>
<li>【兄弟组件】给【兄弟组件】传递数据：通过pubsub-js传递<pre><code>  - 适用于任何组件间通信
  - 下载命令：npm i pubsub-js --save
  - 在需要发布订阅的组件中引入：import PubSub from &#39;pubsub-js&#39;
  - 发布的组件：PubSub.publish(&#39;aaa&#39;,传递的参数)
  - 订阅的组件：PubSub.subscribe(&#39;aaa&#39;,通过回调的方式接收)
</code></pre>
</li>
</ul>
<h5 id="YoungerBrother-jsx（传递数据的兄弟组件）"><a href="#YoungerBrother-jsx（传递数据的兄弟组件）" class="headerlink" title="YoungerBrother.jsx（传递数据的兄弟组件）"></a>YoungerBrother.jsx（传递数据的兄弟组件）</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">YoungerBrother</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [obj]=<span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 向兄弟传递数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onBtn</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;aaa&#x27;</span>,obj)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onBtn&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="ElderBrother-jsx（接收数据的兄弟组件）"><a href="#ElderBrother-jsx（接收数据的兄弟组件）" class="headerlink" title="ElderBrother.jsx（接收数据的兄弟组件）"></a>ElderBrother.jsx（接收数据的兄弟组件）</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ElderBrother</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 兄弟组件通过PubSub.subscribe接收</span></span><br><span class="line">    <span class="comment">// 回调函数有两个参数 第一个是字符串 第二个参数是传递过来的数据</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;aaa&#x27;</span>,<span class="function">(<span class="params">string,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(string,data) <span class="comment">// aaa &#123;name: &#x27;zs&#x27;, age: 18&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>ElderBrother<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<h4 id="多层级传递-上下文数据共享"><a href="#多层级传递-上下文数据共享" class="headerlink" title="多层级传递(上下文数据共享)"></a>多层级传递(上下文数据共享)</h4><h5 id="Context-jsx"><a href="#Context-jsx" class="headerlink" title="Context.jsx"></a>Context.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 创建上下文的内置插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> [data]=<span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;border:</span>&#x27;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">000</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是A组件也是父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户名是：&#123;data.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 通过上下文中的内置属性Provider 将data分发出去 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">B</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 第一种接收方式 通过useContext接收</span></span><br><span class="line">    <span class="keyword">const</span> data=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;border:</span>&#x27;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">red</span>&#x27;,<span class="attr">marginTop:</span>&#x27;<span class="attr">20px</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是B组件也是A组件子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>从父级接收到用户名是：&#123;data.name&#125;，年龄：&#123;data.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">C</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 后代组件可以通过useContext接收 参数是创建的上下文</span></span><br><span class="line">    <span class="keyword">const</span> data=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;border:</span>&#x27;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">blue</span>&#x27;,<span class="attr">marginTop:</span>&#x27;<span class="attr">20px</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是C组件也是A组件孙子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>从爷级接收到用户名是：&#123;data.name&#125;，年龄：&#123;data.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">D</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">D</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;border:</span>&#x27;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">yellow</span>&#x27;,<span class="attr">marginTop:</span>&#x27;<span class="attr">20px</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是D组件也是A组件重孙组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* // 第二种接收方式 通过上下文中的内置属性Consumer接收 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        value=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                            return <span class="tag">&lt;<span class="name">h3</span>&gt;</span>从太爷级接收到用户名是：&#123;value.name&#125;，年龄：&#123;value.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">MyContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中使用柯里化函数提交表单</title>
    <url>/2023/05/18/currytizationFunction/</url>
    <content><![CDATA[<h2 id="高阶函数-函数柯里化"><a href="#高阶函数-函数柯里化" class="headerlink" title="高阶函数_函数柯里化"></a>高阶函数_函数柯里化</h2><p>如果一个函数符合下面2个规范中的任何一个 那么该函数就是高阶函数<br>    1、若A函数 接收参数是一个函数 那么A就可以称之为高阶函数<br>    2、若A函数 调用的返回值依然是一个函数 那么A就可以称之为高阶函数<br>    常见的高阶函数有：Promise setTimeout arr.map()等等</p>
<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a><strong>函数柯里化</strong></h3><p>通过函数调用继续返回函数的方式 实现多次接收参数最后统一处理函数编码的形式</p>
<ul>
<li><p>使用柯里化函数提交表单</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Form</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    saveFormData=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[data]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;(event)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                event.preventDefault()</span></span><br><span class="line"><span class="language-xml">                alert(`用户名是$&#123;this.state.username&#125;,密码是$&#123;this.state.password&#125;`)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><p>不使用函数柯里化提交表单</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">user</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span>&#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    saveFormData=<span class="function">(<span class="params">dataType,event</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span>=&gt;</span>this.saveFormData(&#x27;username&#x27;,event)&#125; type=&#x27;text&#x27;/&gt;</span></span><br><span class="line"><span class="language-xml">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;(event)</span>=&gt;</span>this.saveFormData(&#x27;password&#x27;,event)&#125; type=&#x27;passord&#x27;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>模糊搜索</title>
    <url>/2023/05/19/dimSearch/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Cinema</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> [data, setData] = <span class="title function_">useState</span>([])</span><br><span class="line">  <span class="keyword">let</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="comment">// 请求数据</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=420101&quot;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;X-Client-Info&quot;</span>: <span class="string">&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.2.1&quot;,&quot;e&quot;:&quot;16842878395119008311345153&quot;,&quot;bc&quot;:&quot;110100&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setData</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="comment">// 将搜索写成函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCinemaList</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">          <span class="comment">// 返回遍历的数据</span></span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//模糊搜索    将数据的字符串和输入的字符串都转为大写 提高匹配几率</span></span><br><span class="line">          <span class="keyword">return</span> item.<span class="property">address</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>()) || item.<span class="property">name</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>())</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cinemaBox&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 受控组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">className</span>=<span class="string">&#x27;input&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;text&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">        setText(e.target.value)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          // 通过搜索函数渲染</span></span><br><span class="line"><span class="language-xml">          getCinemaList().map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cinemaList&#x27;</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">dt</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &#x27;<span class="attr">14px</span>&#x27;, <span class="attr">color:</span> &quot;#<span class="attr">ccc</span>&quot; &#125;&#125;&gt;</span>&#123;item.address&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Immutable</title>
    <url>/2023/06/01/immutable/</url>
    <content><![CDATA[<h2 id="Immutable"><a href="#Immutable" class="headerlink" title="Immutable"></a>Immutable</h2><h5 id="什么是immutable"><a href="#什么是immutable" class="headerlink" title="什么是immutable"></a>什么是immutable</h5><p>immutable，译为”不可改变的”，是一种持久化数据。它有一旦被创建就不会被修改的特性。<br>当你修改 immutable 对象的时候返回新的 immutable。但是原数据不会改变。</p>
<h5 id="为什么要使用immutable"><a href="#为什么要使用immutable" class="headerlink" title="为什么要使用immutable"></a>为什么要使用immutable</h5><p>换种方式问：持久化数据结构有什么用？</p>
<p>用处可大了。进行 js 对象的深拷贝对性能的消耗太大时（使用了递归），例如 Redux 中的深拷贝，就需要用到 immutable 来提升性能，从而避免牵一发而动全身。</p>
<p>当你使用 immutable 后再进行深拷贝的时候，只会拷贝你改变的节点，从而达到了节省性能的目的。</p>
<h2 id="初始化immutable"><a href="#初始化immutable" class="headerlink" title="初始化immutable"></a>初始化immutable</h2><ul>
<li>安装 npm i immutable -S</li>
<li>引入 import { Map,List,fromJS} from ‘immutable’</li>
</ul>
<p>Map()创建一个类似于js中的对象的Map对象<br>List()创建一个类似于js中的数组的List对象<br>fromJS() 将JS对象/JS数组 转换成immutable 深转换，全部转换，更耗费性能。</p>
<h2 id="immutabl入门"><a href="#immutabl入门" class="headerlink" title="immutabl入门"></a>immutabl入门</h2><h5 id="Map的使用"><a href="#Map的使用" class="headerlink" title="Map的使用"></a>Map的使用</h5><ul>
<li>创建Map对象<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Map</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span></span><br><span class="line"> <span class="keyword">const</span> lmhObj =<span class="title class_">Map</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">heigth</span>:<span class="string">&quot;200&quot;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div></li>
<li>读取<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lmhObj.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)) <span class="comment">//zs</span></span><br></pre></td></tr></table></figure></div></li>
<li>增(也可以修改值)<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line"><span class="keyword">const</span> newLmhObj = lmhObj.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLmhObj) <span class="comment">//&#123;name:&quot;zs&quot;,age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="keyword">const</span> newLmhObj = lmhObj.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ls&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLmhObj) <span class="comment">//&#123;name:&quot;ls&quot;,age:&quot;18&quot;，heigth:&quot;200&quot;&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li>删<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newLmhObj = lmhObj.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLmhObj) <span class="comment">//&#123;age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li>改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newLmhObj = lmhObj.<span class="title function_">update</span>(<span class="string">&quot;name&quot;</span>,<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x=<span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLmhObj) <span class="comment">//&#123;name:&quot;aaa&quot;,age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="List的使用"><a href="#List的使用" class="headerlink" title="List的使用"></a>List的使用</h5></li>
<li>创建List数据<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list=<span class="title class_">List</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure></div></li>
<li>增<br>用法和js的push一样，但是返回值为immutable的List结构，而不是数组<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">list.<span class="title function_">push</span>(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div></li>
<li>删<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">list.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div></li>
<li>改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">list.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div></li>
<li>查(也可使用数组中map方法 对数据进行遍历)<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">list.<span class="title function_">getIn</span>([<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="在React中使用Immutable"><a href="#在React中使用Immutable" class="headerlink" title="在React中使用Immutable"></a>在React中使用Immutable</h2><h5 id="Map的使用-1"><a href="#Map的使用-1" class="headerlink" title="Map的使用"></a>Map的使用</h5><ul>
<li>创建Map<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="title class_">Map</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">        <span class="attr">height</span>:<span class="string">&quot;200&quot;</span></span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure></div></li>
<li>读取<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)) <span class="comment">//zs</span></span><br></pre></td></tr></table></figure></div></li>
<li>增(也可以修改值)<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//&#123;name:&quot;zs&quot;,age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ls&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//&#123;name:&quot;ls&quot;,age:&quot;18&quot;，heigth:&quot;200&quot;&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li>删<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//&#123;age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li>改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">update</span>(<span class="string">&quot;name&quot;</span>,<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="keyword">return</span> x=<span class="string">&quot;aaa&quot;</span>&#125;))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newLmhObj) <span class="comment">//&#123;name:&quot;aaa&quot;,age:&quot;18&quot;,heigth:&quot;200&quot;&#125;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="list的使用"><a href="#list的使用" class="headerlink" title="list的使用"></a>list的使用</h5><ul>
<li>创建Map<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="title class_">List</span>([<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;看报&quot;</span>,<span class="string">&#x27;写代码&#x27;</span>]))</span><br></pre></td></tr></table></figure></div></li>
<li>增<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=data.<span class="title function_">push</span>(<span class="number">5</span>)</span><br><span class="line"><span class="title function_">setData</span>(arr)</span><br></pre></td></tr></table></figure></div></li>
<li>删<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure></div></li>
<li>改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure></div></li>
<li>查<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">data..<span class="title function_">get</span>([<span class="number">0</span>])</span><br></pre></td></tr></table></figure></div></li>
<li>遍历展示<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;</span><br><span class="line">       arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="immutabl进阶"><a href="#immutabl进阶" class="headerlink" title="immutabl进阶"></a>immutabl进阶</h2><ul>
<li><p>fromJS()：JS对象/JS数组 转换成immutable 深转换，全部转换，更耗费性能。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [data,setData]=<span class="title function_">useState</span>(<span class="title function_">fromJS</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">location</span>:&#123;</span><br><span class="line">        <span class="attr">province</span>:<span class="string">&#x27;河北&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&quot;大连&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">favor</span>:[<span class="string">&quot;读书&quot;</span>,<span class="string">&quot;看报&quot;</span>,<span class="string">&#x27;写代码&#x27;</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></div></li>
<li><p>增 setIn()<br>注意：setIn可以深层操作，第一个参数是个数组，数组中第一个元素是操作的对象的key值，第二个元素是value值，如果不需要可以不用 以下的map.deleteIn、map.updateIn、map.getIn同理。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">setIn</span>([<span class="string">&#x27;age&#x27;</span>],<span class="string">&#x27;18&#x27;</span>).<span class="title function_">setIn</span>([<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>],<span class="string">&#x27;沧州&#x27;</span>))<span class="comment">//&#123;name:&#x27;zs&#x27;,age:&#x27;18&#x27;,location:&#123;province:&#x27;河北&#x27;,city:&quot;大连&quot;,aaa:&#x27;沧州&#x27;&#125;,favor:[&quot;读书&quot;,&quot;看报&quot;,&#x27;写代码&#x27;]&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>删 deleteIn()</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(map.<span class="title function_">deleteIn</span>([<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;city&#x27;</span>])) <span class="comment">//&#123;name:&#x27;zs&#x27;,location:&#123;province:&#x27;河北&#x27;&#125;,favor:[&quot;读书&quot;,&quot;看报&quot;,&#x27;写代码&#x27;]&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>改 updateIn() 深层更新<br>参数1：一个数组，第一个元素是父元素，第二个元素为目标子元素<br>参数2：回调函数，参数为目标值的值，返回值为一个更新后的值</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setData</span>(data.<span class="title function_">updateIn</span>([<span class="string">&#x27;favor&#x27;</span>],<span class="function">(<span class="params">list</span>)=&gt;</span>list.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>))) <span class="comment">//&#123;name:&#x27;zs&#x27;,location:&#123;province:&#x27;河北&#x27;,city:&quot;大连&quot;&#125;,favor:[&quot;看报&quot;,&#x27;写代码&#x27;]&#125;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>查 getIn()</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">data.<span class="title function_">getIn</span>([<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;province&#x27;</span>]) <span class="comment">// 得到&#x27;河北&#x27;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>toJS() immutable的 map对象/list对象 转为普通JS对象/JS数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=data.<span class="title function_">toJS</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123;name:&#x27;zs&#x27;,location:&#123;province:&#x27;河北&#x27;,city:&quot;大连&quot;&#125;,favor:[&quot;读书&quot;,&quot;看报&quot;,&#x27;写代码&#x27;]&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="基本拷贝方法"><a href="#基本拷贝方法" class="headerlink" title="基本拷贝方法"></a>基本拷贝方法</h2><h5 id="引用复制-浅拷贝"><a href="#引用复制-浅拷贝" class="headerlink" title="引用复制 (浅拷贝)"></a>引用复制 (浅拷贝)</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123;name:&#x27;zs&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)<span class="comment">//&#123;name:&#x27;zs&#x27;&#125;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="解构赋值-只比浅复制多复制一层-算不上深拷贝"><a href="#解构赋值-只比浅复制多复制一层-算不上深拷贝" class="headerlink" title="解构赋值(只比浅复制多复制一层 算不上深拷贝)"></a>解构赋值(只比浅复制多复制一层 算不上深拷贝)</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myobj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> myobj2 = &#123; ...myobj &#125;</span><br><span class="line">myobj2.<span class="property">name</span> = <span class="string">&quot;ls&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myobj) <span class="comment">//&#123;name:&#x27;zs&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myobj2) <span class="comment">//&#123;name:&#x27;ls&#x27;&#125;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="深拷贝-但是不能有undefined-如果存在undefined-会将undefined字段上删除"><a href="#深拷贝-但是不能有undefined-如果存在undefined-会将undefined字段上删除" class="headerlink" title="深拷贝(但是不能有undefined,如果存在undefined 会将undefined字段上删除)"></a>深拷贝(但是不能有undefined,如果存在undefined 会将undefined字段上删除)</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">abc</span>:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonObj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonObj))</span><br><span class="line">jsonObj2.<span class="property">arr</span>.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj) <span class="comment">//&#123;name: &#x27;zs&#x27;, arr: Array(3), abc: undefined&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj2)<span class="comment">//&#123;name: &#x27;zs&#x27;, arr: Array(2)&#125;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="递归深拷贝一层一层拷贝-性能不好-占用内存"><a href="#递归深拷贝一层一层拷贝-性能不好-占用内存" class="headerlink" title="递归深拷贝一层一层拷贝(性能不好 占用内存)"></a>递归深拷贝一层一层拷贝(性能不好 占用内存)</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">           <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">           <span class="attr">job</span>: <span class="string">&quot;程序员&quot;</span>,</span><br><span class="line">           <span class="attr">height</span>: <span class="number">210</span>,</span><br><span class="line">           <span class="attr">type</span>: &#123;</span><br><span class="line">               <span class="attr">character</span>: <span class="string">&quot;tender&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> copyObj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">               <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key) == <span class="literal">true</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">                       copyObj[key] = <span class="title function_">deepCopy</span>(obj[key])</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       copyObj[key] = obj[key]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> copyObj;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> obj2 = <span class="title function_">deepCopy</span>(obj)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2) <span class="comment">//&#123;name: &#x27;zs&#x27;, age: 19, job: &#x27;程序员&#x27;, height: 210, type: &#123;…&#125;&#125;</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123;name: &#x27;zs&#x27;, age: 19, job: &#x27;程序员&#x27;, height: 210, type: &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中的Hook函数</title>
    <url>/2023/05/19/hook/</url>
    <content><![CDATA[<h2 id="useState"><a href="#useState" class="headerlink" title="useState()"></a>useState()</h2><h6 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h6><ul>
<li>useState是 react 提供的一个定义响应式变量的 hook 函数，基本语法如下：<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(initialCount)</span><br></pre></td></tr></table></figure></div>
它返回一个状态和一个修改状态的方法，状态需要通过这个方法来进行修改；<br>initialCount 是我们传入的一个初始状态，它是惰性的，我们可以通过传一个函数来返回一个值当作初始状态，并且这个函数只会在初始渲染时执行一次；<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> initialCount = <span class="title function_">someExpensiveComputation</span>();</span><br><span class="line">    <span class="keyword">return</span> initialCount</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
接下来把定义好的状态运用到页面：<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 传入一个函数，更新的值是基于之前的值来执行</span></span><br><span class="line">        <span class="comment">// setCount(count =&gt; count + 1)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        	<span class="tag">&lt;<span class="name">h4</span>&gt;</span>count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">handleClick</span> &#125;&gt;</span>点击更新状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
页面渲染完成后，我们可以看到 count的值是 0，当我们点击按钮时，会将 count的值加 1，页面也同时更新；<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">count</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure></div>
了解完基础用法后，我们可以思考几个问题；<br>setCount修改值时它是同步还是异步？<br>连续调用 setCount会发生什么？<h5 id="第一个问题：setCount修改值时它是同步还是异步？"><a href="#第一个问题：setCount修改值时它是同步还是异步？" class="headerlink" title="第一个问题：setCount修改值时它是同步还是异步？"></a>第一个问题：setCount修改值时它是同步还是异步？</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>页面<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">count:1</span><br></pre></td></tr></table></figure></div></li>
<li>控制台<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;value1: &quot;, count) //value1: 0</span><br><span class="line">console.log(&quot;value2: &quot;, count) //value1: 0</span><br></pre></td></tr></table></figure></div>
从上面代码中我们可以看出，值是更新了，但是控制台打印的是之前的值，这是不是也表示 setCount是异步的呢？我们换一种方法，用异步来修改状态；<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>控制台<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count) <span class="comment">//value1: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count) <span class="comment">//value1: 0</span></span><br></pre></td></tr></table></figure></div>
显然，异步修改状态跟同步修改状态的结果是一致的，这也表明了 setCount 是异步更新的；那我们要怎么拿到更新后的值呢，我们可以用另外一个 hook 函数 useRef，代码如下：<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(count)</span><br><span class="line">  countRef.<span class="property">current</span> = count</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(countRef.<span class="property">current</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击更新状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>控制台<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count) <span class="comment">//value3: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(countRef.<span class="property">current</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure></div>
从上面我们可以看出，我们已经拿到了更新之后的值，useRef不仅可以用于访问 DOM 节点，也可以用来表示一个容器，current属性可以保存任何值，而且useRef返回的对象会在整个生命周期内保持；</li>
</ul>
<h5 id="第二个问题：连续调用-setCount会发生什么？"><a href="#第二个问题：连续调用-setCount会发生什么？" class="headerlink" title="第二个问题：连续调用 setCount会发生什么？"></a>第二个问题：连续调用 setCount会发生什么？</h5><p>（1）传入一个基于状态的值</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>点击页面按钮</p>
<ul>
<li>页面<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">count</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure></div></li>
<li>控制台<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count) <span class="comment">// value1：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count) <span class="comment">// value2：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count) <span class="comment">// value3：0</span></span><br></pre></td></tr></table></figure></div>
从上面可以看出，如果我们传入的是一个普通值，他只会进行最后一次更新；</li>
</ul>
<p>（2）传入一个函数</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>点击页面按钮</p>
<ul>
<li>页面<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">count</span>:<span class="number">2</span></span><br></pre></td></tr></table></figure></div></li>
<li>控制台<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count) <span class="comment">// value1：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count) <span class="comment">// value2：0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value3: &quot;</span>, count) <span class="comment">// value3：0</span></span><br></pre></td></tr></table></figure></div>
可以看出，传入一个函数的话，它会进行两次赋值，因为它更新的值是基于之前的值来执行，所以在开发中推荐使用函数传入的形式进行修改；<h5 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h5>1、复杂变量的修改<br>对于复杂类型的变量我们修改时需要重新定义，在原来数据的基础上修改不会引起组件的重新渲染，因为 React 组件的更新机制只进行浅对比，也就是更新某个复杂类型数据时只要它的引用地址没变，就不会重新渲染组件；举个例子<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [arr, setArr] = <span class="title function_">useState</span>([<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">pushData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="title function_">setArr</span>(arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;arr.join(&quot;-&quot;)&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;pushData&#125;</span>&gt;</span>点击添加数组<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
上面的代码在点击按钮时，视图不会发生变化，但是 arr的值是变化了，如果想修改这个数组，需要重新定义一个数组来修改，在原数组上的修改不会引起组件的重新渲染，React 组件的更新机制对只进行浅对比，也就是更新某个复杂类型数据时只要它的引用地址没变，就不会重新渲染组件；<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">pushData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setArr</span>([...arr, <span class="number">4</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="2、异步操作获取更新的值"><a href="#2、异步操作获取更新的值" class="headerlink" title="2、异步操作获取更新的值"></a>2、异步操作获取更新的值</h6>在类组件里面，修改值时异步操作可以拿到更新后的值，但是在函数组件，异步获取是拿不到更新后的值的，举个例子对比一下：</li>
</ul>
<h6 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h6><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击更新状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>页面<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">count</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure></div>
控制台 页面<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>) <span class="comment">// value:0</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)<span class="comment">// value:1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h6 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h6><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>count: &#123;count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击更新状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>页面<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">count</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure></div>
控制台<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, count)<span class="comment">// value1:0</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, count)<span class="comment">// value2:0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
显然，在函数组件中是不能通过异步来获取更新的值，我们可以通过 useRef来获取；<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countRef = <span class="title function_">useRef</span>(count)</span><br><span class="line">countRef.<span class="property">current</span> = count</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count + <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1: &quot;</span>, countRef.<span class="property">current</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value2: &quot;</span>, countRef.<span class="property">current</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="useEffect详解"><a href="#useEffect详解" class="headerlink" title="useEffect详解"></a>useEffect详解</h2><h5 id="1、不传递"><a href="#1、不传递" class="headerlink" title="1、不传递"></a>1、不传递</h5><p>useEffect不传递第二个参数会导致每次渲染都会运行useEffect。然后，当它运行时，它获取数据并更新状态。然后，一旦状态更新，组件将重新呈现，这将再次触发useEffect，这就是问题所在。</p>
<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无限循环</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">number</span>)</span><br><span class="line"><span class="title function_">setNumber</span>(props.<span class="property">number</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h5 id="2、传递空数组"><a href="#2、传递空数组" class="headerlink" title="2、传递空数组"></a>2、传递空数组</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//仅在挂载和卸载的时候执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">&#125;,[]) </span><br></pre></td></tr></table></figure></div>
<h5 id="3、传递一个值"><a href="#3、传递一个值" class="headerlink" title="3、传递一个值"></a>3、传递一个值</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//count更新时执行</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">&#125;,[count]) </span><br></pre></td></tr></table></figure></div>
<h5 id="4、传递多个"><a href="#4、传递多个" class="headerlink" title="4、传递多个"></a>4、传递多个</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setNumber2是useState返回的setter，所以不会在每次渲染时重新创建它，因此effect只会运行一次</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Asynchronous</span> : <span class="title class_">React</span>.<span class="property">FC</span>=<span class="function">(<span class="params">&#123;number&#125;</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> [number2,setNumber2] = <span class="title function_">useState</span>(number);</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br><span class="line"><span class="title function_">setNumber2</span>(number)</span><br><span class="line">&#125;,[number,setNumber2]) <span class="comment">//监听props对象number的更改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="5、return-方法"><a href="#5、return-方法" class="headerlink" title="5、return 方法"></a>5、return 方法</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useEffect方法的第一个参数是一个函数，函数可以return一个方法，这个方法就是在组件销毁的时候会被调用</span></span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">setCount</span>(count + <span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></div>

<h2 id="useLayoutEffect用法"><a href="#useLayoutEffect用法" class="headerlink" title="useLayoutEffect用法"></a>useLayoutEffect用法</h2><p>useLayoutEffect 使用方法、所传参数和 useEffect 完全相同。大多数情况下将 useEffect 替换成 useLayoutEffect 完全看不出区别。<br>唯一区别就是：使用 useEffect 时，页面挂载会出现闪烁。而使用 useLayoutEffect 时页面没有闪烁，是因为 useEffect 是在页面渲染完成后再去更新数据的，所以会出现短暂的闪烁，而 useLayoutEffect 是在页面还没有渲染时就将数据给更新了，所以没有出现闪烁。<br>注意：大部分情况用useEffect就足够了，useLayoutEffect 会阻塞渲染，所以需要小心的使用。</p>
<h2 id="useRef用法"><a href="#useRef用法" class="headerlink" title="useRef用法"></a>useRef用法</h2><h6 id="useRef-可以帮助我们获取-dom-和-react-组件实例，类组件中的-React-createRef-也有相同的功能。"><a href="#useRef-可以帮助我们获取-dom-和-react-组件实例，类组件中的-React-createRef-也有相同的功能。" class="headerlink" title="useRef 可以帮助我们获取 dom 和 react 组件实例，类组件中的 React.createRef() 也有相同的功能。"></a>useRef 可以帮助我们获取 dom 和 react 组件实例，类组件中的 React.createRef() 也有相同的功能。</h6><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleFocus</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(inputRef.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">id</span>=<span class="string">&quot;my-input&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleFocus&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="useRef-还可以帮助保存值"><a href="#useRef-还可以帮助保存值" class="headerlink" title="useRef 还可以帮助保存值"></a>useRef 还可以帮助保存值</h6><ul>
<li>不使用useRef()赋值方法<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef,useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state,setState]=<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> myRef =<span class="number">0</span></span><br><span class="line">    <span class="comment">// 点击按钮 只有state的值修改了 myRef的值并未修改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleFocus</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setState</span>(state++)</span><br><span class="line">        myRef++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleFocus&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>使用useRef()赋值方法<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef,useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state,setState]=<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> myRef =<span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 点击按钮 state的值和myRef的值都进行了修改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleFocus</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setState</span>(state++)</span><br><span class="line">        myRef++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleFocus&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="useCallback用法"><a href="#useCallback用法" class="headerlink" title="useCallback用法"></a>useCallback用法</h2><ul>
<li>作用:防止因为组件重新渲染 导致方法被重新创建 起到缓存作用 只有第二个参数变化了 才重新声明一次<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [name,setName]=<span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">// 方法通过useCallback缓存起来 组件重新渲染的时候 该方法不会被重新创建 只有在第二个参数name改变后 才会被重新声明</span></span><br><span class="line">    <span class="keyword">const</span> onName=<span class="title function_">useCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">setName</span>(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">        &#125;,[name]) </span><br><span class="line">        <span class="comment">// 只有name改变 这个函数才会声明一次</span></span><br><span class="line">        <span class="comment">// 如果传入空数组 那么就是第一次创建后就被缓存 如果name后期改变了 拿到的还是之前的name</span></span><br><span class="line">        <span class="comment">// 如果不传第二个参数 每次都会重新声明一次 拿到的就是最新的name</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;name&#125; - <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onName&#125;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="useMemo用法"><a href="#useMemo用法" class="headerlink" title="useMemo用法"></a>useMemo用法</h2></li>
<li>useMemo会执行第一个函数并且将函数执行结果返回给你 useMemo更适合经过函数计算得到一个确定的值 比如记忆组件<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用useMemo来缓存搜索函数方法 类似vue的计算属性</span></span><br><span class="line">    <span class="keyword">const</span> getCinemaList = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 返回遍历的数据</span></span><br><span class="line">        <span class="keyword">return</span> data.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//模糊搜索    将数据的字符串和输入的字符串都转为大写 提高匹配几率</span></span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">address</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>()) || item.<span class="property">name</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>())</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 如果第二个参数没有发生改变 那么该函数不会重新声明</span></span><br><span class="line">    &#125;,[data,text])</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    // 通过搜索函数渲染</span></span><br><span class="line"><span class="language-xml">                    getCinemaList().map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cinemaList&#x27;</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">dt</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &#x27;<span class="attr">14px</span>&#x27;, <span class="attr">color:</span> &quot;#<span class="attr">ccc</span>&quot; &#125;&#125;&gt;</span>&#123;item.address&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="useReducer用法"><a href="#useReducer用法" class="headerlink" title="useReducer用法"></a>useReducer用法</h2><h5 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h5><p>useReducer 是 useState 的替代方案。它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。）</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialArg, init);</span><br></pre></td></tr></table></figure></div>
<ul>
<li>useReducer接收两个参数：<pre><code>  第一个参数：reducer函数。
  第二个参数：初始化的state。返回值为最新的state和dispatch函数（用来触发reducer函数，计算对应的state）。
</code></pre>
</li>
</ul>
<p>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 useReducer 还能给那些会触发深更新的组件做性能优化，因为你可以向子组件传递 dispatch 而不是回调函数 。</p>
<h5 id="二、用reducer重写useState计数器示例"><a href="#二、用reducer重写useState计数器示例" class="headerlink" title="二、用reducer重写useState计数器示例"></a>二、用reducer重写useState计数器示例</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单版reducer</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span>=(<span class="params">prevState,action</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prevState,action)</span><br><span class="line">    <span class="keyword">let</span> newstate=&#123;...prevState&#125;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;jian&quot;</span>:</span><br><span class="line">            newstate.<span class="property">count</span>--</span><br><span class="line">            <span class="keyword">return</span> newstate</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;jia&quot;</span>:</span><br><span class="line">            newstate.<span class="property">count</span>++</span><br><span class="line">            <span class="keyword">return</span> newstate</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> prevState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> intialState=&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Reducers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state,dispatch]=<span class="title function_">useReducer</span>(reducer,intialState)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">                    type:&quot;jian&quot;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">                    type:&quot;jia&quot;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="三、reducer"><a href="#三、reducer" class="headerlink" title="三、reducer"></a>三、reducer</h5><ul>
<li>reducer 本质是一个纯函数，没有任何UI和副作用。这意味着相同的输入（state、action），reducer函数无论执行多少遍始终会返回相同的输出（newState）。因此通过reducer函数很容易推测state的变化，并且也更加容易单元测试。</li>
<li>简单来说 reducer是一个函数(state, action) =&gt; newState：接收当前应用的state和触发的动作action，计算并返回最新的state。<pre><code>      React中的state比较方案
      React在比较oldState和newState的时候是使用Object.is函数，如果是同一个对象则不会出发组件的rerender。
</code></pre>
</li>
<li>reducer处理的state对象必须是 immutable，这意味着永远不要直接修改参数中的state对象，reducer函数应该每次都返回一个新的state object</li>
<li>既然reducer要求每次都返回一个新的对象，我们可以使用ES6中的解构赋值方式去创建一个新对象，并复写我们需要改变的state属性，如上例。<pre><code>      state 为什么需要 immutable？
      **reducer的幂等性：**我们上文提到过reducer需要保持幂等性，更加可预测、可测试。
      如果每次返回同一个state，就无法保证无论执行多少次都是相同的结果。
</code></pre>
<h5 id="四、useState-useContext-结合实现-redux-数据管理效果"><a href="#四、useState-useContext-结合实现-redux-数据管理效果" class="headerlink" title="四、useState + useContext 结合实现 redux 数据管理效果"></a>四、useState + useContext 结合实现 redux 数据管理效果</h5>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 useReducer 还能给那些会触发深更新的组件做性能优化，因为你可以向子组件传递 dispatch 而不是回调函数 。<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reducer和Context结合使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useContext, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 初始值</span></span><br><span class="line"><span class="keyword">const</span> intialState = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reducer处理函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">prevState, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prevState, action)</span><br><span class="line">    <span class="keyword">let</span> newstate = &#123; ...prevState &#125;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;jian&quot;</span>:</span><br><span class="line">            newstate.<span class="property">count</span>--</span><br><span class="line">            <span class="keyword">return</span> newstate</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;jia&quot;</span>:</span><br><span class="line">            newstate.<span class="property">count</span>++</span><br><span class="line">            <span class="keyword">return</span> newstate</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> prevState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化上下文共享函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line"><span class="comment">// 公共的父级组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">CR</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在父级组件中引入useReducer</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, intialState)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 通过上下文将状态和方法分发下去 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MyContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,dispatch&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">A</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">B</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">C</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">MyContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// A组件接受状态 负责展示</span></span><br><span class="line">    <span class="keyword">const</span> &#123;state&#125;=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A----&#123;state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// B组件接收方法 负责修改</span></span><br><span class="line">    <span class="keyword">const</span> &#123;dispatch&#125;=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">                    type:&quot;jia&quot;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">                    type:&quot;jian&quot;</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;&gt;--<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// C组件接受状态 负责展示</span></span><br><span class="line">    <span class="keyword">const</span> &#123;state&#125;=<span class="title function_">useContext</span>(<span class="title class_">MyContext</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>C-----&#123;state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="自定义Hooks方法"><a href="#自定义Hooks方法" class="headerlink" title="自定义Hooks方法"></a>自定义Hooks方法</h2><ul>
<li>自定义Hooks方法能让我们的组件更加简洁 </li>
<li>自定义Hooks方法其实就是将页面中的方法拎出来封装一下而已<h5 id="useHooks-js"><a href="#useHooks-js" class="headerlink" title="useHooks.js"></a>useHooks.js</h5></li>
<li>创建一个js文件 用来封装Hooks方法<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Hooks 负责请求数据 最后导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCinemaList</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> [data, setData] = <span class="title function_">useState</span>([])</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 请求数据</span></span><br><span class="line"> <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;https://m.maizuo.com/gateway?cityId=110100&amp;ticketFlag=1&amp;k=420101&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&quot;X-Client-Info&quot;</span>: <span class="string">&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.2.1&quot;,&quot;e&quot;:&quot;16842878395119008311345153&quot;,&quot;bc&quot;:&quot;110100&quot;&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;X-Host&#x27;</span>: <span class="string">&#x27;mall.film-ticket.cinema.list&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">cinemas</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将请求的数据返回</span></span><br><span class="line"><span class="keyword">return</span> &#123;data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Hooks 负责处理数据 最后导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useGetSearch</span>(<span class="params">data,text</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getCinemaList = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">address</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>()) || item.<span class="property">name</span>.<span class="title function_">toUpperCase</span>().<span class="title function_">includes</span>(text.<span class="title function_">toUpperCase</span>())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,[data,text])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将处理的数据返回</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCinemaList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx"><a href="#Home-jsx" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入自定义Hooks方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCinemaList,useGetSearch&#125; <span class="keyword">from</span> <span class="string">&quot;../custom/useHooks&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Memo</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明自定义Hooks方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123;data&#125;=<span class="title function_">useCinemaList</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明自定义Hooks方法 这个方法需要传参 我们就把它所需要的数据传给他</span></span><br><span class="line">    <span class="keyword">const</span> &#123;getCinemaList&#125;=<span class="title function_">useGetSearch</span>(data,text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cinemaBox&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">className</span>=<span class="string">&#x27;input&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;text&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                setText(e.target.value)</span></span><br><span class="line"><span class="language-xml">            &#125;&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    getCinemaList.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cinemaList&#x27;</span> <span class="attr">key</span>=<span class="string">&#123;item.cinemaId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">dt</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &#x27;<span class="attr">14px</span>&#x27;, <span class="attr">color:</span> &quot;#<span class="attr">ccc</span>&quot; &#125;&#125;&gt;</span>&#123;item.address&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>列表优化</title>
    <url>/2023/05/19/listoptimize/</url>
    <content><![CDATA[<h2 id="长列表优化"><a href="#长列表优化" class="headerlink" title="长列表优化"></a>长列表优化</h2><h5 id="第一种做法（使用定时器分批分堆渲染）"><a href="#第一种做法（使用定时器分批分堆渲染）" class="headerlink" title="第一种做法（使用定时器分批分堆渲染）"></a>第一种做法（使用定时器分批分堆渲染）</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 第一种做法 分批分堆渲染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>([])</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">averageFn</span> = (<span class="params">list</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">//从第0个开始截取</span></span><br><span class="line">            <span class="keyword">let</span> result = [] <span class="comment">//定义结果 结果是二维数组</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; list.<span class="property">length</span>) &#123; <span class="comment">//当i等于或者大于总长度时，即截取完毕</span></span><br><span class="line">                <span class="comment">// 从原始数组的第一项开始遍历</span></span><br><span class="line">                result.<span class="title function_">push</span>(list.<span class="title function_">slice</span>(i, i + <span class="number">10</span>)) <span class="comment">//在原有一万条数据上，一次截取10个用于分堆</span></span><br><span class="line">                i = i + <span class="number">10</span> <span class="comment">// 这10条数据截取完，再截取下十条数据，以此类推</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result <span class="comment">//最后把结果丢出去即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">Fn</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">            <span class="keyword">let</span> res=<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/index&#x27;</span>)</span><br><span class="line">            <span class="keyword">let</span> towDArr=<span class="title function_">averageFn</span>(res.<span class="property">data</span>.<span class="property">data</span>) <span class="comment">//调用截取函数 将请求的数据传给它</span></span><br><span class="line">            <span class="keyword">let</span> arr=[]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;towDArr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                <span class="comment">// 相当于在很短的时间内创建许多个定时任务去处理</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    arr.<span class="title function_">push</span>(...towDArr[i])</span><br><span class="line">                    <span class="title function_">setList</span>([...arr]) <span class="comment">// 赋值渲染</span></span><br><span class="line">                &#125;,<span class="number">2000</span>*i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Fn</span>()</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                    return <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">30</span> &#125;&#125; <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>ID:&#123;item.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>NAME:&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>VALAUE:&#123;item.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中配置代理</title>
    <url>/2023/05/19/proxy/</url>
    <content><![CDATA[<h2 id="配置跨域代理"><a href="#配置跨域代理" class="headerlink" title="配置跨域代理"></a>配置跨域代理</h2><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><ul>
<li>在package.json中追加配置 “proxy”:”<a href="http://localhost:5000&quot;">http://localhost:5000&quot;</a><br>说明:<pre><code>  - 优点：配置简单 前端请求资源时可以不加任何前缀
  - 缺点：不能配置多个代理
  - 工作方式：上述方式配置代理 当请求了3000不存在的资源时 那么该请求会转发给5000(优先匹配前端资源)
</code></pre>
<h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;proxy&quot;</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="需要发起请求的页面"><a href="#需要发起请求的页面" class="headerlink" title="需要发起请求的页面"></a>需要发起请求的页面</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getStudentData</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/text/index&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;getStudentData&#125;</span>&gt;</span>点我获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><ul>
<li>在src目录下创建代理配置文件setupProxy.js<br>说明：<pre><code>  - 优点：可以配置多个代理 可以灵活的控制请求是否走代理
  - 缺点：配置繁琐 前端请求资源必须加前缀
</code></pre>
<h5 id="编写配置文件setupProxy-js"><a href="#编写配置文件setupProxy-js" class="headerlink" title="编写配置文件setupProxy.js"></a>编写配置文件setupProxy.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要采用CommonJS的写法</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(</span><br><span class="line">        <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api-elm&#x27;</span>, <span class="comment">//遇见/api-elm前缀的请求,就会触发该代理配置</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">//请求转发给谁（能返回数据的服务器地址）</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">//控制服务器收到的响应头中Host字段的值</span></span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api-elm&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125; <span class="comment">//重写请求路径，保证交给后台服务器是正常地请求地址（必须配置）</span></span><br><span class="line">        &#125;),</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="需要发起请求的页面-1"><a href="#需要发起请求的页面-1" class="headerlink" title="需要发起请求的页面"></a>需要发起请求的页面</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getStudentData</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/api-elm/text/index&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;getStudentData&#125;</span>&gt;</span>点我获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>10个实用的reduce使用技巧</title>
    <url>/2023/05/26/reduce/</url>
    <content><![CDATA[<p>reduce 函数可以根据需要进行累加、过滤、分组、映射等操作，是一个非常强大的数组方法。在数据处理时使用的非常频繁，很多复杂的逻辑如果用reduce去处理，都非常的简洁，在实际的开发工作过程中，积累了一些常见又超级好用的 reduce 技巧的代码片段，筛选了如下 10 个，以供大家参考</p>
<h2 id="reduce-介绍"><a href="#reduce-介绍" class="headerlink" title="reduce 介绍"></a>reduce 介绍</h2><p>reduce 是数组的方法，可以对数组中的每个元素依次执行一个回调函数，从左到右依次累积计算出一个最终的值。其语法为：<br>array1.reduce((accumulator, currentValue) =&gt; accumulator + currentValue,initialValue)</p>
<ul>
<li>其中，callback 是每个元素执行的回调函数，其包含 4 个参数：<pre><code>  accumulator：累积器，即上一次回调函数执行的返回值。
  currentValue：当前元素的值。
  index：当前元素的下标。
  array：原始数组。
  initialValue 是可选的，表示累积器的初始值。
</code></pre>
</li>
<li>reduce 函数的执行过程如下：<pre><code>  如果没有提供 initialValue，则将数组的第一个元素作为累积器的初始值，否则将 initialValue 作为累积器的初始值。
  从数组的第二个元素开始，依次对数组中的每个元素执行回调函数。
  回调函数的返回值作为下一次回调函数执行时的累积器的值。
  对数组中的每个元素执行完回调函数后，reduce 函数返回最后一次回调函数的返回值，即最终的累积值。
</code></pre>
<h5 id="计算数组中每个元素出现的次数"><a href="#计算数组中每个元素出现的次数" class="headerlink" title="计算数组中每个元素出现的次数"></a>计算数组中每个元素出现的次数</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> count = fruits.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  accumulator[currentValue] = (accumulator[currentValue] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// Output: &#123; apple: 3, banana: 2, orange: 1 &#125;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="拍平嵌套数组"><a href="#拍平嵌套数组" class="headerlink" title="拍平嵌套数组"></a>拍平嵌套数组</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nestedArray = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]];</span><br><span class="line"><span class="keyword">const</span> flattenedArray = nestedArray.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator.<span class="title function_">concat</span>(currentValue), []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flattenedArray); <span class="comment">// Output: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></div>
<h5 id="按条件分组"><a href="#按条件分组" class="headerlink" title="按条件分组"></a>按条件分组</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;David&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Emily&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> groupedPeople = people.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> key = currentValue.<span class="property">age</span>;</span><br><span class="line">  <span class="keyword">if</span> (!accumulator[key]) &#123;</span><br><span class="line">    accumulator[key] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  accumulator[key].<span class="title function_">push</span>(currentValue);</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(groupedPeople);</span><br><span class="line"><span class="comment">// Output: &#123;</span></span><br><span class="line"><span class="comment">//   25: [&#123; name: &#x27;Alice&#x27;, age: 25 &#125;, &#123; name: &#x27;David&#x27;, age: 25 &#125;],</span></span><br><span class="line"><span class="comment">//   30: [&#123; name: &#x27;Bob&#x27;, age: 30 &#125;, &#123; name: &#x27;Emily&#x27;, age: 30 &#125;],</span></span><br><span class="line"><span class="comment">//   35: [&#123; name: &#x27;Charlie&#x27;, age: 35 &#125;]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="将多个数组合并为一个对象"><a href="#将多个数组合并为一个对象" class="headerlink" title="将多个数组合并为一个对象"></a>将多个数组合并为一个对象</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;female&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> person = keys.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue, index</span>) =&gt;</span> &#123;</span><br><span class="line">    accumulator[currentValue] = values[index];</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// Output: &#123; name: &#x27;Alice&#x27;, age: 25, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="将字符串转换为对象"><a href="#将字符串转换为对象" class="headerlink" title="将字符串转换为对象"></a>将字符串转换为对象</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;key1=value1&amp;key2=value2&amp;key3=value3&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = str.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [key, value] = currentValue.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">  accumulator[key] = value;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); </span><br><span class="line"><span class="comment">// Output: &#123; key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27;, key3: &#x27;value3&#x27; &#125;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="将对象转换为查询字符串"><a href="#将对象转换为查询字符串" class="headerlink" title="将对象转换为查询字符串"></a>将对象转换为查询字符串</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> queryString = <span class="title class_">Object</span>.<span class="title function_">entries</span>(params).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, [key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;acc&#125;</span><span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>&amp;`</span>;</span><br><span class="line">&#125;, <span class="string">&quot;?&quot;</span>).<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queryString); <span class="comment">// &quot;?foo=bar&amp;baz=42&quot;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="打印斐波那契数列"><a href="#打印斐波那契数列" class="headerlink" title="打印斐波那契数列"></a>打印斐波那契数列</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fibonacci</span> = n =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title class_">Array</span>(n)].<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      accumulator.<span class="title function_">push</span>(index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      accumulator.<span class="title function_">push</span>(accumulator[index - <span class="number">1</span>] + accumulator[index - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">10</span>)); <span class="comment">// Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></span><br></pre></td></tr></table></figure></div>
<h5 id="检查字符串是否是回文字符串"><a href="#检查字符串是否是回文字符串" class="headerlink" title="检查字符串是否是回文字符串"></a>检查字符串是否是回文字符串</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;racecar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> isPalindrome = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator &amp;&amp; currentValue === array[array.<span class="property">length</span> - index - <span class="number">1</span>];</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isPalindrome); <span class="comment">// Output: true</span></span><br></pre></td></tr></table></figure></div>
<h5 id="检查括号是否匹配"><a href="#检查括号是否匹配" class="headerlink" title="检查括号是否匹配"></a>检查括号是否匹配</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;(()()())&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> balanced = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cur === <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">    acc++;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur === <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">    acc--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, <span class="number">0</span>) === <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(balanced); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>
<h5 id="递归获取对象属性"><a href="#递归获取对象属性" class="headerlink" title="递归获取对象属性"></a>递归获取对象属性</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jason&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123; <span class="attr">home</span>: <span class="string">&quot;Shaanxi&quot;</span>, <span class="attr">company</span>: <span class="string">&quot;Xian&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">config, path, defaultVal</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">config, name</span>) =&gt;</span> config[name], config) || defaultVal;</span><br><span class="line">  <span class="keyword">return</span> fallback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(user, <span class="string">&quot;info.name&quot;</span>); <span class="comment">// Jason</span></span><br><span class="line"><span class="title function_">get</span>(user, <span class="string">&quot;info.address.home&quot;</span>); <span class="comment">// Shaanxi</span></span><br><span class="line"><span class="title function_">get</span>(user, <span class="string">&quot;info.address.company&quot;</span>); <span class="comment">// Xian</span></span><br><span class="line"><span class="title function_">get</span>(user, <span class="string">&quot;info.address.abc&quot;</span>, <span class="string">&quot;default&quot;</span>); <span class="comment">// default</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="手写-reduce"><a href="#手写-reduce" class="headerlink" title="手写 reduce"></a>手写 reduce</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myReduce</span>(<span class="params">arr, callback, initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> accumulator = initialValue === <span class="literal">undefined</span> ? arr[<span class="number">0</span>] : initialValue;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = initialValue === <span class="literal">undefined</span> ? <span class="number">1</span> : <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    accumulator = <span class="title function_">callback</span>(accumulator, arr[i], i, arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux以及中间件RTK的使用（持久化版）</title>
    <url>/2023/05/19/redux/</url>
    <content><![CDATA[<h2 id="Redux的使用-求和案例"><a href="#Redux的使用-求和案例" class="headerlink" title="Redux的使用(求和案例)"></a>Redux的使用(求和案例)</h2><h5 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    该文件专门用于暴露一个store对象 整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 引入createStore 专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; legacy_createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./count_reducer.js&quot;</span></span><br><span class="line"><span class="comment">// 暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">legacy_createStore</span>(countReducer)</span><br></pre></td></tr></table></figure></div>
<h5 id="constant-js"><a href="#constant-js" class="headerlink" title="constant.js"></a>constant.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该模块是用于定义action对象中type类型的常量值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span>=<span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span>=<span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="count-action-js"><a href="#count-action-js" class="headerlink" title="count_action.js"></a>count_action.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该文件专门为Count组件生成action对象</span></span><br><span class="line"><span class="comment">// 目的只有一个：便于管理的同时防止程序员单词写错</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span>=(<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span>=(<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="count-reducer-js"><a href="#count-reducer-js" class="headerlink" title="count_reducer.js"></a>count_reducer.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    1、该文件用于创建一个为Count组件服务的reducer reducer的本质就是一个函数</span></span><br><span class="line"><span class="comment">    2、reducer函数会接到两个参数 分别为：之前的状态(preState) 动作对象(action)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="keyword">const</span> initState=<span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">pre=initState,action</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pre,action)</span><br><span class="line">    <span class="comment">// 从action对象中获取type data</span></span><br><span class="line">    <span class="keyword">const</span> &#123;type,data&#125;=action</span><br><span class="line">    <span class="comment">// 根据type决定如何加工数据</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">INCREMENT</span>: <span class="comment">//如果是加</span></span><br><span class="line">            <span class="keyword">return</span> pre + data</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">DECREMENT</span>: <span class="comment">//如果是减</span></span><br><span class="line">            <span class="keyword">return</span> pre - data</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> pre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="comment">// import reportWebVitals from &#x27;./reportWebVitals&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
<h5 id="Count-jsx"><a href="#Count-jsx" class="headerlink" title="Count.jsx"></a>Count.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../redux/store&#x27;</span></span><br><span class="line"><span class="comment">// 引入actionCreator 专门用于创建action文件</span></span><br><span class="line"><span class="keyword">import</span> &#123;createIncrementAction,createDecrementAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../redux/count_action&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Count</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> saveInput=<span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125;=saveInput.<span class="property">current</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125;=saveInput.<span class="property">current</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 奇数再加</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">incrementIfOdd</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125;=saveInput.<span class="property">current</span></span><br><span class="line">        <span class="keyword">if</span>(store.<span class="title function_">getState</span>()%<span class="number">2</span>!==<span class="number">0</span>)&#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步加</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">incrementAsync</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125;=saveInput.<span class="property">current</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;saveInput&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="Redux的使用-数据案例"><a href="#Redux的使用-数据案例" class="headerlink" title="Redux的使用(数据案例)"></a>Redux的使用(数据案例)</h2><h5 id="store-js-1"><a href="#store-js-1" class="headerlink" title="store.js"></a>store.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;legacy_createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">legacy_createStore</span>(reducer)</span><br></pre></td></tr></table></figure></div>

<h5 id="constant-js-1"><a href="#constant-js-1" class="headerlink" title="constant.js"></a>constant.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD</span>=<span class="string">&#x27;add&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">EDIT</span>=<span class="string">&#x27;edit&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h5 id="action-js"><a href="#action-js" class="headerlink" title="action.js"></a>action.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD</span>,<span class="variable constant_">EDIT</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./constant&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">tianJia</span>=(<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">ADD</span>,data&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">xiuGai</span>=(<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">EDIT</span>,data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="reudcer-js"><a href="#reudcer-js" class="headerlink" title="reudcer.js"></a>reudcer.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD</span>,<span class="variable constant_">EDIT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj=[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Reducer</span>(<span class="params">pre=obj,action</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type,data&#125;=action</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD</span>:</span><br><span class="line">        <span class="keyword">return</span> [...pre,&#123;...data&#125;]</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">EDIT</span>:</span><br><span class="line">        <span class="keyword">const</span> pre1=pre.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>item.<span class="property">id</span>!==data.<span class="property">id</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pre1)</span><br><span class="line">        <span class="keyword">return</span> [...pre1,data]</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./redux/store&quot;</span></span><br><span class="line"><span class="comment">// import reportWebVitals from &#x27;./reportWebVitals&#x27;;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// reportWebVitals();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="Home-jsx"><a href="#Home-jsx" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;tianJia,xiuGai&#125; <span class="keyword">from</span> <span class="string">&quot;../redux/action&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mName=<span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> mAge=<span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> data=store.<span class="title function_">getState</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fsdafa</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> name=mName.<span class="property">current</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> age=mAge.<span class="property">current</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> id=data.<span class="property">length</span>+<span class="number">1</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">tianJia</span>(&#123;id,name,age&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">edit</span>=(<span class="params">ID</span>)=&gt;&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">ID</span>)</span><br><span class="line">        <span class="keyword">const</span> name=mName.<span class="property">current</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> age=mAge.<span class="property">current</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">const</span> id=<span class="variable constant_">ID</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="title function_">xiuGai</span>(&#123;id,name,age&#125;))</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">            data.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名:&#123;item.name&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄:&#123;item.age&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>edit(item.id)&#125;&gt;修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;请输入姓名&#x27;</span> <span class="attr">ref</span>=<span class="string">&#123;mName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;请输入年龄&#x27;</span> <span class="attr">ref</span>=<span class="string">&#123;mAge&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;fsdafa&#125;</span>&gt;</span>确定添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="同步RTK（持久化）"><a href="#同步RTK（持久化）" class="headerlink" title="同步RTK（持久化）"></a>同步RTK（持久化）</h2><h5 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  &#123;store&#125;  <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="comment">// 分发状态</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="title class_">Home</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Home&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h5 id="store-js-2"><a href="#store-js-2" class="headerlink" title="store.js"></a>store.js</h5><ul>
<li>在src目录下创建store.js文件<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入创建store的工具</span></span><br><span class="line"><span class="keyword">import</span> &#123;configureStore&#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="comment">// 引入持久化的工具 //下载方法npm i redux-persist</span></span><br><span class="line"><span class="keyword">import</span> &#123;persistStore,persistReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-persist&#x27;</span></span><br><span class="line"><span class="comment">// 引入存储方法</span></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;redux-persist/lib/storage&#x27;</span></span><br><span class="line"><span class="comment">// 引入切片</span></span><br><span class="line"><span class="keyword">import</span> counterSlice  <span class="keyword">from</span> <span class="string">&quot;./slice&quot;</span></span><br><span class="line"><span class="comment">// 持久化</span></span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    storage,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将切片存入persistReducer</span></span><br><span class="line"><span class="keyword">const</span> persistedReducer = <span class="title function_">persistReducer</span>(persistConfig,counterSlice);</span><br><span class="line"><span class="comment">// 将持久化的切片导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: persistedReducer,</span><br><span class="line">    <span class="attr">middleware</span>: <span class="function">(<span class="params">getDefaultMiddleware</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">getDefaultMiddleware</span>(&#123;</span><br><span class="line">        <span class="attr">serializableCheck</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> persistor = <span class="title function_">persistStore</span>(store)</span><br></pre></td></tr></table></figure></div>
<h5 id="slice-js"><a href="#slice-js" class="headerlink" title="slice.js"></a>slice.js</h5></li>
<li>在src目录下创建slice.js文件<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSlice&#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice=<span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="attr">jia</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            state.<span class="property">value</span>+=<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">jian</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            state.<span class="property">value</span>-=<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">jiaAction</span>:<span class="function">(<span class="params">state,action</span>)=&gt;</span>&#123;</span><br><span class="line">            state.<span class="property">value</span>+=action.<span class="property">payload</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;jia,jian,jiaAction&#125; =counterSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx-1"><a href="#Home-jsx-1" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入connect用于连接UI组件与redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;jia,jian,jiaAction&#125; <span class="keyword">from</span> <span class="string">&quot;../redux/slice&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">// const counter=useSelector((state)=&gt;state.value)</span></span><br><span class="line">    <span class="comment">// const dispatch=useDispatch()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(counter)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>props.jia()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>props.jian()&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>props.jiaAction(5)&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">    <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">value</span>:state.<span class="property">vlaue</span>&#125;),</span><br><span class="line">    <span class="function"><span class="params">dispatch</span>=&gt;</span>(&#123;</span><br><span class="line">        <span class="attr">jia</span>:<span class="function">()=&gt;</span>&#123;<span class="title function_">dispatch</span>(<span class="title function_">jia</span>())&#125;,</span><br><span class="line">        <span class="attr">jian</span>:<span class="function">()=&gt;</span>&#123;<span class="title function_">dispatch</span>(<span class="title function_">jian</span>())&#125;,</span><br><span class="line">        <span class="attr">jiaAction</span>:<span class="function">(<span class="params">number</span>)=&gt;</span>&#123;<span class="title function_">dispatch</span>(<span class="title function_">jiaAction</span>(number))&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">)(<span class="title class_">Home</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="异步RTK（持久化）"><a href="#异步RTK（持久化）" class="headerlink" title="异步RTK（持久化）"></a>异步RTK（持久化）</h2><h5 id="index-js-3"><a href="#index-js-3" class="headerlink" title="index.js"></a>index.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  &#123;store&#125;  <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="App-jsx-1"><a href="#App-jsx-1" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="title class_">Home</span>  <span class="keyword">from</span> <span class="string">&quot;./components/Home&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h5 id="store-js-3"><a href="#store-js-3" class="headerlink" title="store.js"></a>store.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入创建store的工具</span></span><br><span class="line"><span class="keyword">import</span> &#123;configureStore&#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="comment">// 引入持久化的工具 //下载方法npm i redux-persist</span></span><br><span class="line"><span class="keyword">import</span> &#123;persistStore,persistReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-persist&#x27;</span></span><br><span class="line"><span class="comment">// 引入存储方法</span></span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">&#x27;redux-persist/lib/storage&#x27;</span></span><br><span class="line"><span class="comment">// 引入切片</span></span><br><span class="line"><span class="keyword">import</span> counterSlice  <span class="keyword">from</span> <span class="string">&quot;./slice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 持久化</span></span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    storage,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将切片存入persistReducer</span></span><br><span class="line"><span class="keyword">const</span> persistedReducer = <span class="title function_">persistReducer</span>(persistConfig,counterSlice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: persistedReducer,</span><br><span class="line">    <span class="attr">middleware</span>: <span class="function">(<span class="params">getDefaultMiddleware</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">getDefaultMiddleware</span>(&#123;</span><br><span class="line">        <span class="attr">serializableCheck</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> persistor = <span class="title function_">persistStore</span>(store)</span><br></pre></td></tr></table></figure></div>
<h5 id="slice-js-1"><a href="#slice-js-1" class="headerlink" title="slice.js"></a>slice.js</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入创建切片的工具 以及创建异步的工具</span></span><br><span class="line"><span class="keyword">import</span> &#123;createSlice,createAsyncThunk&#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="comment">// 引入网络请求</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 通过createAsyncThunk发送网络请求 第一个参数是声明 第二个参数是回调</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchHomeMultidataAction =<span class="title function_">createAsyncThunk</span>(</span><br><span class="line">    <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">        <span class="keyword">const</span> res=<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8888/goods/list&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">data</span>:[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建切片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice=<span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">    initialState,</span><br><span class="line">    <span class="comment">// 使用extraReducers解析异步路由 extraReducers有三个状态 fulfilled成功 padding进行中 reject失败</span></span><br><span class="line">    <span class="attr">extraReducers</span>:&#123;</span><br><span class="line">        [fetchHomeMultidataAction.<span class="property">fulfilled</span>](state,&#123;payload&#125;)&#123;</span><br><span class="line">            <span class="comment">// 请求成功后将数据放到初始化的data数组中</span></span><br><span class="line">            state.<span class="property">data</span>=payload.<span class="property">list</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出切片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx-2"><a href="#Home-jsx-2" class="headerlink" title="Home.jsx"></a>Home.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入connect用于连接UI组件与redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// import &#123; useDispatch, useSelector &#125; from &#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;fetchHomeMultidataAction&#125; <span class="keyword">from</span> <span class="string">&quot;../redux/slice&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">// const counter=useSelector((state)=&gt;state.data)</span></span><br><span class="line">    <span class="comment">// const dispatch=useDispatch()</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">data</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        props.<span class="title function_">qingqiu</span>()</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建并暴露Home的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">    <span class="function"><span class="params">state</span>=&gt;</span>(&#123;<span class="attr">data</span>:state.<span class="property">data</span>&#125;),</span><br><span class="line">    <span class="function"><span class="params">dispatch</span>=&gt;</span>(&#123;</span><br><span class="line">        <span class="attr">qingqiu</span>:<span class="function">()=&gt;</span>&#123;<span class="title function_">dispatch</span>(<span class="title function_">fetchHomeMultidataAction</span>())&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">)(<span class="title class_">Home</span>)</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React富文本展示</title>
    <url>/2023/05/19/richText/</url>
    <content><![CDATA[<h2 id="富文本展示"><a href="#富文本展示" class="headerlink" title="富文本展示"></a>富文本展示</h2><ul>
<li>假如有一天后端人员善心大发给我们返回了一段html代码片段，我们该如何渲染呢<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [data,setData]=<span class="title function_">useState</span>(<span class="string">&quot;&lt;div&gt;111&lt;h1&gt;222&lt;/h1&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:data&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>使用fetch发送请求(关注分离的设计思想)</title>
    <url>/2023/05/19/request/</url>
    <content><![CDATA[<h2 id="使用fetch发送请求"><a href="#使用fetch发送请求" class="headerlink" title="使用fetch发送请求"></a>使用fetch发送请求</h2><ul>
<li>特点：<br>  无需下载 直接引用即可<br>  fetch：原生函数 不再使用XMLHttpRequest对象提交ajax请求<br>  老版本的浏览器不支持<br>  语法简洁，更加语义化<br>  基于标准 Promise 实现，支持 async/await<br>  同构方便，使用 <a class="link"   href="https://github.com/matthew-andrews/isomorphic-fetch" >isomorphic-fetch <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>  更加底层，提供的API丰富（request, response）<br>  脱离了XHR，是ES规范里新的实现方式<br>  fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。<br>  fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})<br>  fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费<br>  fetch没有办法原生监测请求的进度，而XHR可以<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">func</span>=<span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">      <span class="comment">// 发送网络请求----- 通过Fetch(优化)</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先帮你联系服务器 然后返回Promise实例</span></span><br><span class="line">      <span class="keyword">const</span> response= <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`http://localhost:5000/text/index`</span>) </span><br><span class="line">      <span class="comment">// 之后通过实例上的.json()获取数据</span></span><br><span class="line">      <span class="keyword">const</span> data= <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">      <span class="comment">// 打印数据</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求出错了&#x27;</span>,error)</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">func</span>()</span><br><span class="line">  &#125;, [])</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      111</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React路由的使用</title>
    <url>/2023/05/19/router/</url>
    <content><![CDATA[<h2 id="React路由的理解"><a href="#React路由的理解" class="headerlink" title="React路由的理解"></a>React路由的理解</h2><ul>
<li><p>1、什么是路由<br>  ① 一个路由就是一个映射关系(key:value)<br>  ② key为路径 value可能是function或component</p>
</li>
<li><p>2、路由分类<br>  一、后端路由</p>
<pre><code>  ① 理解：value是function 用来处理客户端提交的请求
  ② 注册路由：router.get(path，function(req,res))
  ③ 工作过程：当node接收一个请求时 根据请求路径找到匹配的路由 调用路由中的函数来处理请求 返回响应数据
</code></pre>
<p>  二、前端路由</p>
<pre><code>  ① 浏览器端路由：value是element 用于展示页面内容
  ② 注册路由 &lt;Route path=&#39;/test&#39; element=&#123;Test&#125;&gt;
  ③ 工作过程：当浏览器的path变为/test时 当前路由组件就会变为Test组件
</code></pre>
</li>
</ul>
<h2 id="React路由的原理"><a href="#React路由的原理" class="headerlink" title="React路由的原理"></a>React路由的原理</h2><ul>
<li>1、let history=History.createBrowserHistory() //方法一 直接使用H5推出的history身上的API</li>
<li>2、let history=History.createHashHistory() 方法二 hash值(锚点)</li>
</ul>
<h2 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h2><h5 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>,<span class="title class_">Routes</span>,<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 在React中靠路由链接实现切换组件 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><h5 id="App-jsx-1"><a href="#App-jsx-1" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>,<span class="title class_">Routes</span>,<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 在React中靠路由链接实现切换组件 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;/* 重定向需要使用Navigate */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;about&#x27;</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h2 id="路由高亮"><a href="#路由高亮" class="headerlink" title="路由高亮"></a>路由高亮</h2><h5 id="App-jsx-2"><a href="#App-jsx-2" class="headerlink" title="App.jsx"></a>App.jsx</h5><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>,<span class="title class_">Routes</span>,<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 在React中靠路由链接实现切换组件 */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/* NavLink中自定义active的名字需要通过回调的形式来书写 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>isActive?&#x27;list-group-item abcdefg&#x27;:&#x27;list-group-item&#x27;&#125; to=&#x27;/about&#x27;&gt;About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>isActive?&#x27;list-group-item abcdefg&#x27;:&#x27;list-group-item&#x27;&#125;&gt;Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            &#123;/* 重定向需要使用Navigate */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;about&#x27;</span> /&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h2 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h2><h5 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h5><ul>
<li>在src目录下新建一个router.js文件 用于存放路由<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Detail&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">        <span class="comment">// 二级路由</span></span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">                <span class="comment">// 三级路由</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 路由重定向</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h5 id="App-jsx-3"><a href="#App-jsx-3" class="headerlink" title="App.jsx"></a>App.jsx</h5></li>
<li>在App.jsx页面挂载路由表<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"><span class="comment">// 引入路由表</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过useRoutes挂载路由表</span></span><br><span class="line">  <span class="keyword">const</span> element=<span class="title function_">useRoutes</span>(routes)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 在React中靠路由链接实现切换组件 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 挂载路由表 */&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure></div>
<h5 id="Home-jsx"><a href="#Home-jsx" class="headerlink" title="Home.jsx"></a>Home.jsx</h5></li>
<li>在二级路由需要展示页面 留下一个路由坑<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Home页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>isActive?&#x27;list-group-item abcdefg&#x27;:&#x27;list-group-item&#x27;&#125; to=&#x27;/home/news&#x27;&gt;News<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>isActive?&#x27;list-group-item abcdefg&#x27;:&#x27;list-group-item&#x27;&#125; to=&#x27;/home/message&#x27;&gt;Message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 指定路由组件呈现的位置 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="路由三种传参方式"><a href="#路由三种传参方式" class="headerlink" title="路由三种传参方式"></a>路由三种传参方式</h2><h3 id="第一种Params"><a href="#第一种Params" class="headerlink" title="第一种Params"></a>第一种Params</h3><h5 id="Message-jsx"><a href="#Message-jsx" class="headerlink" title="Message.jsx"></a>Message.jsx</h5></li>
<li>在Message.jsx页面 通过/拼接的方式传递数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> [message]=<span class="title function_">useState</span>([</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息1&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;11111&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息2&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;22222&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息3&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;33333&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;4&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息4&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;44444&#x27;</span>&#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    message.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;/* 第一种传参方式 params */&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">item.id</span>&#125;/$&#123;<span class="attr">item.title</span>&#125;/$&#123;<span class="attr">item.content</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 指定路由的展示链接 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="router-js-1"><a href="#router-js-1" class="headerlink" title="router.js"></a>router.js</h5></li>
<li>在router.js文件中 将detail的路径拼接上参数<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Detail&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 第一种传参方式</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line">                        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h5 id="Detail-jsx"><a href="#Detail-jsx" class="headerlink" title="Detail.jsx"></a>Detail.jsx</h5></li>
<li>在Detail.jsx页面 通过useParams()接收数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第一种传参方式 params 通过useParams接收</span></span><br><span class="line">    <span class="keyword">const</span> &#123;id,title,content&#125;=<span class="title function_">useParams</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="第二种Search"><a href="#第二种Search" class="headerlink" title="第二种Search"></a>第二种Search</h3><h5 id="Message-jsx-1"><a href="#Message-jsx-1" class="headerlink" title="Message.jsx"></a>Message.jsx</h5></li>
<li>在Message.jsx页面 通过?拼接的方式传递数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> [message]=<span class="title function_">useState</span>([</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息1&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;11111&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息2&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;22222&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息3&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;33333&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;4&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息4&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;44444&#x27;</span>&#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    message.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;/* 第二种传参方式 params */&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>?<span class="attr">id</span>=<span class="string">$&#123;item.id&#125;&amp;title</span>=<span class="string">$&#123;item.title&#125;&amp;content</span>=<span class="string">$&#123;item.content&#125;</span>`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 指定路由的展示链接 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="router-js-2"><a href="#router-js-2" class="headerlink" title="router.js"></a>router.js</h5></li>
<li>在router.js文件中 detail的路径不需要更改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Detail&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 第二种传参方式</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h5 id="Detail-jsx-1"><a href="#Detail-jsx-1" class="headerlink" title="Detail.jsx"></a>Detail.jsx</h5></li>
<li>在Detail.jsx页面 通过useSearchParams()接收数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 第二种传参方式 search 通过useSearchParams接收 通过.get接收你传入的某一个参数</span></span><br><span class="line">        <span class="keyword">let</span> [data,setData]=<span class="title function_">useSearchParams</span>()</span><br><span class="line">        <span class="keyword">const</span> id=data.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> title=data.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> content=data.<span class="title function_">get</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="第三种State"><a href="#第三种State" class="headerlink" title="第三种State"></a>第三种State</h3><h5 id="Message-jsx-2"><a href="#Message-jsx-2" class="headerlink" title="Message.jsx"></a>Message.jsx</h5></li>
<li>在Message.jsx页面 通过state方式传递数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> [message]=<span class="title function_">useState</span>([</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息1&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;11111&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;2&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息2&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;22222&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;3&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息3&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;33333&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;4&#x27;</span>,<span class="attr">title</span>:<span class="string">&quot;消息4&quot;</span>,<span class="attr">content</span>:<span class="string">&#x27;44444&#x27;</span>&#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    message.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;/* 第三种传参方式 */&#125;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;detail&#x27;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;id:item.id,title:item.title,content:item.content&#125;&#125;</span>&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 指定路由的展示链接 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="router-js-3"><a href="#router-js-3" class="headerlink" title="router.js"></a>router.js</h5></li>
<li>在router.js文件中 detail的路径不需要更改<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Navigate</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeChildren/Detail&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 第三种传参方式</span></span><br><span class="line">                        <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h5 id="Detail-jsx-2"><a href="#Detail-jsx-2" class="headerlink" title="Detail.jsx"></a>Detail.jsx</h5></li>
<li>在Detail.jsx页面 通过useLocation()接收数据<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">/* 第三种传参方式 state 通道useLocation获取 */</span></span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">state</span>:&#123;id,title,content&#125;&#125;=<span class="title function_">useLocation</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="React路由懒加载"><a href="#React路由懒加载" class="headerlink" title="React路由懒加载"></a>React路由懒加载</h2><div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;lazy,<span class="title class_">Suspense</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Route</span>,<span class="title class_">Routes</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="comment">// 懒加载的组件需要使用lazy使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>=<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Home&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span>=<span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/About&#x27;</span>))</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 和懒加载配合的组件 需要传入一个回调 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">h1</span>&gt;</span>Loading.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>; </span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>封装一个上传图片的组件</title>
    <url>/2023/05/19/upload/</url>
    <content><![CDATA[<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><h4 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h4><h5 id="upLoad-js"><a href="#upLoad-js" class="headerlink" title="upLoad.js"></a>upLoad.js</h5><ul>
<li>在后台controller文件夹下创建一个upLoad.js文件<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;mz/fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">&#x27;mkdirp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lmhUpload</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="comment">// 调用这个方法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updatepuSubPic</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">// 需要前往 config/config.default.js 设置 config.multipart 的 mode 属性为 file</span></span><br><span class="line">        <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 声明存放资源的路径</span></span><br><span class="line">        <span class="keyword">let</span> pusubPics = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// let id = &#x27;&#x27;;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ctx.request.files[0] 表示获取第一个文件，若前端上传多个文件则可以遍历这个数组对象</span></span><br><span class="line">            <span class="keyword">const</span> f = fs.<span class="title function_">readFileSync</span>(file.<span class="property">filepath</span>);</span><br><span class="line">            <span class="comment">// 1.获取当前日期</span></span><br><span class="line">            <span class="keyword">const</span> day = <span class="title function_">moment</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYYMMDD&#x27;</span>);</span><br><span class="line">            <span class="comment">// 2.创建图片保存的路径</span></span><br><span class="line">            <span class="comment">// 需要前往 config/config.default.js 设置 config.pusubPics 路径为app/public/pusubPics</span></span><br><span class="line">            <span class="keyword">const</span> dir = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">pusubPics</span>, day);</span><br><span class="line">            <span class="keyword">const</span> date = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 毫秒数</span></span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">mkdirp</span>(dir); <span class="comment">// 不存在就创建目录</span></span><br><span class="line">            <span class="comment">// 返回图片保存的路径</span></span><br><span class="line">            pusubPics = path.<span class="title function_">join</span>(dir, date + path.<span class="title function_">extname</span>(file.<span class="property">filename</span>));</span><br><span class="line">            <span class="comment">// decodeURI是为了中文乱码</span></span><br><span class="line">            <span class="comment">// id = await ctx.service.dlqupload.add(&#123; img_url: api + uploadDir, filename: decodeURI(file.filename) &#125;);</span></span><br><span class="line">            <span class="comment">// 写入文件夹</span></span><br><span class="line">            fs.<span class="title function_">writeFileSync</span>(pusubPics, f);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">            <span class="comment">// 清除临时文件</span></span><br><span class="line">            ctx.<span class="title function_">cleanupRequestFiles</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: pusubPics.<span class="title function_">replace</span>(<span class="regexp">/app/g</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            <span class="comment">// id,</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = lmhUpload;</span><br></pre></td></tr></table></figure></div>
<h5 id="config-default-js"><a href="#config-default-js" class="headerlink" title="config.default.js"></a>config.default.js</h5></li>
<li>在后台config文件夹下的config.default.js中添加配置<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Egg.EggAppInfo</span>&#125; appInfo app info</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * built-in config</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Egg.EggAppConfig</span>&#125;</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="keyword">const</span> config = (<span class="built_in">exports</span> = &#123;&#125;);</span><br><span class="line">  <span class="comment">// 图片上传</span></span><br><span class="line">  config.<span class="property">uploadDir</span> = <span class="string">&#x27;app/public/upload&#x27;</span>;</span><br><span class="line">  <span class="comment">// add your middleware config here</span></span><br><span class="line">  config.<span class="property">middleware</span> = [];</span><br><span class="line">  config.<span class="property">uploadDir</span> = <span class="string">&#x27;app/public/upload&#x27;</span>;</span><br><span class="line">  <span class="comment">// use for cookie sign key, should change to your own and keep security</span></span><br><span class="line">  config.<span class="property">keys</span> = appInfo.<span class="property">name</span> + <span class="string">&#x27;_1639723070889_7073&#x27;</span>;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">mysql</span> = &#123;</span><br><span class="line">    <span class="comment">// 单数据库信息配置</span></span><br><span class="line">    <span class="attr">client</span>: &#123;</span><br><span class="line">      <span class="comment">// host</span></span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">      <span class="comment">// 端口号</span></span><br><span class="line">      <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">      <span class="comment">// 用户名</span></span><br><span class="line">      <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">      <span class="comment">// 密码</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      <span class="attr">database</span>: <span class="string">&#x27;egou&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">    <span class="attr">app</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">    <span class="attr">agent</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  config.<span class="property">security</span> = &#123;</span><br><span class="line">    <span class="comment">// 关闭 csrf</span></span><br><span class="line">    <span class="attr">csrf</span>: &#123;</span><br><span class="line">      <span class="attr">enable</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 跨域白名单</span></span><br><span class="line">    <span class="attr">domainWhiteList</span>: [ <span class="string">&#x27;*&#x27;</span> ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 允许跨域的方法</span></span><br><span class="line">  config.<span class="property">cors</span> = &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">allowMethods</span>: <span class="string">&#x27;GET, PUT, POST, DELETE, PATCH&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  config.<span class="property">uploadDir</span> = <span class="string">&#x27;app/public/upload&#x27;</span>;</span><br><span class="line">  config.<span class="property">pusubPics</span> = <span class="string">&#x27;app/public/pusubPics&#x27;</span>;</span><br><span class="line">  <span class="comment">// add your middleware config here</span></span><br><span class="line">  config.<span class="property">middleware</span> = [];</span><br><span class="line">  <span class="comment">// add your user config here</span></span><br><span class="line">  <span class="keyword">const</span> userConfig = &#123;</span><br><span class="line">    <span class="comment">// myAppName: &#x27;egg&#x27;,</span></span><br><span class="line">  &#125;;</span><br><span class="line">  config.<span class="property">multipart</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="string">&#x27;1048576000&#x27;</span>,</span><br><span class="line">    <span class="attr">whitelist</span>: [ <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span> ],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...config,</span><br><span class="line">    ...userConfig,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h5></li>
<li>在后台路由管理文件中添加路由<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, controller.<span class="property">lmhUpload</span>.<span class="property">updatepuSubPic</span>);</span><br></pre></td></tr></table></figure></div>
<h5 id="http-js"><a href="#http-js" class="headerlink" title="http.js"></a>http.js</h5></li>
<li>在前端请求文件中添加请求<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">postUpload</span>(<span class="params">url, fileList</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> param = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    param.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, fileList.<span class="property">raw</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance.<span class="title function_">post</span>(<span class="string">`http://127.0.0.1:7001<span class="subst">$&#123;url&#125;</span>`</span>, param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h5 id="UpLoad-jsx"><a href="#UpLoad-jsx" class="headerlink" title="UpLoad.jsx"></a>UpLoad.jsx</h5></li>
<li>封装一个图片上传的组件 该组件使用的UI库是tdesign-mobile-react<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Upload</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;tdesign-mobile-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;tdesign-mobile-react/es/style/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;postUpload&#125; <span class="keyword">from</span> <span class="string">&quot;../app/https&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">UpLoad</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [fileList,setFileList]=<span class="title function_">useState</span>([])</span><br><span class="line">    <span class="keyword">const</span> files=[]</span><br><span class="line">    <span class="keyword">let</span> [arr,setArr]=<span class="title function_">useState</span>([])</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fileList.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">postUpload</span>(<span class="string">&#x27;/upload&#x27;</span>,item).<span class="title function_">then</span>(<span class="title function_">async</span>(res)=&gt;&#123;</span><br><span class="line">                <span class="keyword">const</span> obj=res.<span class="property">data</span>.<span class="title function_">replaceAll</span>(<span class="string">&#x27;\\\\&#x27;</span>,<span class="string">&#x27;\\/&#x27;</span>)</span><br><span class="line">                <span class="keyword">const</span> http=<span class="string">&quot;http://127.0.0.1:7001&quot;</span>+obj</span><br><span class="line">                <span class="title function_">setArr</span>([...arr,http])</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;,[fileList])</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        props.<span class="title function_">getImage</span>(arr)</span><br><span class="line">    &#125;,[arr])</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;demo-section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">multiple</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">autoUpload</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">defaultFiles</span>=<span class="string">&#123;files&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:7001/pubilc&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">beforeUpload</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                onChange=&#123;(e)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                    setFileList(e)</span></span><br><span class="line"><span class="language-xml">                &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="Topic-jsx"><a href="#Topic-jsx" class="headerlink" title="Topic.jsx"></a>Topic.jsx</h5></li>
<li>在需要上传图片的组件中引入Upload组件<div class="highlight-container" data-rel="Jsx"><figure class="iseeu highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./topic.module.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UpLoad</span> <span class="keyword">from</span> <span class="string">&#x27;../../../../components/UpLoad&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Topic</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [obj,setObj]=<span class="title function_">useState</span>(&#123;</span><br><span class="line">        <span class="attr">images</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 副作用</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 判断obj中的数据是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">images</span>!==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// useEffect根据obj.text的变化执行</span></span><br><span class="line">    &#125;,[obj.<span class="property">images</span>])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.box&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 上传图片 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 向子组件传给回调 子组件调用并传参 父组件接收参数 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">UpLoad</span> <span class="attr">getImage</span>=<span class="string">&#123;(http)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">            const arr=http.map((item)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return item.replaceAll(&#x27;\\&#x27;,&#x27;/&#x27;)</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">            // 将接到的参数转为字符串 存入obj.images中</span></span><br><span class="line"><span class="language-xml">            setObj(&#123;...obj,images:JSON.stringify(arr)&#125;)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React的CSS-in-JS库</title>
    <url>/2023/06/07/styled/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>styled-components 是一个用于 React 的 CSS-in-JS 库，可以让你在 JavaScript 中编写 CSS。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">npm install styled-components</span><br></pre></td></tr></table></figure></div>
<h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Styled</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1、创建样式组件：</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">            background-color: #4CAF50;</span></span><br><span class="line"><span class="string">            border: none;</span></span><br><span class="line"><span class="string">            color: white;</span></span><br><span class="line"><span class="string">            padding: 15px 32px;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string">            text-decoration: none;</span></span><br><span class="line"><span class="string">            display: inline-block;</span></span><br><span class="line"><span class="string">            font-size: 16px;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledInput</span> = styled.<span class="property">input</span><span class="string">`</span></span><br><span class="line"><span class="string">            outline: none;</span></span><br><span class="line"><span class="string">            border-radius:10px;</span></span><br><span class="line"><span class="string">            border-bottom: 1px solid red;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 在 JSX 中使用样式组件 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Styled<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledInput</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h6><p><img src='data:img/jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAz4AAAJbCAYAAAAlhUGFAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABSzSURBVHhe7d3Ba511osZxYZYDs5s/QOyqsyz3
Lu5a3Fios3A7ePFCdwoKImrBIsMI1cGWwcwsihsplEJnBHVRwTaUUoa2OC3BFieZ0STXG2ltbSZp
TSr+7vm9eU96kp68to6QnCefDzxo33OappADfj3v+56H/uM//6uYmZmZmZklT/iYmZmZmVn8hI+Z
mZmZmcXvoaf++3+KmZmZmZlZ8h7a/ecnitlGAwCABMLHOgcAAAmEj3UOAAASCB/rHAAAJBA+1jkA
AEggfKxzAACQQPhY5wAAIIHwsc4BAEAC4WOdAwCABMLHOgcAAAmEj3UOAAASCB/rHAAAJBA+1jkA
AEggfKxzAACQQPhY5wAAIIHwsc4BAEAC4WOdAwCABMLHOgcAAAmEj3UOAAASCB/r3A957733yvPP
P18ee+yxsnPnzvLwww+bbZvVn/n6s19fA/W1AABsXcLHOreRsbGxsmvXrnv+Q3DHjh1m22brf/7r
a6K+NgCArUf4WOfWm5iYKHv27Fn9D70nn3yyHD58uDl+69at9lmwPdSf+fqzX18D9bXQf13U10g9
DgBsHSMUPnvLgcnzZXppuf3We75fLktLM+Xc5O/L00N+zzMXx8v0tY/uOX4/OzFf/4CZcmLIY//O
Dl9d6H3dhXLx0vDHt9oG1f+T3T+d7fHHHy8ff/xx+whQ1ddEfW3U10h9rXzyySftIwDAZhuR8NlX
jt+owdDTi52FxZkyfbO3xYWy9P3K4YVrx8pLa37PR2W6PjAvfP6d9dX/e92Pnno9A7Cx+hp5+eWX
yyuvvFJmZ2fbowDAZhqN8Pn0Slmq3+3SpXL4xLrHzv6lXG4eXC5Tk3sHHhM+P8X6+qe3iR64P0eP
Hi0vvPBCOXToUHsEANhMIxE+K7FQyvQXwx9/emqqebxGzt1T3oTPT7GqnuLWP70NuH9vvfVWEz8n
T55sjwAAm2Wkwuf6l68NfXz3ifEyV59w63wZq7/+YqZ5/qCFq++sfp252X33fo3z58v1+uA3Hzbx
NDx8nitj01Pl+sBlRs01Rp8N+75eK8fnZsrCd+0T78yVi73njWL49O/e5poeeDCXL19uwmf//v3t
EQBgs4zWqW5lucxdGy9HP9k39GYGq7twrJyavrISMrev9P59vLw/0YudC23cLJ5ddz3QE+Xg3I36
SJmaWjld7t7wea2cuNkWz/JMuTg7Xk7N9SKoCZvlMv3FYPzsW33u0u2pcq7355+5Ntf7O/S+/8XR
Cp/62SQ1euodq4AH9/bbbzfx40YHALC5RiN8/ry3HP5qJUxW1Zsc3OoFyPSxcvD04LU9/Q071e0P
5dztenCunDkz+Nz2+PdT5Xh7bH34PD05tRJfC+Pl1fZYsxPvlItN48yVU/2v2Q+1dc99euJSL3ma
B0YmfOo1PTV86u16gQd3+vTpJnzqNT8AwOYZkfBZ2TMXPyoX5+/eyW3Qws3xMrbmxgfDr/E58H8r
AbXmdLf2naCla++uHlsbPnvbXw8PlpdmmxPtVr/m0a9rCS2Xy1fWP3dfObNYnzk64VM/lb6Gj88k
gR+n3tWths+bb77ZHgEANsNIhc/dPVdevXisnJi7UuYGPtdn6eZHA6ewbXBzgzNnV64HGjjdbeU0
t16ofHr3eWvDp/+uzo1yeXq8OXVuza6thM/S18d6z/396rtKp9bfga63UbvGp38Lax9OCj/O8vJy
Ez711tYAwOYZ0fBZu2c+7Z9CdqOcO98/vtFd3faVU82T+6e7tVGzfKkcHnje2vBpv9YPaf6sfiQN
Xh90d6MWPjV6duzYUf9CwI/04osvNvEDAGyerR8+473oqKe23T5fDgx7vN3K6WWDt7zeKHyeKC/N
DJyadmklmq7P/WHNc4a+4zNwDdDGy3zH59tvv61/KeAB3blzxzs+ALAFjMA7Pu+Wy3fqt3qjnLsw
7PG6veX9b+pzekEx0T+2cfjsPvFhmaoxtXi2HG5Ocxt8p2hla8On+9qc5hqf75fL3Jcr8dSPsKnJ
9c/tvlZoK65/jc/k5GTzdwIezFdffeUaHwDYAkbiVLeD7Q0JytKVcvzc+ju47S0HJq8079qsPV2t
DZ+F8SG3vu6H0lyZq5euDLm99drw6cVN/7OBel/vwOA7OSd7EdXc0nogzNp3kcpS7/sZeO4o39Xt
+PHjzXcOPJgLFy404eOubgCwuUbkGp+Bz9DpWVq+UaZvzvQ2d/cDQr/rhcfEYBQda98pWihTs+3n
+Ax+zcmp5rdVczPrHuttffg038N8+z3c8zk+vT/l6jsDgbV39cNS+889c3WmLKzejW50wqf/OT7P
Pvts+70DD+LIkSNN+PgcHwDYXCN0c4O95cCVs2Xq1rrbWX+30Hyo6djJe3/Pq1NTd2Pj5vpT3vph
1IubIdfi3Bs+dc+Vsele7NxtsF7Y3ChT038a+q5S89zmz+ipnzt0sxdgI3aNT7Vr167yyCOPlOvX
m49/Be7T4uJic2OD/fv3t0cAgM0yQuHzU+8vK9f5fPPhkGix/qqxsbHmXZ/XX3+9+TVwfz744IPm
3Z6TJ0+2RwCAzbJtw+fV6Xpnt7Wf3WP3rm/Pnj1N/NTrFYAf9vnnnzfRc+jQofYIALCZtln4vFvO
fDNTpudvlKX6t799vhwc+jzrr29iYqK5tfWjjz5arl692h4Fhpmfny9vvPFGcwvr2dnZ9igAsJm2
Wfj8qf2MnZ6lqfL+2WHPscENOn36dBM/u3fvLv/797+3R4FBN7/8shw8eLCJns8++6w9CgBstm18
jY/dz9b7x9/+VmZ//etSfvGLUv74x/Yo0Kivid5rY/6pp8rX//xnexAA2AqEj3VuQ7/7XSm//GUp
v/pVKb/9bSl//Wsp//pX+yBsE/Vnvv7s19dAfS3U10R9bQAAW47wsc79oCNHSvnNb0rZubOUn/+8
lJ/9zGz7rP7M15/9+hqorwUAYMsSPtY5AABIIHyscwAAkED4WOcAACCB8LHOAQBAAuFjnQMAgATC
xzoHAAAJhI91DgAAEggf6xwAACQQPtY5AABIIHyscwAAkED4WOcAACCB8LHOAQBAAuFjnQMAgATC
xzoHAAAJhI91DgAAEggf6xwAACQQPtY5AABI8FD7TwAAgFjCBwAAiCd8AACAeMIHAACIJ3wAAIB4
wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIH
AACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAA
iCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgn
fAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wA
AIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACA
eMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjC
BwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcA
AIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACI
J3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8
AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAA
gHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4
wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIH
AACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAA
iCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgn
fAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wA
AIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACA
eMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjC
BwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcA
AIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACI
J3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8
AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAA
gHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4
wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIH
AACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAA
iCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgn
fAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wA
AIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACA
eMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjC
BwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcA
AIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACI
J3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8
AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAA
gHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4
wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIH
AACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAA
iCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgn
fAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wA
AIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACA
eMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjC
BwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcA
AIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACI
J3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8
AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAA
gHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4
wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIH
AACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAA
iCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgn
fAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wA
AIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACA
eMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjC
BwAAiCd8AACAeMIHAACIJ3wAAIB4wgcAAIgnfAAAgHjCBwAAiCd8AACAeMIHAACIJ3wAAIB4wgcA
AIgnfAAAgHjCBwAAiCd8AACAeMIHAAAIV8r/A8N2kAjYl3sOAAAAAElFTkSuQmCC'/></p>
<h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><h5 id="使用-props-来动态修改样式"><a href="#使用-props-来动态修改样式" class="headerlink" title="使用 props 来动态修改样式"></a>使用 props 来动态修改样式</h5><ul>
<li>如果需要传递props给StyledDivProps，则需要使用泛型声明props类型，并将其传递给StyledDivProps。<div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="comment">// 用来声明props类型的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StyledDivProps</span> &#123;</span><br><span class="line">    bg?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Styled</span>(<span class="params"></span>) &#123;</span><br><span class="line">                                <span class="comment">// 声明类型</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledDiv</span>=styled.<span class="property">div</span>&lt;<span class="title class_">StyledDivProps</span>&gt;<span class="string">`</span></span><br><span class="line"><span class="string">        background-color:<span class="subst">$&#123;props=&gt;props.bg||<span class="string">&quot;yellow&quot;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">        width:100px;</span></span><br><span class="line"><span class="string">        height:100px;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Styled<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledInput</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 传递颜色给StyledDiv */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledDiv</span> <span class="attr">bg</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledDiv</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="给组件传递样式"><a href="#给组件传递样式" class="headerlink" title="给组件传递样式"></a>给组件传递样式</h5><div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledChild</span>=<span class="title function_">styled</span>(<span class="title class_">Child</span>)<span class="string">`</span></span><br><span class="line"><span class="string">        color:red;</span></span><br><span class="line"><span class="string">        background-color:yellow;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Styled Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StyledChild</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;props.className&#125;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h6 id="效果如下：-1"><a href="#效果如下：-1" class="headerlink" title="效果如下："></a>效果如下：</h6><p><img src='data:img/jpg;base64,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
1zXX2/PClde81WxunipyaeQpo6t232hu3Hubuf6mW832iy+v8rzVbNt+iTV+pHz/O3627bjMXFel
k/TX3bDXfoePO+dw/RAuvfwq+x1F7rMYJ1dcda05e+v55pLLdtl2nXOefO/PaeaSy3fZ17LtvmGP
ueLq68zms7ba8iSPPLFz7gXbzCU7d1X132KuveFmc8FFY7NMjKjLq3ZKXddV5y7beZU1iOT8NW/d
Y588kt9P3XS6ufiyK6p0e21dV15djcmWs+257RdXfavmQvp8zXU32jqlbDl3YTUe11RlX1vluboa
ry1nn2ePA8BkeMbPy+bZT2xrPdlTDMbPXLWqxs9LT5q7JzF8HBg/CKEFkha0BoDpwPgBAAAAgFmw
GsaPGChi/rjPzmi4aPsl1mS46tobK24wV1c/r959k9m85RxrEslTKXtuvd1cvusac+kVV9vvB9pz
6z5z9tbakBDT58Zb9tnXll125dWWm/bWn6UMSbNl67m2DGnDZTuvNldcdZ09f9s7D1jTw9Zjn/ip
jR8xhW5/1wFz9XU32SeVpE3yXT61cTNuu/+7M37ccSlT6njrjbdaI+rSnbusaXPJZVeavW9/p9l+
yU5zwYU7zLVvvcl+L5CYN/JUkxgyN9x8m336SF7HJm295bZ3mrPPPd+WK2aVGFEXbNtRjd2lto4d
VRvlnLzqzRk/l16+q8r3LrOjque8C7dXfbnRGl6nn35mlfdi+3SQ9FlMNUkjeS665HL7HUzS5/Mu
2G6uvPo6m0bOAcBkNMbPy+bZe6sPWhC/lBLj5+XD5oVvPGEeu3Ov2bRnLYwijJ8uHf7yQbN1g1JP
HzB+0NLpZXP4xWfNE58+YPZu3GsOfbs5jBZCWtAapuOiHZdZtHPLypDGpKQfGD8AAAAAMAtWw/i5
fs+t9smTU5pXiznDZPulV9RP1dx4izVA5CkUMSzOOf9Ca8rI6+HOOXf8tI08ySMmzlXXXm9fU3bl
NddZI+Xsc8ZPppx9zvnm5re/wz5NY9Nc/VZr3GxpnhQSLtx2ibl137vNxZfvsk/8SBsu3Xm1/Te2
mB9XVHlGaat/m9/+rp+zT8fIa9+KjJ/TazNJjBV3TDjzzC3mjKo+9/nUjZuseSOvXjv11NOqMXib
NXv8PDIul1x+pa1LytxRtdmdk1e+Sfvl92uuH7/q7YyzzrbfXeTSyTjIdyxdUPVbPp97/kXmxltu
G7X/tGYMxIxyeQQZZ/8zAPSjNn6+8YDZpAXw+5Ayfr73vHni03eb/RdH3xO0Jk8IYfzk9PJXD06/
DgSMH7QUOmye//xj5u5928wxgVm6E+NnwaQFrWE6MH7aYPwAAAAAAPRnNYwfMWH23HL76DVtIePv
mZGnT8TYOfe8C+2TQNdcd1NgtAjyqjMxQKQsMZR2eeaESytmjxgm8oo3MTRiA6Y2Qt5mzaUzTq+/
40fMm3PPu8i8ff97zI7Ldtonaq7f83abX14DJwbUW04ZlyGkjJ9Np59Z9+P8baNjwsZNZ9qy5Ekm
qVNep3bj3n3Vv/8vNRs3nm6NL/c9SKdsrPOI+eLMoO2XXG5u2fcu+8SOvMrtrOY1cYIcc0/8bDrj
TPsE0/VVHfaVbm/dY5/4kad5pM3yNJH0S9op6aWdYkBJOnnSSb6vSH7K+LryAaA/K/J/qj/1/vRr
vTacfcA89tUXzOGXmwhao5cPv2Ce/fxj5sC1jaGTMHKShgXGTy/N3fh58ZDZ3fmkzxFm06795u5P
HjJPPv2UeUr4wiHzyH13m/27NpkjXDqMH7QM+vYhszPYHw6Mn0WTFrSG6cD4aYPxAwAAAADQn9Uw
fuR7a96+/w6zMzJgfMSMkaeC5Omf0888q/p9b/3ESWOuONPl8iuusabJlnPOs+aOvP7MPy+I0STG
zpat51lD44pddb0jE6mqS75zqGX8VO2UJ37E8JFjF192pf2eIVduTMr4Of20zeYm+3q4+mklSSf9
k9fdiQGz9dwLrXF1XmO4bBPjZ9Pptj8XXtQ8dVOll5+7rrmh6s943MTMku8Juu7GvebWfe+y38sj
x8W0cU/8iHEjps3Wcy+o67lguzWA3Gvhzr9ghzWfNp1+hm3b+RfW58WAElNI2nBBhTwZ5OoFgP6s
GPOMuVsNXlbsOmReaAJnWb30lHngI09g/MxR8zV+njUPbFTKHnGE2XnfU+alyPxr6QeHzfNfeMDs
/sSzzQGEBiyMn3UjLWid4/obbjTvu+uuFvfff7+5+wMfUM91odUzS0448WRzzrnnm6uuvsbsu32/
ueOO95rrr7/RXLSt/ke7lmcaMH7aYPwAAAAAAPRnNYwfeaWZPOmy710HjHz/jHvSxHFa9fnyXVeb
fe88YLZdfJk9Jt+Nc/Pb3mHOar6rx6ZrXkkmTwJt3HiauXr3DeamW/abMzePzZkzN281e9623+za
fb3ZuOkM+/028loz90o0QQwZedWbtMV9x4+YJmds3mJfHSffvXNqldel31rd60nd7nPMJZftsnnc
59NOO9PcdOvto+8FEqSN9vt6vNfSibnjjB95jdxb97zNXHBR/cTPW5o08t1HV1xVf/+QtHtkXlXI
9x6JgbVxUzUWVf1iCInBJE8tbT1nXLcck3GTJ37ksxg/8lnmRT7LdyVJO+T7kFwewR8zAOjPSjp4
uWJ2Pj69NYPxMxvN0/hJli1s2GYe+PrhJiVCaCSMn3UjLWidQ4yfj3zk71kDxefhhx82P/dzd7aO
dyFlafXMinPOOd8cPPhR274UYgJpeScF46fNvMZk81lnm0suuczs3v1Wc9ttt1sjUX7KZzku57V8
04DxAwAAAACrxWoYP4KYPbuuvcGaP9fdsNeaFjsuvtxcduXV9ikfMX0uv/Iaa1JIenlSRV6XJk+i
bK/SXbT9ErO7yve2299jX8kmacTckCd03nrTLWabvR+41BohYt6IWSNpapPnXbZOeTpmxyWXW6NH
ypHvzpGni+rXue22psrFl19hn06SV6XJkzCXXHalbZucl/J848VxifIdP/I9Q+eeP/5+Ium/fM+O
lCP/lheTRYyr297xXrOtapeYVPKk0QXNq97e0ozDVbtvNDuvutY+EXTDzW8zu6653uYXU+bq626w
xpaMmTzxc9nO+lVvN958m/3+I0kn43j1tTdao2vHpTvt+S1nn2c/b6vG1ZlmYszJOJxz/kW2bPne
IfluJDkHAJORNX62Plr0vE9WGD+z0fyMn2fNAycq5Vo2VePS9ZgPQksqjJ91Iy1oncMZP/FxMVDE
ZImP50iVNQvkKZ+9e29tmTwpPvjBD9ov2NTK6gvGT5tZj4kYOm+/bZ86lzGSbpYG0CyMn3e9933V
jdvb1XMxkvahT/3D1vFHP/u4/b8G4+MOySN5tXMAAAAAsD5YDePHmSXyVIv8W/faG262xsOtt1dU
P3dXn0ffbeNxdnX/J698e1uVTpBXobnvzXFlymvTxDiq07zHGj9bmydtXBoxYCSvPAkjTxFdtqt+
XdxlO6+yJo2YQvK7pD110+n2yRh5AkbaJwbOlVfvNmd4TxU5XPk7LrnCPpnjjovJI/XJq9bcMUFe
nXbD3tvMLbe9y+y5db/9TiP5nh8xpMT4EfPovAubV701yPcTXX5lbehsOfvcqq232D7srZC+bj6r
fiJKnnASk0p+l3rExHH1XHz5lfZ7gpzxI0aR1C3lyPiKqbTpNPleoGuqft9ujTMx3XY05QHAZKyY
w0+a/WrwsmLDbnPoxSZy1kPPfEQpq4CDX33BPHaRfm7lxAdM1wvEXnh0q5p3/OTS9MbP4d9/yhy6
b7/ZeXbz3UaWI8ym83aa/fc8Zp78/f5Px7z01UPmgX07zdbjx9+1tOH4rWbvRw6ZZ5qmz8v4efnp
u71+hGya5yvbXpbXwskX41f9Dsay7vvWXfvNA48/ZZ7/XpO+Q0Xj84OXzDOPHzR7vfricQ512LxQ
tfHAnq1m05GuTJnrvebg48+Yl37QJFNVttYO//6T5pFo7o/YWK2l+6o2fXsC020txvXwC+bJT4Z7
Quraue8R8+S3+u6Hl81L33jCPHbnXrN14xHj+jYcU/3Daa858MmScSkc+2/FY7/BHHN2NfaffNK8
kGr2Vw8G5RUzgyfz0OTSgtY51ovxI69zc4H/++6739Ylf9jdeTGGLr/8CnPw4MFROnldnRz3y5mE
aUyOs8+5wAb05ad2ft7IHJai5U8xzZjEyFy6OXN84hOfMH/v7/09+8SP/JTPcRrJp5XXl5J+dBk/
Yvp0GTcOzfiRfK6MlLkjeeR8zEfvf0hNDwAAAACLx2o98eM/KSMG0OlnbrGmhfyU17bF6dxPSXvm
WVvN5i3nWIMilWazTbPV/u6fc8hx+X4ceWWbvN5N/q0r/+aV7wYS08OV7ZA0UmfJ686k/RtPG78a
Tl7TJmW67+nx2VSl21y1Q540ks8bTzvdmk3SXjkX55F2+W0T00bGQzj11HFaMY6knNHnqqyztpw7
rkfKacbGIa+kk9fsneKVI+Mjr9cTQ8xPCwD9WTHmBfPYeUqg0rFhqznw+POmT/h2cuPHmMOf36ue
W1k5yTzwjaYCVal+7DVPjILcUxg/8j1Gu7xAdIYjdj1gnikJrH/vKXP32eOAv84ms//XXzAvzMn4
eeYjqfr9cZuhfvCSeeq+3eaYDVqdGhvM1jsOmec7FmCXQXH4ywfNtmyd9TiP9OKT5kDX3Gzcb55M
GqMda+0HL5gn3lltQOX8mKrv9zxVtvfWaFxf+PUDZmu2zg1m2yeeNSUW1uHnDnWPuaVp+/ebjC11
7fMXzJN3bE0anhZ5xeE3lFZj/KxLaUHrHNMaP76xMi/jR767Jw76i8mjpZX2+CbRLL5zaBqT48qr
r7PB+bUyfmQ8/HHT+IUPf1jNm2NWxo9m+vzCL3zY3vj46eSzHI/TzsL8mYXxI4hhI3OtnfNJPfEj
nHbGFluG/IzP8cQPAAAAwPpntYyf1cYZPxduu8S+Lu7Ms8ZP7Gy/+DJz+7t+zpx7Qf30UExsGqWO
9SUuo2+Zpe2apK2T5AGAPCsSFHvh09v0YKXHhuN3mwe+8Lw5nH3KodY0xo95+SlzdyKQnH313Lce
M1uVPBve/5QXdJ7M+Dn8xbs7gtsKXU9LvXjI7C4uc5PZv28exk/G9Nv3ZC+zr0hFRleCVCC+Uc6g
eOFX95ojtHMtNtXmYp+5ueixahQ1Zdbal18wh64vH4dNVR+yxslajevju/PmyYgNZvev5l7s+LJ5
/tOlc+Sx8aB5RjV/ZjT21R5+In5lG8bPupQWtM4xjfFz9TXXWpPFfZ6H8SPGhTy5Ewf8hZz5I696
60pXyno2fgTNXPHZcvY5ar4cszB+tHbFRl28BuV8nGda82dWxo8g5oz834w//6GDdt5LkLRxOe7p
n1IkfVwGAAAAACwea2H8iMkQo6UTStJpadxP+a4feW2Z/PtUvl9HviNHXgt31bXXj57S8fM53LH4
eAotv//ZP+6X66fT8vhp/c/acfd7nE4776fRjmnpAaAf1vgx33/GHNyoBCs1Nmw1e3OvQqo0lfFT
6dn7TlLPr5yXCrKnzKsN5u6n/aB2f+Pn5a8eNJuU9EVsPGie1WLq1XjfnfxenZ5ME1B++SlzQCuz
Yhbf7xSozxpLkTHTkgbFrp3J77BS2bXf7O/Vzg1m/xe0zZBea5s2dj3pE1PV8euJDbdexvXEg+aZ
hL9UbiC12XD9E9VIx0qP/c6q3drxFCfFphvGz7qUFrTOMYnxI39QXQD+fe8bB+rnYfz4T/tI+bfc
8rbRZyFl6kjbXRq/jZMwqcnxgQ/f2wrQy5ehps7/4gOfDPJLWjkuv+fSlfDxj388GDfHe95zh5q+
i2mNn0suuazVFjHrxLST8zfvvcV88EMfqo9XP+WzHI9NPYeU55ffh1kaPyVoT/zI69r8p3mc8eOn
0ZDXZUg67QkhAAAAAFg8hvrEDwDAWlMbP6JeT6BUbDjG7L7vKfV7Tl749QfMA/fV3H19wsQ5cbe5
u0njePJbTQHfesxs0/KsbDOPuTSBEoHe1vcC9TR+vv+UOZAYk017HjFP/v5L5vDhw+bwi8+YxxKv
jtr26dhAedk89f7cEwfyPSNbzdbzKqLvaFGZJqCc/HL6lY4nNPrqJfNE9ikLr88V2deVbdS/6ylp
UIyQ7+apyx9/X08HR25q2rQp/zSK+nRUeq2N6THX6ndcLcK4enV431PUZoO+x5J7fYPZ9v5D5pkX
q/1V7bGXfv/JxKsWY3NXVDD21fWraFw2HDTBDvtW1Q53zXr/bnOSlmflJLP7/eG17QH/NYJo1aUF
rXP0NX4kvf8EzryNHynT1eVMATF73DEhZf647/uR9mrnS5nG5Eg98SPmzcOfeiw4Jp/9Y874ifNL
mr7mTzxmDjemfZnW+PnoRz/aasu73vVue07ez/3ggw8G5+SzHJfzks4/J0h5fvl9mJfxI0/yaN/5
oxk/cszNtXzWjB/tVW9yTHtiCAAAAAAWE4wfAID5MDZ+RC8+0fNphxWz4ey7zVOZ74JJPzFwyKSt
hcPmiT1Knoqdjyu5EgbGSZ+IQ9n9jJ/Uk0f6q7deNk/dqQS+44B9MtBdjeXFB81TcfdeesocvDgT
UJ+T8ZN6AmoSyVNTeoC8Gst3Kt8z84PD5plPbEsaIXs/r9gsOYNCXgnmZ/lB9+u+Nr3zCfOCb2q+
9KS5O7U3NhxUTZmc+aDO9eHnzWPJdrWNk7Uf17vNk0EfDpvnH00/vdN+iiy1zzeY3Y9rRskL5rGL
lPR7noiMt/zYb3r/k6FhnR33rQmzuVJy/+w0h+JXxKE1lRa0zlFq/Jxx5hb1SYt5Gz9SvqvLP15i
/vh55R8B8flSZm38OENHe/2bHHdPBbl0UoafxpUZH+/innvC+bvpppvVdCVMMyZvf/ttQTsce/bs
teevuvpa9bwcl/OSTjsv5fr1lDKt8eO/ls03dDSDJ3dccEaOK9M90aPhDB+e9gEAAABYP2D8AADM
h9D4EfX+kviKiV4VlTN+jHn56bv1ALKST69Dezqoj/HzjDmojcGGu81TiVdWmW88oATiT6q/N6ZR
8vuUNhwwT6W+rD7z5NG8jJ/kq8V6SwwxvQ6Zy/RzEC+bZ+5JPC1WvAaExFNi33vC7FXTV5x4t/rd
MYc/v1dPv7LfPNkaroz5MOFch0bmWo9r831ILSXMGSFeq6n1l/zepGoOfn1/O31r/DNjn3iyKWfI
Jk1QjJ91Iy1onaPU+PGfvPFZLePn4MH2Ex1d5o98/5A7J8aVf64PszZ+5BVvqSd25Licl9/9V73F
yHFnEJVy/gUXjcbjwx/+iJqmlGnGRL5TyLXDxxk327ZfrJ4/a8tWez5lHE3yXUXCtMaPQzN05BVu
8RM5OePHUfrEj5Qvaf1jAAAAALC4YPwAAMyHtvHj9PJL5plPHzDbSl+LlQjWTmr8GPOseUD9Hpy9
5ongCaPEUwOtpwBEPYwf1cSpuCdjtCQCwePXph02T+5rnxe6vlPnhUe3qvnmZfzs/Ef59pTrWd1A
U1/RFelbj5mtrXzCgZb5llxnl6dMkBfMY+cp6SvaT4o16hXoT6+19uv/Qj3zkcTTJ8Er5dZ4XDP7
N7lWo+/j0U2cjrWnfsfOBnPw6815q/TYq08MWqXXQ/K1hxg/60Za0DpHqfEjaE/9zNv4uX3/O0Z1
aa8li82fvXtvHZ3z2+rn6cs8jB9n7sTM0/gR3vveA3Y8Lr7kUvV8KdOMiXDDDTeN5sZx551/d3T+
Ax+4Jzh3990fGJ2TdP45Qcpz5/syT+NHnsaRufJf+VZq/GgmUmz8SNk88QMAAACwfsD4AQCYD2nj
Z6SXzUtPP2L2np1/NZbQ61VRncaPST4dEzyNcvhJs19Jo7UlFxCOjZ+XfnW3mm4SxsHmVLA+fCpI
08tfPKDkq5jG+EmMneXOp6qZn4GSwfG2ydDWM+agmrcdWE+us+T4pNdC+mmn8vaky49NiraK9szC
jmth+ys9e2/3NaWUcP+W7/OxJjCLMH7WjbSgdY4+xo/Df/pn3sbP1deMX/ulvc5NiM2ffbfvt3/0
3We/jZMwD+NnLZ74Ec7cvMW8+93vUc/1YVrj5w1vPKn16jnh1re93Z4/8aQ3m7233Gred9dd5sKL
to/yyfk4j5Qj5bk0fZmn8eOO+0/9pNI5k0h+asaPewrIR8wgPw0AAAAALDYYPwAA86HA+HE6bJ5/
/IDZmnrlmKB8yf00xk/ydVxePepTA8nXsfUwflLtnoBx4LiPcRBJfdKhYhrjJ/lUVUXulXZ9lAyO
R1+aryo1Xj3mawLjJ20OzML46Z7roj2zsONa2P5Kz3xESTMhYbsxflAoLWidYxLjR3BP/8zb+JF6
XIBfXvemPfUjxObP/fffP/pdnhrS8pQyjckhho8E6H3jxxk6/jGHHHeGjksXf5dPzhAq4bTTz1SP
92Fa40eQf5jdddf7g3kT5FVvWnrtFXCSX8rR0pcyb+MnJpXOf72bpNFMHcnHEz4AAAAA6xeMHwCA
+dDD+KklXyi/SQ12VpzY/v6M0iCwrpfNU+/XngpwTzXor07b8P7U0yoYP6Ey3xNTkQx499FcDIr2
E1L9DQqMn3beWYxrYfsrYfyg1ZIWtM4xqfHjuGjbjtHv8zB+hFtuedso0C/f21Nq/gj33Xd/Mn0p
05ocvpnjePhTj1niY/6TQM7g8U0eZyTdcefPj46tBbMwfgSZG/+7mBw/d+ed5sab9tg1KD/lc5wm
txb6sBbGj2bqyFNB7rj8Lsgr4mS+JY/89M0hQeqTc+4zAAAAACw2GD8AAPOht/GTNwvaQefSIHBS
ie/aOfDFl6umPGUOtM7lXps2A+PnyE1m63lbe3Hg111PM8bBi02ShCYJwJco+Qo5YcPuznZ1Khkc
L3sl2d1q3nZgvf/4rJXxs9U89q0mSULPfuIkJV+F/0Tdwo5rJk+h8bPheH0f5Xik8Dt+MH6WU1rQ
Ose0xo/PvIwfCe4fPHhwFPCXJ398w8kh7ZVzLt0kfdCY1uQQk0aC9YJvAMkr3dxxIf7eH/+JHz/d
Wps+wqyMH8c11+w2v/iLvxjMXQpJJ+m1ciZhNYwfOe7Pof+dPw7/O3wkvZg8ziSKnwZy6XJ1AgAA
AMDigfEDADAfVuR1X098+vle3+eS/j/152D8yJeuX9TOv+Ejz+imxXmPJb7MX1QeEE4aIlN99036
1Wr6dxI5HTZP7NHzTWv8iHl2d+71fRvvNk99r0k7kVLfa7QhE4RvlDD9VjYcLH+ybOGMn9x3CImq
9X6enu+kT/i9XtRxzeSJ9vwLj25V0219NL2Dy4Txg0JpQesc68H4EeSVb/L0jm8AyOvc5DtgBP/V
bg5pj1ZWX2ZtcpQy7Svd5sk8xuTUjafZ7/D5hV/4sPn4xz8RzKV8luNyXtJp+SdlFsaPezJHmPRV
bM4Q8k0e90RP/KSP+z4gVy+vfwMAAABYH2D8AADMhxUXzD5i1wPmqRIn5vvPmLtT3wtz/RNBYFeU
DAJnDZpQhz+/V83/mPLl8Ns+nSu1R0A4GdTda56Y2AjRX01nuSg9HtnX601r/FR64dPb9LIdG7aa
A48/aw7/oMmQ0vdfMM88ftDsDgyKdJ83KOtlLHmyTP/yf+1VfuvJ+MnO9RcPmA1anpahs6jjmskT
m73Vulb7qrwysp/W2vjpfqoLra60oHUOZ9aIyeMjwfarr7m2dTzHPI0fIfVasBh5Okjao5UxCRg/
bVZjTOQfbjKP8lM7PyumNX6cKeMbNO6JnFJyZo+YOs7gcen9zy69OwcAAAAAiwvGDwDAfBgZP3XA
coM55toD5rHPP2teOByFgL//knn+Cw+YnUf6Ac4Q9f/U//Ldalp5JdvdT+eefPCkPpUir3iKj3WZ
Mn0CwvqTRsKGix8wz3Y0/fDvP2ke+Eg7AK+aWA2b3nnIPB+Ve/i5x8zu3BM5MzB+7JNIG5WyYzYc
Y7buOWAeuO8x88TTT5mnnn7SHPrkA+aBO/earRuPGKeL2vTy03cnzIyqz+9/0rwUuw0/eMk8de+2
RJ6TqrlqP3O1royfik3vfMK8EBlpLz190GxLzbVihizmuGbyxMZP5mkzbXxCvWxe+upj5sCnNIto
lYyfaj3or8xbMSfd89T4tXxozaUFrXOIWaOZJ5MyT+PHIa95u33/O8z73nfXqF4xe8QUErNqFt/7
4oPx02atxmQeTGv8CPJ9PP5nMWNk7kqQV7m57/cRs8d9z09MXGZcJwAAAAAsPhg/AADzITJ+pmDD
fvOkZrp86zGzVUtv2WCOObv5no6zj8kEZY159r7E95747HmiI9jaLyCcC6yvrBxhtu272zz2eTFA
Gr5wyDxyz36z7fjmiQrtdXbff8ocyBk5Vbmb3HeXuHJyzMT4qfTiobzB1IdWm17ImiDBOjhvkzlC
TVOTepplvRk/NeVzrZsPiziumTzKfsg+bbbhGLP7zkfMoS94e+zzj1mjcZMzoNV2rJbxk34tn+B/
V9Ex985on6KJpAWtc2h/LIWLL7nUnHHGWeq5LrR61jMYP20wfgAAAAAA+oPxAwAwH2Zk/Gwwux9P
vbwq/b02MTnjRwykbUqeMRvM3U+3n1gI1Tcg/LJ55iPVICnpi9CMn0ov/KNEYDzDhg0JY2BWxk+l
l3+/4+miUrQ2zcJY2njQPPP9prxI69P4KaRaR8kXGC7cuGbyqPvhBXPo+gKDM8WaGj+FhrQww32K
+ksLWgPAdGD8AAAAAMAswPgBAJgPMzB+jjB7P/1867tBfL30q7szT86MyRo/5rB5Yo+ez7LhYNWT
Lk0SEH6hqtd7jVkfEsaPlPnkO8sNpQ3XHzLPpMyiWQeUv/eUufvsKQLxQqpNLx4yezOvCsyycb95
8sWmHEXryfjZ/5HMdzbFbLzbPNX1nVILNa6ZPKn98P1qXCddc2o7Vs/4Md9+osx4m/U+Rb2kBa0B
YDowfgAAAABgFmD8AADMhxUJeD5557bsa6BSHLHroHniuZJvsnjZPHPv1k7zJ2/85F+9dtJ9JV8H
P0lAWHTYPP/4AbO115MVR5htH8l9z8dh8+wnd3aO+xF7HjPPfz8TTJ9LQLnq7+cPmt0lr5qLkddz
/aPk8ylV0c+bQ73W2xFm531PmZey3/cyyfisnfEj5b/w6/s7zZ8jdj3S+V1SIy3MuGbyJI3QSvL9
Q/d174eA5FpbReOn0stfPdh9bcD4WVNpQWsAmA5n/AAAAAAATMO1115rrrrqKnPFFVeYiy++2Jx5
5plqABMAAPqx0sTFjPnBYfP8V58wj913t9m/a2v4Zf2W+vtIdu672zzy+FPm+e91vVatrcPfetI8
dufeVtn2uzD2HDBPfqtJmFTqy9S3msc684omNX4ayRg9fcg8sG+n/U6iwITacIzZet5Os/+eR8yh
p583h0uH56VnzKH79pudfnlHbqrG+QFz6KvjgPPqGj9jvfzis+aJT6fWRPMdMtXcPfDJQ+bJb7xg
Xu4wEkb63vPmqccfMQf2tMs9YmO9zh77/LPmpcJxXG/GT52kmvuPVPvBM9ik73vvfMw8+fuljk+k
NR/XTJ6c8eP08kvm2c8/prZf9sXW8/aaA/c9Zp7IrrXVNX6sDr9gnvz0AbM3/i4le12o2vzrGTMU
zV1a0BoApkOMHwAAAACAaTnt9DPNptPOsEHKN7/5FHPsccebk998aiuACQAA/RgbP+tB33jAnOQH
VR0XPZb+DhSE1kRTmowIoZlJC1oDAAAAAADA2vP6Y443R7/+OHPU0ceaI1/3evvat6OOPkYNYgIA
QDnryPh52Tz1fv3VY3s/P+HTEQjNTRg/CC2KtJsLAAAAAAAAWACOOd6aP874ec1rjzI/9VM/a044
8SQ1kAkAAGWsH+PnxUNmpxJEX9lwt3mq/1vnEJqzMH4QWhSpNxcAAAAAAACwELinfl531DHmyCOP
Nq8+4rXW/Hn1q480xx73BnPym09Rg5oAABBy0pveXF1XjzM/8+oj1onxc/gZc/Bs/WmfbY/ykje0
iML4QWhRdNGOywAAAAAAAGBBuXD7Jeb8iy4255y/zWw55wKzecu55ozNZ5tTNp5u3vTmU82JJ73Z
nHDSyeaNJwIAQAq5Tp74preYk9+y0Zy66YxFNH6eMQeP32q2nueIvizdZ+NB8yxP+6CFFMYPQosi
7f8oA1hW5Mb6bdXfJwAAAACAReHWK1fM3itWzE2XrZjrL14x125bMVdduGKuPH/F7Dx3xVx2TsXW
FXMpAACoyDVSuLy6Xsp1U66fi2n8KMHyNpvMwa/i+qBFFcYPQosiLfgNsKyI8XPycSsAAAAAAAvF
m45dMScds2JOfP2KeePRK+YNR62Y41+3Yo47csUcK7wWAAA6qa6Xct2U6+c6NX6OMHt/lVe8oUUW
xg9CiyIt+A2wrGD8AAAAAMCiMjJ/Kk7wDCBnAgEAQB53zZTr5/ozfo7caR748uEmLUKLKowfhBZF
F1xwAQA0YPwAAAAAwCJjzR/v6R8xgCxH14FMAADQkeukXC/l2ikG+joxfo4wm87baw4+/ox56QdN
MoQWWhg/CC2KtOA3wLKC8QMAAAAAi46YPw4xgBwSyAQAAB3/einXzwU0fhBCCKHZSQt+AywrGD8A
AAAAsJ7wTSAAAChDrp8YPwghhAYtLfgNsKxg/AAAAAAAAAAMH4wfhBBCg5YW/AZYVqY1fr7yD1bM
X/7WivkH79PPAwAAAAAAAMDag/GDEEJo0NKC3wDLyjTGzx27a9Pnr55aMd/9jRVz3kY93drzw+ZL
nznK/OWDP6qcAyjktleav/yn1TpyzHA9fewDr6rKfKX5nHKupl7D3/nADyvnMtg2v8p86RLlXItm
n1R9e+629Lma0jJ/1DxXpQ/afclPmO9k+zp76vGdfM4+92CV9zM/YT6mnJs5veZsVuTmXkOZ1zkw
mjdHn/mz68zNm+vfao/rmP5rqB7jcf/Xru1duHmy6yEYdz29TjNHC/R3elX3PUzErOao+2/wouCu
C/O8HpT8vZ/03wQAsCrs/bB59LOfMu/erpyrwPhBCCE0aGnBb4BlZRrj57l/XJs+jsc/oqebJ63A
YEQdmFy8gBLMOmDjzbs2zzMNps9+PXUFnbJjFRtSfrqZGT8evcrUDQLbn1UMso3WSGrOmmB1qt8z
DQB31IXx0zD1ODQB0mbO6zW32uM6pt8aSl9j6n5EzPBaFOBMnIjWGmmuQfXxZtx775fF+zs9032/
7MzpujarOcL4SVAyb2vyNwsAsmD8IIQQWmZpwW+AZWVS4+eO3SvmT/7FivnGr51tvvH5Lebrnztp
Jk/9bDv3SHPWxleo5zqxQSrt5nPxAkowm4BNHQSNgjW3vbIdkJ5pYGL26ykXdMqdq/sf9Uv2gWvb
PAIyvcpMGQQLtieX3vjpS2peZ4cd86nWRxMgbcpQrxWrSK81lPxbpo1Ls5fm0TdlrdbXo6htds1G
xk/vucP4GTRzuq7Nao7Wj/GzypTM27r4mwWwZGD8IIQQWmZpwW+YHf/kn/wT83u/93vmU5/6lHoe
FotJjR952ufbvzb+Z+P3/uhfz+SpHzF+PnrwQ+aaKzap57Mkg2UYP4vI9AGbHsHnmQYmVtH4yZkE
QbA1wTwCMr3KzMxRlwGymnS0ZaYB4K5+r4sg2ryNn1nssdCAWOvAbq81lFkDtpzWuExqtnSgrlVl
7oNr0aRzh/EzaOZ0XZvVHGH8JCiZt3XxNwtgycD4QQghtMzSgt8wG9797ndb0+ef//N/rp5P8cUv
ftEaRu6z5I+No9hMkrokn58mRsrp25ZlYxLj547mu30042fap37E+Hn44Yctd7zrRnPKG/97NZ2K
DVJpN591QEkCVfXN/VE1WrCgCXRl0xRiAxKjspR2NcEyva46uPbcbU1Az/4+LnMUdLNlSLBinC44
H5XnzrfaMxq7Jvjm0ilBuLBfUVCws5y4HSH9AslNWZlAYdzWADfezTy0A/F1+e02dQQoS9ZQnMbS
DjrZ9ZpYg0UBr8T6CPsazZW6hzw6gjzamKfmtagPCjZfYvz9MQv2u9KO+HzIeD5G9QV7tl+QsLSu
sjkTes6bSnkZfeY1TVyf1i8vXWZvz4xgTtNtCvvff6x7raHMHkut/bp9TXla/uaaU/etXlu5sbdz
G+Rx5PJOw7jeYK8o14fWXipJM7M5U8opueZ37TVbR3vf999jDUGb43K8Oe7oW7jutXmP+xXWFecP
iMcparO6/+M0gjreHeT+Bjd1tPtaz43rX/H6iOY0LNvtp3EaOefGbTyWcRmJa4cQjVE490J+zgJs
WR17J5Gm3oNKXvW6AgC9sebO4yM+fudx0bkPm+uOu8x8yEvzob31eYwfhBBCg5YW/F5rduzYYa69
9lqza9eu4PMkSN64/NXiK1/5ijVouogNG/eUkOSXz2LwyOd77713lEY++8aPq0sMIHcsJi4D2kxi
/Ljv9tGMn2mf+vGNH+Fjv3TQXL7jBDVtC3szqd2geje5o0BCcxPtBxaUm1d78907qODq82/Mq2MP
jstp3xDHedxNfp1G2vGdz7zK3pzXecMAhTC6iW6OjT43N9n+jb0LisVpsuW4NvpjFt/AF5VTM9nY
hoyDe9q8eyhzO0bpl2DzaMGVRHpBqafVT2U8gjkdkakne86jqctvU3vteWTHqSGZpmlTMKf1Os4H
lbQxzpNbO/Zca1w62hGv4whbpozjqE6tr4V01FU2Z0p/SuYuxyznVaW5pvlz0/TVlTPezxpT9C1F
11xYmv4H67Q65l3PS+heQ834pGjGTV/f0RrR5jLoa27+6nM2nTI+dT/679lu3Dj7/dPXTNju1Lqa
fr2056w55u8Fpa5WGm2843z2s9Q3Ppa9Vmdw+8ift4994JVeOd5Ye3MZtrtJ44+ruh6i9jX98NOM
j6f7Urc52mNR/dp4tMe6AKWNYf1K3wWbLxovGcN4zIL2yLFwv4T9aNZv81nKVP+t18rfPj4+l5v7
HnM2OpeeN0syjbLuK2wb+84ZAARccOenAiOnPvbh8RM+I1No/NRPnaf+jPGDEEJo0NKC3324+ppr
zZ69t6rnJkUMGwlyf+hDHwo+T4Lkjcvvg5glPv6TODnEzHF5tPOCPH0j51NmjF+fM3+csSO/O+NH
ynEmkY+k6UPONFoW+ho/dzRP+4jB8xdfXLGGj+j//aU7RsbPNE/9xMaP4523X6umD7BBCe3mU7+J
14IcrUBYssw04U29hn4zrAXmXJvrAEN9ox/c9Ks37GF/9cBINCZKQKfVzijo4bDl9ymnQW/XBDR1
2gCMUo+lI3jRnjN9zeTPlawhPW8wpyPqcVODMdn2eWj9VueooWOcLKk06vHEWnfk2pIhCBwp49uu
b7p2aGtVn7MCuvpcMGdB/0ek+l7ILOdVITVeRdeneZHqs0fd7nyaEnqtoUy7guutR9DOzjUUrpVg
Pfn7qcnjrq0104+Fjj7nJX8n4jTJce2JWrc/Pqk9F6SJxndElLdzzgpp8uT3ZjPWUZuCcbPtSezX
7L5MXBuyey3xty5og15uyfoI0ddZvGbqz3572/m0uovWXjCvdb9cubbMJn+qrGQdRXOvkbmeZ+et
IZPG7099LFMXAJSxfb/5+GejJ3xitFe9NfnELML4QQghNGhpwe8+vPX6G+3/QXHn+z9gLr74YjVN
XxbF+BFDJn6dmhgkXeaPM33kd+1pHaHkCZ0Y/1VtklfKdm2K07o0JU/4uDIwfvobP+5pH+G/VIjh
I/p3v3GS/ezOTfrUT8r4Ea6/ZouaZ0QUbBmj3+iHN+3NzXeCPoGXzkBERzvrG+Lw5tgvM7jpT9xw
j9P7ZYZpbDmunUEgwhG2oa53PCYBPcpxdI7TBNgypT1xYKozeBG1MTlHgr6eytZQnSZeT2ogRx1L
R6oNEVq/c+VOEeQJ1tMIfe5HZPuYwbahHi+3Lus66nFplzddO7S1qs5ZCV19Lpiz0TrX6FoTKWY5
rwq2zVrbvLkcHy9c31PT1NOMnTYnZdepsJyacCx7raHEXAipcQzKKl1DthzX9ia9TdeUo61VW3a/
uS9Dn/P2uGljHafxr8X6OJagz71/DffradNrvxbMWRGZtTNGH2sfd11V8cekaWOcprU+cu1KlFHj
r8t2fn2OcvjzN6a9F6NrnFK/Vre6p5s9E+OvIVePX2bq+pA6Xjb3FaVzJpSUWTC3o/G2aZW2A0A5
Hd/fY8H4QQghtMzSgt99cMaP8NDff9Q+AaSlGwpivOS+S0fMmPjpG2f+SD73GrdUGVp+DSlD0mrn
HJKmDxg//YyfO7ynfcTk0XDGz6RP/WjGz0c+/PPm3M2vUtMHJAIDZQGl6CZ/CjoDER3trNtQGAxI
3HDb9F5QT+uXLce1M745t4RtSAYbfArKcXSO04TU7YzGpCB40RrjZFAsFTQrWUN1mu6gk6CndRSN
n9ZvdY4aCsYplSZYTyM6xiS5Fzrw8tnX1txWfbZ1p8aspB39xrpoP2h01FUyZ3PZO7OcVwXbZm1P
2XrjcewOTM8a276qT3EAdFZj3WsNZfZhahyD8gvW0Hheq7msfn6u+mz77c9HYq3OakxCSv5ON2mi
MUu3x6WvSe65BGq5wZiU7YOi8SqYsyIya2dM9/4qur417QvLSYxJrl0l/bRp2vn7r8W6fXFdWn/9
su357NqsaZVj+x2NR2YNtepU5iA5NyVz32fOhJIys2nCtSb969ovANABxg9CCCGUlxb87oNv/Dju
+Ln3qWmHgBg27qmbPkgeZ7DkjCN5Qsc9DeSe1vHz5ogNIznGEz/96GP8xE/7vPQbK+bwn/xrc/g/
/rb59r99qGX+TPLUT2z8vGPfNWo6lURgoFdAKUozCcmb8hGJm+xJggHqDXfdFy1vnGbU36BuR9TO
HkGFbDkNerumpx6fqJ3FbZc0Mja5tKm1UrKGMmPRWjMd5dk+tQNYAVq/1TlqKBmnRBp13Td1xf0d
YcvK7ZUUMo7ShuqnXUPNnIkBpLZfH/cRuTGp0NZq9z5P0FFXyZxNXHeOWc6rQqrNRdenVSRuz6zG
utcayuxDW048LvF8FKwhm0baU/20+eR89VkMoFE74zwNahumRp/zcNwm/Vsy2XpSyw3GtqzcojVU
MmclFOUpaLfWnhg1TeJamy2v4/osqP1q+pGd+5jMGlKvc9Jmqafddm19xHOtzn3Ql7A9fpmpdZNc
TyVz32fOhInXgYc9L+2VepR2A0A/PANHPS9g/CCEEFpmacHvPmjGj3Dfg4+Yy3deoebpYlFe9Rbj
ntwpNUjE4NFMGWfsCKnXxonZ4/J0PWUkaE8KuTpKwfjpZ/y4p30c3/61+jt+hG997aHgnPAHv6KX
k8MZPx/7pYPmyktPVtMkGd2kx+f0IEfrpt3enHYEH4qob6LDgEDVBu/LwOsgg9/WOIBRGAxQbrjr
sr2ba6VfdRlePjVgEAcDmjbmbtyLyqlptaEvUlcrcNWMfXy8aVd+bl3/xmOdTacFzQrWUDw/9efw
mCMZ4LG49kZj6I+Lsj70OWrQ0sek0sRj3HzOjYe/rrXzaeq+uy/BlmN2rOSzOl76GozPpwKhWjvz
c5MjX1fZnDVlTDR2CWY4ryoun99vW6e2FjN7bK5o9WpjXaXzrucl9FpDmX1oy/Hb58bVLzteL96c
hceq/TIKaI/31Kj8uBwhOWfTos95OG7tNPa89C27F7r2v057zpS924xHvuyC/arNuTb+BdRjEpYV
fsG/PtYhTZrcNa7Vvqaf2ng0aVPjVO+FXF+b9sRrQerLzn2benzG/RqtoVZf83W014eyp+N5bcZh
3Ndwbfplpq4Pub89nXPfZ86EzLVoRGeacR25NTeah+y6BADhunsl/hQaOxfc+eHxZ4wfhBBCyywt
+N2HlPEjPPSpfziR+bNIxo//tI38rqVxuCdnHPHTNmLyxAaOe/WbQzNfpjF+eOKnH32Mn6/8g/oV
bqV89h69nBxi/Bx4z83mzLf8hHo+i72h1W4+9SCHdtPugjgBPYMKNV7AwNJulwt0jAjaVxgMKG2v
F2yoiYIGrWCAELahJu5XzShfcTk1oxv9BjXwkEPpf7KMOK02Tk2asP01rfkaEc1t55yEY2jba/Mo
gZxmPHPj0mqXX5ctN2pfa468oEzMaE2WpKkI+i79qfuqtl9dK+W0AlxNeX7/4/UVtm1cVpBfSaNd
K3LBt04ydZXNmaDNSfs6k2cO85olri/V3maPRNfsWaPuabXO+LrXd5x7riFtDTRoa7r7eiV11GPf
2vdem1ye0by21qnQv+9l6HPeGre4TVV62+6Ofd9/rerrQy0n2B8N0Vx37tfifV9G3Paw3aX7K173
NX574nqeu63OUzRO6n7wzgtBG8MxlHbEc19G2C/bVtu21F7U56B0T4frUebY34v17268/DKDstS9
WBOPdTyOXefbc6at1YbRfJSkievMXTu8OelclwAgXHDnp4I41MfvPG58HuMHIYTQMksLfvchZfzc
/9Ajg/u+H/fET+opnS4046cE33zKwRM/09PH+FkNxPjRjkMCLVgEk5MK/qwhWiBp/dMEeQjwAADA
orKA/yZYj9h/x/Q26ABgXmD8IIQQGrS04HcfNOPnPQf+rpp2CJS87q3UqPGJnyYSg8gd44mf1WPR
jB/oCcbP7Jji/66eL+7/hB1O8Kn+P6AJpgEAwIKysP8mWGfw71SAmXH3PXe24lCTgPGDEEJo0NKC
333wjR95tdssnvJZpFe9xYiRMqlJ0ueJH6lDzBz5fVLjR0PK1Y5DDcbPOocb6qnxX3uyuAGe+FUs
6xgbTMP0AQCAxWN9/Jtg8Rm/4o5/owIsGhg/CCGEBi0t+N0HZ/z83fffYy6++GI1TV8W2fhxT/xo
5zT8tL7x477bR3siJzaXSp8g8o0f+Sx1uLLkmJTn6o2NK+lX/NTRMoLxAwAAAAAAADB8MH4QQggN
Wlrwuw/yhM+evbeq5yZlx44d1rDZtWtX8HkSJG9cfinxUzZiljhDxT+u4QwiMVOcueMbP854EbPG
pXN5JZ1v4vR94kfSu99948ch5bv6XD5pj9TRVc/QwfgBAAAAAAAAGD4YPwghhAYtLfgNNe7pGB/t
CZ0YZ+bEaXMGjuRxZk1swPQxfpzR4+p2n+MnfBxSrjOB3Gcpy0+zTGD8AAAAAAAAAAwfjB+EEEKD
lhb8hsnxn7YR3JM/jhLjSNL5TxWVGD/xU0I+ktdvQ0zKFFpGMH4AAAAAAAAAhg/GD0IIoUFLC37D
2uGMIt8gShk/sYHjm0UwGRg/AAAAAAAAAMMH4wchhNCgpQW/AZYVjB+YN5978Cjzl5/5CfMx5VyL
215p/vKf9kg/KH7YfOkzVd+r/j93m3Z+tWja8eCPKudgLbF76Z++ynzpEv38usPtd4e25krSTMol
P2G+U5W5tvstx/iaUDPbue91bY5ZzWt137oWfl5nBddqAADoD8YPQgihQUsLfgMsK4th/Ljg1ivN
55Tzgwt2Dg0blEvPD8ZPKRg/kGe418KSNTeHdTlng2AqYyWm4zo7CRg/i09+jrhWr1dmem0AAOgJ
xg9CCKFBSwt+AywrC/PETxOoaQUwmuPf+cAPh8dhcZil8QMLAMHERcXuJYwf5dyEYPwM89qM8QML
Dv8uAoC1BOMHIYTQoKUFvwGWlUV61ZsW1OTmeB2A8TMwCCYuKh/7wKuqvaY/Gbm+wfjpBOOnHIwf
WHD4dxEArCUYPwghhAYtLfgNsKws1nf8/Kh57p96QYxU8Ma99sUR3zxrAbLegaC6Lc/d1rSpyWtv
1qvfwyeQxmkc43qawIxygz9ZELcpz69PCx7EY6QFhkrSZHBjoeK1yaaTsoP6on6XtiVOV9EruGfX
QSp46uY8/Jyua5y+nkuXzuvbqL5o3oL+xXOqtK+onJrUvJQ/NVfXIemT/XIUzlvYJqV/rXkN67L5
o3Wu75/2nLXbVDDeWZo6UmMftDOuK1pD6nWpLr/XU452/FLrJiqrdK91EvetYH1oaSxNWdm2dKUp
mdf2fAjh+JeQW2fKOY96Lpp29Pm7kJrj4LxXlzZOrfmo0P5+5CioR7/ml+z7aC5K+mQpmdeS9VFC
u65gfxVfq9vljNtbsobGZcjn4FqtzWnHWNr8Nl9Yd9C3HvS+5vtttueqPTBKI/vBtcsry6XrbHM8
nlF7isuJ+xWtsc65j9sRMulYAwD0ZcVY7wcAAGCYaMFvgGVlsYwfF/Sqb8rTwV7/pt3dYHuBMnsT
H93YqwHWHGGQQdrync+8yguwuPqkfq/uilYbtfZ4AZvxsW60MYkJ2yc0Y+QFekrSFKP2b8woUDJq
d1OX2o9MO3rPoUKujFHQRj5LOzrm1Q/ixH1z7W/qkzSjOu14JdqQGsvCcuqx9trd5Ou3zpo+SH2j
eWjPS9kacmVF6R705l7aqOXx1kf6WtB3DddzFoxHx/rVaNct1GWP56NZH357mjkb1d/MT7gWlDZ2
otRVEbdzsjHTaOoL5qQ65pdTMK+tc9l25NIoY9aaV2WM1PHvonzMstdrdd3VZatzn1mnJfNapwnz
l/w9SZMeh6Jrfq+xz415ybyWrI8yPvdglKfZ06O6mrqDY3Earc1Nmnju83PUjEtQVrvs8vVRlxW2
u+8YuTZF9XnX/PZajPI0Y1H3W/pT/dur+vfXyFBx7XbpWm1uz4c/rq6vcR6/Tck2+nMWr7Oiua+Z
bu8BAEzHihYkAwAAGApa8BtgWVk042d0cy0mSyvgoARvhPjm295oR3njNJ2EwZM6kFUHJdpBlIhW
XakgT9y/LpTAQ4u6rlY/bX2uzSVpetDRFy3AkR7DTB8nGrOYsO+2ba6urv6XzGtF0F913dX5egV3
i8rRxq5kzcQk8gTjU7aG2sGzMuL1UbaGMuPaYPO0gm11f3P5WjTz4eeJ29NuX81U6yNDu754Hsvm
rATbh555hNSYlK3TdJqSeVXrVse/i/L50dbtmLqcoD+p/Z89VzKvepvz7esiPR9F+zXX1xYdc98x
ryXrY3KisS3Y02qbK7Rxy8+RPi5hnpL14doUzccE+0MtJ0Bfi0Fdtm2u3jp93ceov0E6R5hGHz+t
nI6+R+PlsOW7cgrm3pGfVwCA+bKiBckAAACGghb8BlhWFs/4qWhu5kc30w57U60FFKIATslNfCfh
zbp/k94K2rj2Rvh1xXmCYEEf/Lq0oEHTT78dY5oxKUkTl5tDG28PLcCRCnylAlnBuaat5XPp46+V
JqDk2iH98NvZOa+JAJZPj0CQJTWWheXYsfbHtfe6FxJzYMvqt4ZKg1t1u2Oi/VKwhupjTX5lDen1
NPTcj2GbomuQO6+Vaee4aXff9ZEjLsufL++82vfM/m2T26MhXfM6pqTMdJqSeVXnQx3/brrWmSNc
I216/V3ouDYEfR7h79d23q725emYj8792uRv2pqfg466OubVphmNSURm/lQS4z3ar+qaCvd0cp79
a0NDfo70cQnylKyPKp12PZ2EfHsrEmvR9cWOUbDW/bGL+pvYE+M2eGV65wXbX9dOrZxoHoM9HxON
dW7uHZ3jBAAwR1a0IBkAAMBQOObYNwBAw0IaP82NcisQVBIwkM8FN/HdKIGa5iY9CJDYuqKbeq2u
4JiUrfWjB015deDBC9aU9LP3WHSQCL44tABHOsikB7JibJlN/7WgTg6bV8qXcah+ymcZi3YgqGte
9YBOgDrWmXypsSwsRwtO9R2f5Bz4bStcQ9rcx9RzGfY5Xh9aOek1VNHMn8XLV9KeYlrjEbbF1qWt
Y5uvSdt3fXTg1xmsZ6Fwzrrps0fz8zqmpMx0mpJ5Vedj2jFJrDNHZ7uC+jv+LvjrzT9e0gebpp23
ZNzS9JuP3H616Ztx1Nd9R10d8zpdPz2acsP6ov2qzkeYRm2z4F8bGvJt18clyFOyPiqy19MedI51
Yi26vtgxCta6P3ZRfxN7Yjy+XpneeSG4PmrlRONWND4Fc+/oHCcAgDmyogXJAAAAhoIW/AZYVtaV
8ZO4gW7dbBfcxHejBGqam3Q/AKAGAxJ1jYIR0j4t6DMJrboSYxRQkqYHieCLQwtwpIMo6QCfxiTB
E1t3Vb78tOPWzMdoflyaznktGEd1LWTypcayqJz6c5hmEvQ5CMekbA2l59lRUlffNeQRjWdRnmLG
QUUpNx6LVF1BX/qujy5sf6XOum0zKzeie9+VzesYPX1IOk3JvKpttuM1gz2T2Lfd49SkkT5JGbn+
J+oomld1nTXj2dG+NOn50Po98RxZ+tUVz2tJ3UWocxCNf8GeLro2ZI6N0cclzFO272c1Rt3lJNrj
j1swzn76qL/qfNRpXPn6+BWUE8+jWldEj+t5fl4BAObLihYkAwAAGApa8BtgWVlfxk9zsxzcfDc3
8P4NdHzz3XzuF+ALb9b9m/QgsBEHA3J12bR929GBEoyo25evoyRNMU2fW4GcBi3AkQ4O6YEsnT5p
PWTM7HdIufplruXLo70+FM2rHtAJiNeiJZNPmU9LUTkF7SlCGVdljsvWUN2mcP6r8r0v+o7XhyvX
Xx/xetHSaLTXmdaeyRm3Iz1nwTg214D0GmraFxzrQ53/uQ9I3e2xce3Nz1kBWt+kbu9zybyOKdnL
uTQF8xqPffN5FuPRXmf+cWVt+JS2I3VtqOie12bsRuPTfJZ6J94L6fnod8135OY3c65oXgvWRwmt
67CyX0uu1UXXhpr8GtLHJbX34rJ9uuenFG2sq3bG1/ygT00/XJ5grftjF/VX2RN12V4/mnH1r6et
MVXKac9jU3dujErmviE/r47x+srNHQBAX1a0IBkAAMBQ0ILfAMvKejN+BBfEGKEEg8I0cqOeL7NN
eLPuB1LiAEkdaHDIjXyqrii40ZtxECCsr522NUZCNE4laYppgisjvD7GQSghHkO1LZZx/2bWXiXo
5ubQn7PueQ3XiEpRIEib1wbXxtKAUjwPjp5rLux7TXs9l86JC5g54jUb9V/aavvhB9iiMqSOOI2b
1wC/DIc23vo+6qYpK7kO47qUeoI5k/N1X7PrKoObk1T+me2jVt/ise6e14n3fZRGrU9JE5Rl90Sd
R1vbSYrXWU28l9rzkvu7oPWpIZqz7nkNy5I+2zw9rw0l8zHxNb+kT5ZJ5rV7fZQQt+m526L9Wnqt
brUn3Zb0GmrWTjRu6fEPy/Hz1efT67gf0fVa6VurPX4f7HXC5fHHLupvcO1s0NZza89G/Qzqa1Dn
Me5XzShN8dzXdF4bvHaHZQIATMeKFiTrZFfFR6JjKT5ZcWTFt71jffILKxV90gMAADRowW+AZWUx
jZ+hEgWIAGaJGnQaH2fdzYM6qEdQDiaHvwsAE6EZNgAA0MlKECD7XsV9FRsrxGxxyOevV7h0fYwb
KQ/jBwAA1ggt+A2wrGD8rB7a/4ULMDOa//u5ZUKkjsOURP/3OcAE8HcBYEIwfgAAJmJlFBz7vPxa
ISbNnRWPN8fEuNlT8dUKl7avcROD8QMAAKuEFvxeD5xw4skW7RzApGD8zBvvdS4E92DOqK/zITA2
W7zX72D6wGTwdwFgajB+AAAmYsUGxsTkEXPlnoofVHgBMxWMHwAAWCdowe9F5eprrjV33PFec/Dg
R83DDz9skd/l2FVXX6PmAegDxg8AAAAAAADA8Fmxr2Dra6xg/AAAwDpBC34vGmecucV88IMfHJk9
KSSNpNXKWCu+8Ju/Zb77Z39uDj3+K+p5WCwwfgAAAAAAAACGz4p9lduGiu+HgbIszrg5XCGvhZP8
Ys7IK+Hke4L8tO5pIv9Yyvh5rkLKkPTCvgqpA+MHAAAmRAt+LxKXX35Fy+C577777VM+gvwen5c8
WlmrzYE777Kmz1ee+V31/Fog7Xno4UfUcz7ffO55a1q5z9KH2LyKDS3pr+Tz08RIOYs0HjEYPwAA
AAAAAADDZ8Wct1KbN1GgLIsYN++sOLvi0xVPNz/FoLmowk9bavzIdwhJOjn3hQopU9JsrMD4AQCA
CdGC34uCPL0Tmzpi9Jxy6qZRGvldM38W4cmfP3zxj6050oVmlpTm9ekyXcSYcU8gdZk/Lp20Qz6L
wRPnk8++8ePaLPW4YzElda8lGD8AAAAAAAAAw6f6b8WYR9uBsixizkg+MWv841KOHP+Gd6zE+Hm5
4sSK671jjs9XYPwAAMCEaMHvPmzecq7Zcel8nrDRXu8m3/MTp5NjcTrJG6ebBDEqfPynYHKICePy
aOcFefJFzmtGiJgoWl2p41KWb/xIma7+UpzJ4yPHXX3O/HHGjvzujB+pP5W/DznTaDXA+AEAAAAA
AAAYPrXxI+ZMFCjLIsbN5dEx4VsVsSFUYvx8uULS+IaRD8YPAABMiBb87sP5F+wwj372cXPbO+4w
J570ZjXNJGhmjnDOOee30soxLa1mEvVBzJP4VWZiTnSZP870kd+1J2WErqdjZmX8lBopUqZm3MRI
PYL8LuVL/9y4xGldGs3YinFllLZ3XmD8LAo/bL70maPMX/5Tx6vMly7R0i0STZsf/FHlnMJtr6z7
9pmfMB/Tzi8UP2qeG82F8ErzOTUdwDTMd99/7sGqzHWx32CR+NgHXlWvx8Jre51+Ea6R8XV7Pfwd
XVyW5vph/20yr7VSr8nvfOCHlXNrw9Tz6v4t51j4NeKuC1wPABwr9vt57mkHyrKIcaPl+XZFbCSV
GD8ujTz546dzYPwAAMCEaMHvPjjjR3jg4V+2TwBp6fryvvfdpZo5t9zytlZaOaalle8AitNOS2yw
xIgREhsozvyRfGKwuN/9NDFrafxofdCQ8iWtds4hafqA8dMQ30jGlJoLQ2CuQYieZNsyZONnzOIE
NVeZRVqHq05JALnn+u9iDuOtB/his+ko89xt/vllZ8bzulrMcP2sT+Nnnc7bAjMc46djbcz1b93A
jJ9LfsJ8Z2H+ZpTueYyfdcVCrbHhsmL2rdSvWYsCZVli48YxrfHjp/HB+AEAgAnRgt998I0fx823
3q6m7cPBgwdVM0e46uprRulSTwYJBw9+NChzFoi54p546YPkceZGl+kjiPHiGyIlzMr4kbyufve0
jt/+HLFhJMd44mda6pu0pf1H/yIF3LNtWY5AG8aPcm7INEGHMFAnaz1eAzNe/3MY71aAr+lb3ObP
PUhAbMw6va6t4X5diGukXdus41mC8TMLhmX82L2+MGtiOf4NunRg/KwKK+bpFdMya7qYtfHz6xWS
Rl4V56cT5CkgjB8AAJgQLfjdB834ET5634Pm1E1nqHm6OOHEk1UjZxKkLK2OSXBP7pSaE2LEaIaI
b+poT++4NGv1xI9DynTH4vI1tCeFXD9LwfjRwPhZmIB7ti3LcdON8aOcGzDl873ejJ+mvYMI5M6T
dXpdW8P9uhDXyCW9Xs0TjJ9ZMCzjZ7HWxHL8G3TpwPhZFVZsYOx6+VHx+TpI1smsjR+XT3t93Kcq
MH4AAGBCtOB3H1LGj/DAJ395IvOnxPj54Ac/aNHO+Uxr/PhPusjvWhqHe2rFET/pIuZKbJ7IMT+P
Mz5mZfz0ITZtfKYxfnjiZ1o6jB97k17d7Dkmugkd11EHrVx5if+rf3ReCw7UZY3TVLRuRONyuvrX
rid1w123P0ofj1HPG2Nbl5/fZ9SGuk8S0AjGMG5jaVvidBWT3fjF86GNjcxzmC4VmNGDmk1epS8T
B0bc0xiOoOzxWIfjpKzHgvEO13yF196yuW8ondsMtj7J19WveHz8tmT/b//xXm+fa6PuJ5+4HRF1
Pc1+V9aBvp4qbP/T9cbzovYnng/BtaFHMKW1Prx5teeqMj/n0kj5ozEZ96t4XuM2R2NWXE7Xtdrm
z+z7onl1xNeYignWfuffBXXO6rpdu/vs19a8RmMUn09dE/WxitZ0nCZqSzEd6yNMl94/ZbTntT0f
Ukc0b6O5n2DfJ6nLmv6aPy4nnN/UNcgrR4j70jWvtgwpOzVGBbgyRu2R8tzcxP2P6vHPq+t0zGhu
R20O5z/cd0Jcl5ZG35PJvZSkXVdYxozntRDbt0Re7Vy87suv5/E4TjCvrf2sjI2aLmpP577vSdz+
Vjn5dWbHtBrn/N/g8vURnq+I2lM8Z3G/orXQVU6rHQGpuYNJWbGBse9X7JFfK46vuK9CngQSI0h+
F6PmqxUukDZr40e4t0LSSTukbuHWCkmH8QMAABOiBb/7kDJ+7r3/wam+70d71dvt+99hzjnn/FZa
OSbn4vRSRpx2GtwTP5rxUoJm/KQQA0X7/py+xo+fJoeU2WX8SHldaMZPHzB+NOqbMO2Gur4x8G84
3A1S35sC70ZvdHPSlDW66anTBDfb9oZFqb914+bT1OWnaW581GBAqw7/eDwu7frrMfLHo6SNCVJt
sbix98tW+hqn1841N4zanPeiKccfV3czOSq7Gcf2Dafez/Z45o6n124WbT1Ux8bleGPt1RkHWorm
vio3XHeJOcvOfWFdBYyCO/E+9IMGSluCvufWjz2X7kebZjy0MQno6K86fnWeXvteq0fpr7aGgzHq
mE9HPR/+vDbj0ZRT19O0pxnb79jX4NXpXN9G8xqvV+9zu81NX1t5KnLrI6rbEvfXfpayxse0Meuc
187zpSj7rmnjqB/qulb6KnTNb+H81yTqEJo2tteet2aUuoK1WEj3+mjGMEWvOZKyvT5UtOpv5kPK
HvU/Hg91nOt2q+OZxPVViPaDN46tsW+tT6+c0bH22tP2QmvOSua1GQ8hv44zuDJsudJWucZIvXHf
lHWaGf/kehi1eZyvPR7tMXP5xvU39QTrXGljAa3XbzZ1jcdwhvPaxWh8dFybtHLj9WnTSL5ROm3M
XN+idf1g3OYmXWpePdr7pKFZm/781Gm9sS7Z96W01kx9bFxO9zpz7bNpbNu0v8He+siMdT0f/rg0
9bfS5Mup25hfZ2VzX9H3egETsRIEyMRsEeNlQ4WYLcKRFWLU+K9hm4fxI4jRtLFC0osB9ckKOS6f
MX4AAGACtOB3HzTjZ8+t+9S0fbjjjveODJz77rvfnHHmFjWdj6SRtC6flKGlm4aS172VmiQ+kscv
QwwULV2O2PjJGTklSHmuXbGxpMETP/OivvFo/6Pfv6nxjk90k6DcXFX4Nyr25iq+IWluVMZtSLTJ
I3XDGd8UjVBuoGqamyS/za2+J8bOlqnc9HaRbIugtKci2a9Eeku2nnL0uqN6tboya6h/wKDvOOtr
MaTpQ9S3sL7J514dt+yczG6daXWH/ar7ru97176wPbbMYL77zklThsyLRcufWc8WZV5zY5o6l2h/
0MemrniMgrHN1e1I7QMvbz03TTnBHgjbUI9f1O6gfL3NcRuCPjTE+8x+jtdvvG60/qv9LZvXVrt7
EvfBEfRXbV+i/o75TdWnk+qjPjZh2SX7tYSy9TGiZH33Ja6raD7qz8X7Pkkz1tm1X9elj0U4H/Gc
hftKH+swTeG82roL12yKoAx/PMO+FO1771g8BiO0+Ynmumi/qvPcs+9J4nJmNa/9yOXVzsXjVpKm
/lyyXzrm1aNo/kZE5Rbt+xL8taydL2tnMD5N2+p2+G1q+hD3zV+jar+iNNXn7jmr62qNRXRtKJn7
cT6lXTBTVrQgGQAAwFDQgt998I0febXbNE/5+Fx9zbUjA0ee5tHSaPhP/kgZWpppcE/STGJQ9Hni
J2WYiLFS8sSPmDCldaWQNrinjiY1fjSkXO34IrCujJ/oJmJM4qYjS/dNm71JqdKoeDdu9Y1L+7jD
lqPd6Nmbq/YNnh48qIlvkuxn/0aquWEK2jpCLzNLpi2pm27t5q5GTx+ca9o62Q1feh0E46T1KXOj
qd6YNoR9nWQdVhTd5ObGrqF47sOxHhHPWW7uZ7jOuoMBTbAkQT1u/ti79E1+6Ye6HgsZ9TXuV/ec
xGsneS0QEuNdl1H3tYXrl21jO28wttm93GDTaGt9fE0O+hSs3fCaql8HvDSJNsf7qHt9NGlkPDTc
eGv9D9rvKJ3XqPyeJNeCPwdq+8JxDvPl5tftC6FjHaTqaI6H7Ynnw6+nTZw3SeH6GFGyvruwZWTa
XDgf6vrsvU6616Frj9bm8Vjo5QT7KjHW4d4rnNeZzYMrwx/fsC9F+97SMZZam6O5Ltmvdt5z17zg
eAeJuR2XM6t57Ucur3ZO3QsTpNEp2CMNcR01dX5tboK5jNZCzQTzqpYTYvtess5cX4Iy03tlhJ/e
KzNI05QTrP3snNXp47XqKC+noWCcYHpWtCAZAADAUNCC331wxs++d7zXnHjSm9U0k+J/h0/JEz+X
X37FKL3k1dJMi3viRzun4af1jR/5PWXu5J5+KTV+5LPgp+lDbHBJWfK5C9/4kc/SVleWHJPyXN/j
/snYTtPmWYDxk85TfvPZYG+impsdL1/JjVz7eCpw4o+N0u9Z3zBl26LfWKbHLXEjGmHzN+PYb07T
6yC4idf6lBk39cbU4Zdly0iky1E0ZwVj16ecqJ3qnOXmfobrTKtbCyp0rYXRPpO2VT/ls7QvmPuJ
aQIbwfj3nRMpI7WXKhLjnV1/DltPO28wtiVzZtug1TW+7gTtafVvPE/qmvLKSbU53sfd6yNVV0Tx
vi+YV4cts0or9Fxjts1aHf4cqO0LxznMl1lfI9w1oCYs25Gow58/7/gk+7WTwvUxorj/CZq5DMqN
x790PoJ0cn6SdvW9vqTQy2lfG9ptDPdV4bxOOw9CUIZfb9iXon1v6RhLrc3R2JbsV/1vzQT7oak7
rC8uZ1bz2o9cXu1cybV6ouu5pWCPNMR11NT5tbkJ5lLdZ5PPa26/2r6XrDPXl6DM9F4Z4a8Jr8wg
TVNOsPazc1Y2FiVzbykYJ5ieFS1IBgAAMBS04Hcf5AmfHZdeoZ6bFjF7nJFz//33m6uuvkZNJ/hP
CAklRlEX8RMuzpDRjJcYZxCJkeHMHcnnynSmhxglLp2fN/XkTKnxI+mkHD9NH6QOvw1x+Rp+uyW9
+903fhxSvuuzyydjInV01TNPlv1Vb7kbFf1GsYAoiJAqJ3lzqwUhPEY3hrbfcbllN2DFZNtSEHgI
KL9JF9LlpNHzRPVqfcqsofw6GAcOJN1k414yZyVjV1KOnkYdt+zcz26daXWHY162bmyeKo38tPMo
7a8+2/I78nZT9zcsp6xdo/qb9mhpLKnxzs5Dg7p+m/aNxjb+rJDaB14bgrkJ0odrQl1TNr3rS2IN
RW3oXh9de7RBG8fcuPVZMyVzFJFqc9BftX2Jcevdhlw/U/tbP27b3HO/dlO2PkZMMAc+6nzEdfWY
j+J9n6RkHFPz5KOX073OmnyjvVc4r1POgyUow+9j2IaifW/paLvW5mhMSvZrbg3l5yhCHcN4rmc1
r/0Iyi84F49JSZqZzatHyfyNj0fl9tj3ebrzlLQzSBO0Lb1XRti1peWN04zXX/eclc1DydxbUu2C
mbKiBckAAACGghb8XiT8p3iEgwc/avbuvdVcf/2NlvfddVdwXpA8Wll9EXNCDAsf7QmdGDExtLQ5
80Ty+KaJM0ViJE2X8aMZLX2JDZhc2x3OwHH1u/67z/ETPg4p1++vfJ7GtJqG9WX8NDcOwQ3xpDex
JTdtdZq+ZbduZJqbmOCmyN5YJW5s1Jt+j+bG7UtSj3KjVdc/o5umpu36OOk3e/qNtFB2c1jTJ61H
M65+e+vx8MZTG9/MjaZ6Y+rhxjs7Zx2oc1a1c/y5bDy6575dTr2nKuI5y859SV1lFAUDlHltIWk+
86qqzS6f7F/50uOufR7S+lLtiro97eP12KXXhqVpe+dYaevS0sxZtp4mzWgcXR7/WIVrS2vPunq1
uprrYJMnmJtg34TX1Pa8huWM0gR9jvuhlaOsj5JrtTa+iX1fNK8e7fYU0NQdzEUzP+P2hGM66mdw
rKFjv7aJyy47F49N/Tkar6Yf5W3RKVkfI5L7p5A4v5ufitF8qOslMVbNGAT5e9H0NdqrMfXay9Wh
lxPuq3hcm8/Sfn+sS+Z12nkQgjL88Y370uyH3L5vyO5prc3xXJfs13gPemuo115orbOmn0E5M5zX
HoTlh8TXQbc2W9eLKH/Z9bxq+4PterPz6pG8Ritruk7bvhaEeyyx7ztwYxKUVbWhzzoL+hK0LbdX
xmlba0gbey9f0Zwp4xhTNvdCuw0qbqymvd4sKStakAwAAGAoaMHvRUOe3vFf+5ZC0sziSZ9pEAPD
GTiCGBhiejhiMyjGPVWUSpcyfnzzRH7X0vRB2uCXUWL8SHq/7z6S1x+HmJQptNqsN+NHcDdOI7pu
DlRKb9qaG5CA9g1heF65uWyVE9+oaPU0tPrnbtbSNzutMVLLKaS5oRsxunFTbiwr4ps7tS2Wcftn
2t7WnETzYfsTjV1w8zz+HLSnob1mmrmbtL2OeJyD8vSx1ugcy7hv1TmbJ7ohtyTnvmYW81YcDIjb
Ivj5XL+8+uugUPpaouP2l4+2p/W07bqaNNr4Fu97rU1xXWFZck6f13adcZvduDn8NR/MTbBv6nJd
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
AABJRU5ErkJggg=='/></p>
<h5 id="复用样式"><a href="#复用样式" class="headerlink" title="复用样式"></a>复用样式</h5><div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledExtend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 第一个按钮的样式</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">        width:100px;</span></span><br><span class="line"><span class="string">        height:100px;</span></span><br><span class="line"><span class="string">        background-color:red;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="comment">// 复用第一个按钮的样式 并修改背景颜色</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledButton2</span> = <span class="title function_">styled</span>(<span class="title class_">StyledButton</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    background-color:yellow;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="comment">// 复用第一个按钮的样式 并修改背景颜色</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledButton3</span> = <span class="title function_">styled</span>(<span class="title class_">StyledButton</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    background-color:blue;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>StyledExtend<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledButton</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledButton2</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledButton2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledButton3</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledButton3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h6 id="效果如下：-2"><a href="#效果如下：-2" class="headerlink" title="效果如下："></a>效果如下：</h6><p><img src='data:img/jpg;base64,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
jonDFtNNfMl2AbPvU1t3SJ+VfD9hnNWTHSEZlMHbLbY91w/taR1qPBrp1irXVfeJjJ3stYDI2Nv3
4dfag9fl5thvm9i2uJcDro4W64trcrKmJHbTa6p+HYjqZOYs91E9PkIdsocG21tbfzJ/xupX0f9A
srEQ+0CdX2rntF3Jv7wviEoc5MYIx9P5SH/E4/SRbbMY46PDEt81XB+FORv9ocbn4DipxyHPR5vz
whZ6P8m+ytg63XtGv07mB+4jtm+6FtO+d1Rsqc1Z+NqyX53fS9e85HiFjG8X/Uzl12GU2mrn1L0w
oo6OYY8E5Bge317zTeJLEQueEX5V+0lxa7fEGa8l6TO/Vzri+lGfSZ3QTxL7RZ/5+jJWGXs/AYOd
AKgBYWtLkCJHexDMHOnz9iWYPd7nKGnRkvtDoCe0LnjNpeq5Zcg9rUW/sfUbH3168//40P+p49uf
7QtbxBRPbZE4FItYLEiR8BTXk7BYRG1ZdIqFLW7PXxdoFcqGAGFrOBC28m3sN9cBd5MYbuaidpYb
1f7xXGIoto2y7qlvCItz0W+c83bL3GgLXPtgx2E+zcdBkqTQ1lSwm3rjzcR9uT4y9UqYfGaw3ZB+
xDxVn5V8P2GcaWNrSZNaLHT7jObW/qX3NL/E96MJiZvE/kN9Qn3k9lJLxt7F+GPcOP22iW0tPnNz
0MZaXHeS+fTWt/CTGlNRP7k5y31cj4/cWALzvjf4lXF9tnWJgTHm5qyNEftAnV9q57RdIb46+Brg
SftmMmPE/ouOj9mvVYzx0WFef4bgy6RfaX+rP5J6dH7MvIZeX3Lo/fSvDf05pvvK6Ndl/UAkfcTj
pmsx7XtHxZbanIVtLftV/6wZsR/C2Ol4sp+p/DqMUlvtnOVaPep67jDskYAcw+Pba75JfKnus/F+
Le1Xt3ZLnPFakj7ze6Ujjomoz6RO6CeJ/aLPbLaw+N5hsBMANSBsbQlS5GgPgpkjfd6+BLPH+xwl
LVpyf6856fkn9J7WYr756Z3m/DOemdT/6j//HrUuPbX18lOfk9QdA4tPjFYnhuvLp6hKX2FIbQh+
P/SJLRKn4v4ICFvD2favIizdiOk3wgZEkiTXT/bmXUuyRHQ3vm7dsl/bDaaZ4lwMiZUEexKCyPeT
R28jxtXWVIihchwsEiNUb5zdLT6z2M7Sj15HtVvR99PFmTZ2anNb3Lg2bR366/xI82/fu/4rbev4
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
w3xeZtd/FZ+3+fPouu8Zs97KuVrGLLv+m/jaW1XmReX7m8esaX7cbD7+XWrXnBjbvbhNg6b7fvx6
WCyfpH0TPEumPur3nbYdrmvrXFjs8+z4LyM6f+1Zm5ptU5lTm4XHWRiDyjZN92s5F3oN83OmbeyH
PiuuLWvDcJz4fl0ej3Aehdc3Kfprks25+LnZMj9K4T5l+8av0zY1zbPF65yk4zpe19hf2bjU5nHt
+3fe9536vd8yB+vbzOdZPI7A45W/jjD/tX9pgaorEP3w05e7X0PYPbuKwlZ/nOu/l1UrbN1++qpX
/Pta2bmz4ytsiYiIbE60uA9ntaWwlf601lTY+qf/83c9/fY//8WnX/vZ330tbHV+6kfiY6ypFbY6
/5c/838K97mpLMRctCyY9dt0iwKRLS/h1UWHSWUR56JvU9/O/OU/a2t6/MoiSrp9tniW6o8zXX+8
2JD123iusH+u19twnMlqP7UYzze2o7qY1LDYlLexPkadcu5MWuZQOB5Ni2GFpbEvxizfprII1TIe
S9tk8ymV3pcb5seS/rrGdvTnzft3Pm7xeZs/j677njHrrZyrYcyG+Xc5RmRLP2Yq8yLt6+T7m8es
aX7cbD7+nbK+jMZkac4nojFJ+7Lpvo/Gfpzf07Fuxxnn0dS2ft+xf8M5tG6xzyvz4JGi80fP2n67
y/Xl0m2mvhls7YerytinYxm3ZTRu03S/hmNWuSeXNI591K+Z8Thhm7M+yfv6qpxHi+0arnN2jNGw
T/ycWL2OQDp+V0H78vk4XGc2Fq1/LlT6cjhW/udBdj21Z0/t+4t9nGocs17LHFzapvisb2PQduDx
sl9HOBaerj/BlReo+sLTVIxKf0KrP0b6KwRrha3cUMhK9pt+Yqv6k1vT11sobImIyEkTLe7DWW0p
bP2VN3lRKzJ9/ps/+87Tt31LfJwlUWHrR374rz798c/978Ltc/HCRydfoBiUCyLRNnepLTpcBQsk
o75NfRsaFzsqCxm341QWcTr9cabrz883yfqkadGk4TiT1X7apj/HpX2dWd+2tH3Wr/XFsnLuTFrm
UDgeTX1bqOyzPmaVRaiW8VjaJptPqfS+3DA/Ft2O2Y3FR+91X3fnrt1b8XmbP4+u+54x662cq2HM
avPveSrzom/PfMw3j1nT/LjZPieeqW/f5Zyd9LxLc36Dpvu+MqfSvrg92y/9dvnvh5ev+zFL+/fO
ubnY55V58EjR+cu53m9TtGPpfhi2H8yfCyvCsc/v38U+GzXdr+GYVe7JJY1jv9qmpuOMfVEcJ+yT
xeO1XGf8nGjq20LfvrV7sZOOf/95cZ5ofpTHGb/Oz5debz6fsuupPXtq31/s48mGMeu1j01tm/TY
/fWVfQ+8kKTwk/06wc5SgWoqNpXFsE5bYWtWSBvPX/4k17xdWyhsiYjISRMt7sNZbSls/ZOfvBWu
Ov/yZ9/pf1rrt3/jF55+/R9/nH3WueentsrC1v/9gz8TbheLFz460Ut7uSByzwJJqGFxIV5ESBc4
Ghc7KudKF25q15W3IT9fvE3LAkfLcUa1xZlnCs+1YcGnu76uz5aus9anLXOo3hdr7SuE11T0f7hN
ZRxbxmNpm1ofZ/tsmB+LhuN89F7336G/u2MMBa6gDZXzNn8eXXfTnIqsnKtlzFrGarPKvFiaZ1vG
rGl+3GyfEw9Stufucc413feVc/X7TvOl26c7zuW//Vh1+1y+7gpct+O3PKvnFvu8b9uj51wuOn/+
TI3vnbufu2vCuZn3bcu5a3M8E479PePYts96u1uOE28T9vXifbT2fO4snGut/wth+8p7sTe0qztn
11+zvojGtbzO1TmUX3s2LrV5U51PDx6z3v3HvLo+O7prjdoNvJTp1wh+f/ZrCDtLPyk1fvaDYzFq
Qb3AVRbA4iJU/usRt1LYEhGRkyZa3Iez2lLY+p2fywtXv/7T7zz91td/sfervzQvbHW/tjA6zpKp
sPU3/tsfffqeP/XN4TZ1w8t1tHASvbTPF3aG/TcvfgWGxZb8Bf7N+5+9fT0uoqQLAUN7pn0aFzuC
xaL8OLdtskWj8fy3/eKFpbLfhmPHfTxoO05vbNfygslW8fmvYzv7fm66vnjR6CYbj0zDHCr7fvw6
7tfxeNFnLWM/7n/r49vxZv3eMh6L24x9H91T137fMD9WdPt8/MHleqdjdf3Y/aP74djV5sXNcM9G
Y3qR3nPT94L+b7V4rvC45ThGff1c5Tkm47mu4zOdO/1ei6jN5fy4uWdOPEJ0bw/jlY9/9jxv0XLf
R2Nf7tdvc5nn1wXioV+ze+EifFZfjpV9XVjs8/G8m655o+j85XiU20zXuXwvjHNv4f4PBff9MBeC
Obw4V6O5X2i679u0jH00z0vhcTLzfh36J+qP+r3eG+f50rWWfX8918p1zJT31Ph19r3RbX4Fcz+Y
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
Y7ugP1+339p1lf2TtmXxpzVu9/r8s7nwfkqV7SgM5xnv92AexPPpor/++nnLcQmvpxyPztSGDYtF
s/mRjGv/2eWYH07bdMe/9sntuprHtWxz0WfNx1l7Vvf7L9z3TeM6KZ8xF3fM/dU/F8IxG849tXvL
/Tob16KPys9rz8S4r4o5XW5TtKXZyvzIt6vfP23m4zofj+4cxbhdx/6O+75qONbzn/m34+TjW3sG
JcfplNeyNq79Mbpj1/qowXSMa3u6401jU15/cZ7083Ce3lzH9trmfPzz+65TnivaJr4nq/dS1fxc
+TEePK6N+mur7Bt9Vs779ud52Y93jOvsfg76JtyuaM/qfb9R2f7ZcZbnWd+nl35e/jO4fX7kn18U
7Wkes/K6irmwdpxZOzK1sYOYwpaIiBw60eI+nNXeClvDi0/6QjW9AG596UleZK8vX+Oxri91wzbZ
YkL/Qhacf/ZimhrPlW4zvtiFix2zc6TfL/tlfv6hj9L+aGljRa0tvanv02MH11puH302vhBHY77J
eJy0X6eX5euxx36cv1DH1znvz6Xv1+fuomg+XL53O07S18k5y4WkprG/HDefd5UxWxz7xnM1uC5e
lfdhuigStCW79qX5039Wv465sT+iPsmsXG/Yf8M+m+776DzB9UZzOOujlfGcDOORjuvYH+NxhvOM
7Rn79uP+1zQO203Xdh3Xcr4mX8/bPF7rbJ+LpflRnLtXXm//dXes2/eiPlsd19XPWwX33djG63WE
8zq41s7a+DaO/6Byjs7YxvncS+ZMcK5sLjZanx9jH9ZsGqPu2Mk1XMzOP45Hd+zr9Zf9Efbz0O6w
P6uma+0U90PSj7O+n83P5DjX783nXnQvzMasZVzH/ugsz+MF0zH643Zt7Z4x3XnLawvm6UL/V+fD
tc23/eb9Me+zab/b+cfzZPM8aGOD2a+HHc9168MHjuuaa//EpjZFxy3nZ79Nt991u6jPpmsr5vWb
ss3jdrVxTczvk9E4N9PxGbZN+rrlvm81mzPD927HWZ9nU/v6bfq2RX8GJ/Njoa+H8Uj7ZTz/bJvl
4wxtXJ5nbWN/sfV5AQGFLREROXSixX04q30VttKXtuT7d70EBS+PF+mLWP/yWL5wjS9itzZU2pSo
vVCXL31XwQviYHwJTNs8u/ZK3/XHDF7q11Tb0gnac1G9rsr2vcXztIvPXZw3OtfCHNq+ILK1n+O5
mBuvobi2/Hz3j33Yb4tj8rh5Fp07v67h2uP7fmpf3p7+mNl4bx2T8RjduPSi/Rfmcy8Y16U+rX1W
aX92jeO5yj7K+nbp3JPafZDsO4zNeJzsHsjbMPRf0e7s+HGbyzZk1zAq77P+63L+lvMmuv7wetvG
ddbujcprmGTXG7avcv6V8a2dL1a7xrhv8mO33K8t2ubHVcv83qo8V9N4DF833/dVY18vzv3hXHFf
5ONRjll+X8V9nW/TOK79uRvnbE12jLQ/82tpuu+T75V9cBWNTzHWTfdrOM4br72qPM6jxnWbpX2j
z8p+a9lm+LrlflkZ10TT+F0Vx22671ukczn6vK2dWf+MbRvakbZpvIby2tI5Gl5Xsc3l6/UxG841
64vi2dAy9rf9gnbBBgpbIiJy6ESL+3BWuypsFS9JN5WXqkXrL6X9S9hlm1DyYjq8mM2/P+mPE73I
9i+P8xfYeHFkUL4E9l+nL4rjC2HW1qv4mIsW2lJbVIheXgfx9tlnY1vve6Gtz4Osn6JrWniRDl+8
R/m13jMPL5pe4pf6btQ89nlfX5VjtjT2D5xn64sd42JQxdBvad9P24/7d9cRzsdG12str2t9TMq5
U30WdCr9PRxjuNaZ6br6Ns73zfp28V4e9dtEc/32TM6uKZu7+TM1fg4k21TaXN5H6/Nj3Kbrj8jU
39H1Z+2ftI5rcfyNqnMhHYOwfXk/5/stje90X3RW5kHtHOP38/aU45GeZ67ct6pxfly1zO81/TEW
2tw4HuH83DxP1ufh1J6ozbe+iI+T3VeVvs7vvcZxfdg4TMdI+ze/lqb7vrfSl1Gbi7FuuV/7cV96
5mXfX1EZ29txHjWu2yztG30W3gt3bBNruEdG5TkGw/7R2GRjWcyFwR3jGh4n1197yzybriU7Zv1e
uUq3T46ZbTMeJ5v7i2M2bF/O1Un7cUYN/QRrFLZEROTQiRb34awUtur7tL9cj/qXxPFlLtmv5UV1
/v3awlDaN8F1P/qFcLEt8Ytzvd8qL9qFfv+xH7eNaX0eZIsU0TUt9Fv44j1Jj9Ufo7LdkqYxa+i7
Lccp2hmO2dLYP3CeReeOFk3W5sL1Puvadvlv93XXvmzs7zYu3GT9v3VMumPU7qWLSn8vzr9Jf575
vlnftoxZ34boXLfnTtae2fXdximcU8lxam0u7+P1+VE7V6H5vm8Y10l/zMu2nY1zrG9zdI50DML2
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
Pc6F7PrH/ivn4/q55vO42+ej94bvX/srnM/DteXnjL5Xepn5NhOOeXG94XU1PJvvuoZ4n+33Ytu5
o7Gv3TOLmu6d9T5rOveG8Vic2+FxcmF7xmtdHvtC2D/jGJXt69vVnbO7pnlfrI9ZwxzKrj3tu9q8
WZhPDWO/1I/RfvfPg5u+n7r2dtut3AewxfRrBL8/+zWEnaWflBo/+8GxGLWgXuAqC2BxESr/9Yhb
KWyJiMhJEy3uw1ltKWz9zs/lhatf/+l3nn7r67/Y+9Vfmhe2ul9bGB1nSVfY+us/+teevudPfXP4
+bLhhTd68WxbEBn2ry4sbNCfr3iJzf5x6v4lN19sGNoz7ZO/mFdf8oOX7fw4t22yl+Xx/Lf94oWA
st+GYy8tCrQdpze2a9OCS+YyXrOxGs8/+/44tisLBtP1LS1AdLLxyDTMobLvx6/Dfk3HOv1+TWX7
2ZwIjW3vLPbTsF00bs3z49o/49fdOYM+u45H8Nl8Ts3HuByn6/GCsRvu2WhMbxa3Gcexfk9P2xTj
sLLQFt47LfrjTv/Ifve9oa+7r+PxrY9rb/F+3XDfN5mPZSo6bjnW0Xg81+wck/FcTff0kqZn9Whl
3rycYJ5E7e62q4xfTe1+Tc+1Pqcq7Xvz2f77+Rjl9+Lsfp2+1zCHF58NjxKOeXG9s23GeyndJhT0
26rgvh/Pnx2n5V5s2Kbpvm80jFc51snf0Zr6Y+zbpfmxYTyi+Xcz/Vm5cK1l349fr499aTzX9bqm
c6ffm9yuJ3pet4xZuc3weXfMcZvsXk3HJf5zp/79werYl8+GpB+j523THAyeN/PP6+cY3Pq6vg0U
xl9H2Mt+8qqhsBV+1vYTW+W/79WZ/XrC8ae11o5Vp7AlIiInTbS4D2e1pbD1j742/IrBVl/7Unyc
JV1h61v/0O8KP1s3vPRFL3ztCyLJS/rVwsvogtvL+WC2sJC8LA/StuQv5llb0xfk2THK40zK6yqv
KV4IqPdbeqx0v/bj9JKX+V60zZLo+iuLGcv9PRn7KTpG2NeDfGzX51DWh/011+buQnsazpMaFnNu
ooWuoV3xMcr9b/J+XJ4fnbzd3TX3+wRjfz1n8Fl0nvk1jfNx2qZrRz/norEvtr2Yj8fKNmtzLFrc
GveJnluLn60a+znpu6nP0n5qHdde9X7deN+3WOjL6LjDtUX9nR5jvt+qxvs+m4/9OWr39Jryvq7c
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
Yz9ZHlcAnkNhS0REDp1ocR/O6vUVti7GxYrrYsGkXzSIFkyKBaqWRYpV+WJEuggxW5Sa2ltIz1Xu
ky2GbJGeK1oUGa8zbcfN2Cct25THXRL1dyJawKkt7NUW6rLPxra2j2UqnSvjgtnUju460naujmtl
gS61YaGrV+vLxuP0fZ326+Z536mMQX+sbXOodfFuaHepuF8a5tDwvXH/YA7F5xltvB/zNhXPoOnz
6Jj9GI/t3jo/lpTHSscr+Ty89oX7d27pHs2tjetNyzHr27SMazgeYf+vW5tnk3yOzG36c2Hl2ZBd
81V6v873XWvfspXxWL1fx/3Hti6Pwcq5Vsa13+baJ4WF8QtV+vt6v4ZzKr+nq+OcPhtGy2MU90u2
T8v8uGwXPU/vsdzei8pcnK6l76Nsrqd9V1xv5Z64tSE5ZvJ5p7/eqZ3RcYpxzO75UtHXS2M/We0n
AO6msCUiIodOtLgPZ/UqC1vjQsBsoatlQaT7umGRYl2wEDUuQmQLQP25ikWL6FzZ97pjR9exwXi8
YWElWYxquc7NfbGisrg0iRZw6oto8UJdqT/meP3RotWSft/u+F0/XP7bfd31xXyha21c4wWrTNjX
C/vV+rLxONHi29b+qY5B2rbGORSNfWkYy/yay/kRHac+hy7G8esl+7W0p9msP/K29OeK5nG/37jt
1vmxIj1nNp87jWO2bss9ujyuNy3HrG/TMq7heDy3TyrzbLLaruz8K38upPMt/X7LNfTbzPdt6be6
beOxdL/224/9GM/7lXOtjOvzrjMxHjc/X3G/huORbxO2uZM+G0bLbY/7JdunZX5cLD5PN1jt68pc
nK6l76Nsrqd9V1xv5Z649W9yzOTzTvZ8jI5T9FtT/zSM/WS1nwC4m8KWiIgcOtHiPpzVrgpblQWC
2WJCwyLFumAhalyESBc4wsWOyrmuiy1d+6JFrXvMzlXpo0zLNhtUFpcm0QJOfZGovoAZuWdxqD/3
5fjdf/t+G8fjOj7TNqvj2tCP4VxY2K/Wl03HGb7Ot7lHPAZ5n7TNofo4T1rOtXUOJYr+bNqn2W3R
tDtu2Re1c2XXsnV+rOmvtzvn0LaHHbewft+1jetNvH2uvk3LuIZt7vvrAfdM5b5d76dxm+6aumMs
XX/lHE3jGs6zsT9X2ldXH4/ouu8eo962c5Xj2nLuJuEYFP3fcE83PRsWvncT90u+T9t9/6g+Wj9O
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
ETl0osV9OKu9FbaGF5/0hWp6Adz60pO8yF5fvsZjXV/qhm2yxYT+hSw4/+zFNDWeK91mfLELFztm
50i/X/bL/PxDH6X90dLGilpbelPfp8cOrrXcPvpsfCGOxnyT8Thpv04vy9djj/04f6GOr3Pen0vf
r8/dRdF8uHzvdpykr5NzlgtJTWN/OW4+7ypjtjj2jedqcF28Ku/DdFEkaEt27Uvzp/+sfh1zY39E
fZJZud6w/4Z9Nt330XmC643mcNZHK+M5GcYjHdexP8bjDOcZ2zP27cf9r2kctpuu7Tqu5XxNvp63
ebzW2T4XS/OjOHevvN7+6+5Yt+9FfbY6rquftwruu7GN1+sI53VwrZ218W0c/0HlHJ2xjfO5l8yZ
4FzZXGy0Pj/GPqzZNEbdsZNruJidfxyP7tjX6y/7I+znod1hf1ZN19op7oekH2d9P5ufyXGu35vP
vehemI1Zy7iO/dFZnscLpmP0x+3a2j1juvOW1xbM04X+r86Ha5tv+837Y95n036384/nyeZ50MYG
s18PO57r1ocPHNc11/6JTW2KjlvOz36bbr/rdlGfTddWzOs3ZZvH7WrjmpjfJ6NxbqbjM2yb9HXL
fd9qNmeG792Osz7Ppvb12/Rti/4MTubHQl8P45H2y3j+2TbLxxnauDzP2sb+YuvzAgIKWyIicuhE
i/twVvsqbKUvbcn373oJCl4eL9IXsf7lsXzhGl/Ebm2otClRe6EuX/qughfEwfgSmLZ5du2VvuuP
GbzUr6m2pRO056J6XZXte4vnaRefuzhvdK6FObR9QWRrP8dzMTdeQ3Ft+fnuH/uw3xbH5HHzLDp3
fl3Dtcf3/dS+vD39MbPx3jom4zG6celF+y/M514wrkt9Wvus0v7sGsdzlX2U9e3SuSe1+yDZdxib
8TjZPZC3Yei/ot3Z8eM2l23IrmFU3mf91+X8LedNdP3h9baN66zdG5XXMMmuN2xf5fwr41s7X6x2
jXHf5MduuV9btM2Pq5b5vVV5rqbxGL5uvu+rxr5enPvDueK+yMejHLP8vor7Ot+mcVz7czfO2Zrs
GGl/5tfSdN8n3yv74Coan2Ksm+7XcJw3XntVeZxHjes2S/tGn5X91rLN8HXL/bIyromm8bsqjtt0
37dI53L0eVs7s/4Z2za0I23TeA3ltaVzNLyuYpvL1+tjNpxr1hfFs6Fl7G/7Be2CDRS2RETk0IkW
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
Z9fC/doyHtE2g/T68r7pj9Gft+iDtfu10dr8uIrGd6P8+rtjDeNTjn0+X/J5f7N037cY9294ns76
qHPdLz7O/L7K52J3jf1xy/avjesDxiE/Rtq/0bWU91AnOn8+bzvXcYzavDDWi+fJ+qe7J4bzhvfr
gnJMP3qvPM6Dx7XR/Pipoo+7tvX9cXs2RPsP11o+Q8vxqs2pcrtkzMJn9SAbj9l2RVs23fcNsjly
UYzh2jzL+itrW9qmeb908msY5M+9+TU1j1l5XZ1kv/axv1gbk871fLW5wZkpbImIyKETLe7DWb3O
whbsybCYEC0YwLTAdNcC2I4tL4DC0Z3zvgdeg7GwNSuawTkobImIyKETLe7DWSlswXNYPGDZWQs8
ClucmfkPfHL83ZRzU9gSEZFDJ1rch7NS2II7pL8mxcIBM8mvEjrp4raFfc7HfQ+8BgpbnJvCloiI
HDrR4j6clcIWAAAAsHcKWyIicuhEi/twVgpbAAAAwN4pbImIyKETLe7DWSlsAQAAAHunsCUiIodO
tLgPZ6WwBQAAAOydwpaIiBw60eI+nFVX2PoL3/sOAAAAwG4pbImIyKETLe7DWfmJLQAAAGDvFLZE
ROTQiRb34awUtgAAAIC9U9gSEZFDJ1rch7NS2AIAAAD2TmFLREQOnWhxH85KYQsAAADYO4UtERE5
dKLFfTgrhS0AAABg7xS2RETk0IkW9+GsFLYAAACAvVPYEhGRQyda3Iezem5h62tfeufp63/3nacP
vif+HAAAAOClKWyJiMihEy3uw1k9p7D1bd/yztNv/b13nv7dP3jn6Zd/Mt4GAAAA4KUpbImIyKET
Le7DWT2nsPVTPzIUtTq/83PvPP3An423ew0+fPMNT1/94DNPb4LPoM2nnz764mUeXX326cNwuzt8
7jNPH1+O+dF7wWejfg6/+XT42dvw5v13k2v/hqeP3/9UuN097rk/D31P9/PhgfOrwXV875pjn3r6
0gf37rvdJzP20/3/7tOXPhd9Xmi4p59v7PfxnuxsOt/YxqEvp2M1Xt8LOPI9Pd1f/XMz6/d4+9Bb
mVNbvN37nnsMz61H/Hm9m/vzvc8Oz8MXbWvL3wfL5/Mn92yFI/r2H/rq00987aeefuKj+VqGwpaI
iBw60eI+nNW9ha3up7V+42feefr1n755xE9t/ZFv+kz4/arpBbZmXHA59CL4XvVj94AX/XIOROP8
4AXBYZHy7RW2nnu+x87/xy2UTe5p32OvqWWB9u0u4vbX9xaLW6uFrcX79cF9s3I/fDLP89dX2Hp+
P4zXlP45+ZoLW+OzfvbsGfv64fdm+PeLO/tnPNYwH8Z+3zp2b2FObaOw9Ugv81x73J/Xn8xz9w7T
ffuW2tr097PFPz/hwT7/w33B58ufDz77xm98+uKPD8WgqTCUb/edT1/uikVf++Gn78/264z7Xj7/
yg99Y/j9qx//wtO3Z/uOxrZN8uNso7AlIiKnTbS4D2d1b2Gr+2mtrpj1W1//xad/9fVfePrVX/q4
/6mtN98Rb9/qT/7x3/P03d/xB8LP1g0v8NGiz25eyM/kAS/6w4JCcYxu8a9caHvwguBbLWw9oJ8e
O/8ft1A2uad9j72m11fYenWLxovz8AyFrY1evAhR//Ou3VhgGcet79e3WEwttYzr0MZ0Ho5z7yXa
Hcz5u/uoP9Y0Xnm/N3vxObXVK3tG7dzLPNce9+f1y7Rv/xS2eH3G4lRQ8Pnm977w9JXLZ10xKywM
XQtPQWErKUotF6TGQldZ3Or3/+rTF6c/w8a2PKe4VaOwJSIih060uA9ndU9hq/tprd/82aGwNaUr
cHW/kvDn/1a8T6uusPVjP/ZjT1/4i9/39K1/6HeF29TVF/q8kL9Cz37R37CottvC1mMWpR47/x+3
UDa5p32PvaaWufQJLOK+poVsha1tXnrsHnL8vMDy8OfaRm3jmrc5Lxg9WDTn7+33rJ133i+v6XnQ
+wSeiQf2Ms+1x/15vYvn7idAYYvX6Ps/iotTQzFr+H63zVd+6AtPX062+/6Pvvr0xc93Bady36FY
9pUf+s6+aLVajCqLWNf98/3S9qTffy6FLREROXSixX04q3sKW3/jLw3/rlZU2PrXf/+dp+/7E/F+
LabCVuev/+hfe/q+7/6WcLvY8AIfLfr0L+Td4su4uDSIXkTHhZrrNs94Ec3OFS0sjAt0V+m5hnZ8
/P6nr+3p9h9eoC9fTwtJ/UJXt1/R7tlCU3ldZT9N50vO0Qv6qLiu/Fzrx+nHIt0/tWnRZLymhX3y
NpSmNhULpYnaQs7yQkbZ19Ecmo9HZzZ3+76unacTHOfa3nJ+5ab5OFxL0MbqIurKQtni/Khs09m4
YBbf0/l1ROOXjd14jVk7Ev21t2xzPf7SPX1xHc98u2pfXtTm4LLh+POx69zu0e7r8h4p29J2v96O
mR1vY7vLtuRu90E89sF9Uo7d5n7slGNaux8b7+lV8+OEx6jen483H5eWZ1qtn+pa7une+PlH741j
kz5jrmOen3+6hmF+T/fHbWy7fpzm+vUe6M9TnL8//vS94Pyj++7bFddz531d3rPRHJpv0zquS4bz
zO77e+/FlW2a50er7DhlH01zpOyn8trKvo7aszQetzkYKcdtmqOT6P4vt+lE47+q6J/eOCZDnwTX
Oo7h1K7mMZudK+nn/rPL19dtus+mfkuOVR4juC+vim3n/TMfl9qzduiLYM6n+vOV1z3Oi+BeaDom
LBl/uir/NYO3X0PYfT0Utr6x/2+/XfcTVN1PWfU/SZUWpdIC1HCMtsJWUrAKjpn+CsP41ybGrj9p
NoraorAlIiKHTrS4D2e1tbD1R7/pnadf+zu3wtZ/+Pf/pr+v/tkvf63/3nN/aistbE1+4Itvnv6z
//Q/CrfP3RYiys+uL/rXF8johXLYP3vBDV9G100LIWlb3rz/2dtxxpf/9Fz5PreFkO7r/rMP3h1+
xV7apmQh6Hqs2bHHF/T0JX98qb9tkyy8XLeb7zd/2R73u27TdpzenX2bGa+jU1t06BWLLaV4EaE+
n+LtOy1zKOiPSvv6eRsserR+PlneLmjzxTDnon3i7Tvr82PaJh/31utIze/p+XGi48ZjN2/n3Mo2
q/f0xXW+3q4/6o9Mv08015bUx2j6bD6vl/a5WLxfN9z3LVbu1/nYj+dPxzpo7z3zLBXPnU5wrSvX
EAuOM86ZYVySfo4849qqFsd9MrY7O//lexvHvuWenm0bjcfY99d+nN2bY3vH6+qO9XH35+vl82yM
Z9c+n2fxnBiOv23sG0zXlR57nB/puT58U4xXsE3buK6J7vvxe7M5nJ9rNq4N21zH/Pq94L5vNHs2
999L/o52nSPB+a7XNmyTPTPD62gYj367pWsJ+nX2jIn6I2hjg+jPpbx98XH7/ZLzN41Zdx3pdZXb
jP01fN2d93KvXu7Xa4E32zfZf/b9wfrYd/vn93TUH/ln0Z8LiWBe1L8/tH/rmEEu+HWEya8h7L6e
Clt9EeqyXVcw6r8ui1DZfi2FreCns8pC17jNlz8f/yRXm/q+ClsiInLoRIv7cFZbC1vTT2t1/u3F
v/iVn+nvq1/5+T/ff919/zk/tRUVtjp/82/+N09/7vv+WLjPzfCiXS4WdKIFg/JltHwhH9zxgjlb
RJuLFzDSl/Hxf4/bZC/V6Ytw5Vzp8Wsv3Xkb0nPXtqn0b9+e6fgtxxnVXvQ3G9rVL3x0osWM2QJQ
IejHpcWK2mctcyjcN2xfvt9c3NeReL4Vn2dtihetlj9rmR/xvmvti4T79P14m1PRNvHYtfTl8jbx
NRT7RHO+cW5WPw/lcyebl0Uf3SyN+cXi/Rr3zT3j2lu55vVxza//qnrtbeK5s+WeXlY7fn2ub50X
29XalOrbt7JNi/p1BmPWz8fL9rV7dvz8o/eiuTnM9el7afuz653OkSmucxyHdK619NldwjFfuW97
820e08b4vh/6bTp2y73Ydr+u3/eNgjGby+fIJG1Df+5yvtauJROPWTj/J1mf3vT7TG3stynvlZb5
UWprX/911qb5ftE1tYxZts31Xu4+S8elMv+q379oGvtAeO8NmuZgODad9HrG71W3hW3KX0eY/9q/
tEDVFYh++OnL3a8h7OZ4Udjqj3P997Jqha3bT1/1in9fKzt3dnyFLRERkc2JFvfhrLYUttKf1poK
W//0f/6up9/+57/49Gs/+7uvha3OT/1IfIw1tcLWB//ln376w9/0mXCfm+EFMXrxbHm5Hl7SK6IX
5JrVl9L6wsdtoSR/MZ+/5I/Hr7xsp9v31xW1vz/OdP3xQkDWb+O5wv65Xm/DcSYv8PI+XHdwroVF
iUnexvoYdcq5M2mZQ+F4hO2LF5cyfR+Oxy+vORH2f6o8fzY3SpV2tcyPfpv5mK+2LxDvkz8Dom3i
sYvnbW5pm/p86c83tSGa82tzc+3zits8G9udjUE0tivzbfF+jfvmnnHtrVzz+rgO1xLPxe19OVm8
75vu6WXhcTrR/XjnvNgu7cto/Fvunc40D1P58eL5kt/T6fem49T6YBivbptyzPK5np43G+Ngzk/H
TM+Zt7v+LHi2cMzza0m3m/pnkrdpbVxbVMa+P/90zHysSsO1tGwTz4/aPblo8Vk2Cfq10LenaOtV
2idN41Gb/4PbXA6kc3e2//p1zGTjdzNrXzkfg+dU65jFfRndh+n11J49C8+kprG/6LdL2zLI771B
0xxcOG+5f98Xq89TaJD9OsKx8HT9Ca68QNUXnqZiVPoTWv0x0l8hWCts5YZCVrLf9BNb1Z/cmr7e
QmFLREROmmhxH85qS2Hrr7zJi1qR6fPf/Nl3nr7tW+LjLCkLWz/8X/+Vp+/+jj8Qbjs3vPBGL54t
L9fRNndZfXGuL3zdFibyF/Osrenxy4WF2XEWXpL740zXHy8EZH1SOVeu4TiT1X66U3/cop0tbZ/1
a32hopw7k5Y5FI5H2L76PJkZ9x8WX+5pVz5u3fb181YWylr6uN9mPuYt/VYK9ynaEG0Tj108b3NL
29THKr0Xwzm/1m+VPltzO+9lvC7//fDydd++7L5PrSyALt6vcd/cM669lT5ZH9eVa7nT4n3fdE8v
C4/TicbsjuM/zzjGl3Pmz9eWe6dNOF+C6+y36+fi1KZoPk/bTdumn+XzIz1vNsbhnA+uN92ub2/c
nmcLx7yY6+M2+Xgs3Q+1cW1RGfus31ruxbb7NZoftXty0eKzbLLepnC+ljaMx9LxWq6z32a2f1vf
Zvo2z/tn3r58/LvPW66pvJZ+m+J89fswvZ7K/Kt+/6Jl7PttimsJ771B0xxcOm927O76VtoHzZLC
T/brBDtLBaqp2FQWwzptha1ZIW08f/mTXPN2baGwJSIiJ020uA9ntaWw9U9+8la46vzLn32n/2mt
3/6NX3j69X/8cfZZ556f2koLW1/4r95/+qN/8LPhdrHhhTd68Wx5uW56OW2x8AI8idqTv4znL+bV
l/zKufrjR/uW21zbEC8E5Nu0LJC0HGfUssBwj3FRIuuThjGZ2t5dX9dnS9dZ69OWOVTvi8o4zubJ
gqX5sHacvg1d27txXrqG2jxomB9h+8Y5s+U6L1rmVLRNPEbxvM0tbxP3cbFPNOfX5uZ1XILPlnT7
de25/Lcfk+48l6+7Alfc1yvjF7X9Ku6bzfN3stIn6+PaMp7b1e7v+lxcGNfApuOvzZsXM+/bu8e5
UO/HZN6N1309//h1OW+Hvhz2mx83n+vp59kYhHN+uP78fLfvdftX76HnCse8uG/DNjc8m++6Z+J9
8nnccty2c0fzo3bPLGq6d9b7rOncG8Zj8T4Kj5ML21O5PxaF/TOOUXh/dufsrmneF+tj1jCHsmtP
+642bxbmU8PYL/VjtN/98+Cm76euvd12K/cBbDH9GsHvz34NYWfpJ6XGz35wLEYtqBe4ygJYXITK
fz3iVgpbIiJy0kSL+3BWWwpbv/NzeeHq13/6naff+vov9n71l+aFre7XFkbHWdIVtv76j/61p+/5
U98cfr5seOGNXjzbFkSG/asLCxv05yteYrN/nLp/yc0XG4b2TPvkL+bVl/zgZTs/zm2b7GV5PP9t
v3ghoOy34dhLiwJtx+mN7dq04JK5jNdsrMbzz74/ju3KgsF0fUsLEJ1sPDINc6js+/HrsF/TsU6/
X1PZfjYnQmPbO4v9NGwXjVvz/Lj2z/h1d86gz67jEXw2n1PzMS7H6Xq8YOyGezYa05vFbcZxrN/T
0zbFOKwstIX3Tov+uNM/st99b+jr7ut4fOvj2lu8Xzfc903mY5mKjluOdTQezzU7x2Q8V9M9vaTp
WT1amTcvJ5gnUbu77SrjVzMf13IeTM+LfAyG+zK5r2ZztTxOfg3pebMxDu7X2T2dfb9ox6OFY16M
x2yb8drTbULFcZoE9/2s7y9a7sWGbZru+0azOXOR/R2tqT/Gvl16xm0Yj9rcGsRzP1P2/fj1+tiX
xnNdr2s6d/q9ye168vt/0DJm5Ta3eym6D9NxCeZfr/b9werYl/d90o/R87ZpDgbPkvnn9XMMbn1d
3wYK468j7GU/edVQ2Ao/a/uJrfLf9+rMfj3h+NNaa8eqU9gSEZGTJlrch7PaUtj6R18bfsVgq699
KT7Okq6w9a1/6HeFn60bXvqiF772BZHkJf1q4WV0we3lfDBbWEhelgdpW/IX86yt6Qvy7BjlcSbl
dZXXFC8E1PstPVa6X/txesnLfC/aZkl0/ZXFjOX+noz9FB0j7OtBPrbrcyjrw/6aa3N3oT0N50kN
izk30ULX0K74GOX+N3k/Ls+PTt7u7pr7fYKxv54z+Cw6z/yaxvk4bdO1o59z0dgX217Mx2Nlm7U5
Fi1ujftEz63Fz1aN/Zz03dRnaT+1jmuver9uvO9bLPRldNzh2qL+To8x329V432fzcf+HLV7ek15
X1fu6WfNjXbR/IieHfN2R/fYsrV7emrL/Jqnc1/OOY15Oc7T9/s5Omw/HTudT9k8iuZP9brGNoTP
6gcJxzy/lk7Zjx+9N9yfUV+m4nFdFh0nnJMt9+LKNuk4TfuE932jsp/y65/3a2yae6mFP+8vovGY
lP2ZbzP/86eT9XfWh12/1M+1LL+u7hz9dZRjdjFc38LfG1bHrOjDbvv+OtL7cDp+Oi75nztlP9/M
21ZuW/ZPPg7d/sN5r33d9OdCNDdGs+fEeC1B/14l5wzvMQgNxZ+usJUXqtYLW3HBKShsTb9mMJUV
0W6G4tZtu/j8y4aiWeRWSFPYEhGRQyda3Iez2lLY4hV6S4ub51EsXrwG2aLOy6otXPFJyBftgNfs
Ff7ZAW+Bvzc8wr0FSCCisCUiIodOtLgPZ6WwtXMKWw/0egsJw/97+IWLW2+xgMa6Yczv+0kE4G1S
hOak/L3hIaKfbIN7/eUf/IvBTzOdi8KWiIgcOtHiPpyVwtbOKWw9X/orZV7xwmS/8PEC7bv9yh2L
U69GPycVteBV28mfHfBo/t7wCMmvKlTUgodS2BIRkUMnWtyHs1LYAgAAAPZOYUtERA6daHEfzkph
CwAAANg7hS0RETl0osV9OCuFLQAAAGDvFLZEROTQiRb34awUtgAAAIC9U9gSEZFDJ1rch7NS2OKl
9f/IeOs/jP3eZ0/8D2l/6ulLHwz/kPhH70Wfvy1jO958OviMT9LwD/Yf6B/rn+73STTnWra51+c+
8/Tx5Zif7P225PZMGDx27Dc9m0tv81m99VyvflwfxbMaAEoKWyIicuhEi/twVq+lsDUs3n326cPg
s8Mt5h5Nv+hYHx+FrVYKWyw77rOwZc69wLx84QLIswpHpZXn7D0Utl6/5THyrN6rhz4bAMgobImI
yKETLe7DWb2an9gaF6JmCzTj9z9+/1P593k9HlnY4hWwWPpa9feSwlbw2Z0Uto75bFbY4pXz9yKA
l6OwJSIih060uA9n9Zp+FWG0aOvlfwcUtg7GYulr9eb9dy/3WvyTrfumsLVKYaudwhavnL8XAbwc
hS0RETl0osV9OKvX9W9sffrpoy8mizS1xanp1xJNysWBaAFw80LX0JaP3hvbNO7bL0Zc/nf+E2S3
bSa384wLT8ECxn2L1OPx0vNFiyNlH0ULXy3bLJj6IpS0qd+uO3Z2vuK6W9tSbnexafGynwe1xeFp
zPOv6+e6bT+M5bRdcm3X8xXjll1fOaZB+5qOM6iNS/tPPQ7n6LavXtekcdzyNgXXNxvX/Fz9/sU8
j++f+ZjN29TQ34vGc9T6Pmtnea5iDoXPpeH4m35Kte+/2rwpjtV6r60qr61hfkTb9MZjLbZlbZuW
cZ2PRyfv/xZL8yz4LDGMxdiOLX8u1MY4+zw5V9RPs/G4iP78WNJwnviZ33LfF2PRck29lnFtmR8t
5ufK7q/mZ/X8OLf2tsyh2zG6r7NndTSmK33Z79/vl587u7YNNj/z0zb3n13uges23f0wtSs51rTd
apvL/iza03yc8rqKObY69mU7cvf2NQA5hS0RETl0osV9OKvXVdiaFvWGRYf6Yna6KDEtICQLgf0i
RbFwES4gL8kXUbq2fPzBu8kC0nS+7vzJuS9mbYzakyxI3b63LuqTUt6+zthHyUJWyzbNwuu7uS4E
Xds9niu8joV2bB7DwNIxrotS3dddO1bGNV2kKq9tav94vm6b6zn7/qq0odaXjccZ+jpp97jftnk2
XkN3vus4zMelbQ5Nxyq2e5OMfdfGaJ9kftSfBVvn8DBmWX+szN/I/Nyd4di38RjnR9qeccyu5x/H
J58LQRtXBee6KNt5X59FxvNlY3L5XnqchnGdfbbYjqVtgj6bjWvQR2H/r2nvs8XndTjvhmOHY78w
T1vGddgm37/lz5O6ej80PfM39f1Sn7eMa8v8aPPhm2Kf8Z6+nms8d/a9cpuozeM25dgvj9HYL9mx
5sdunx/DsfJ2b+2jqU3F+ZJn/nwuFvuMfTFcd3c9l797Xf7+dS0YTe2etpu1eT4eab9O11ruk7ap
2sZ0zMp51jT2g+fdewAsUdgSEZFDJ1rch7N6bYWt6+JBV0SaLagEi1OdcnGhX0go9i23WZUvDg0L
dcOiy3yRqDA7V20Rq7y+NcHCysxwrtl19ueb2tyyzQYr1xIt4NT7cOEa7+qzUn7tfdumc61df8u4
XmTXG867Yb9Ni9dNx4n6rmXOlCr7ZP3TNofmi4NtyvnRNocW+nXU7zNbTByud2m/mXE80n3K9szb
N3jW/FgwP185jm1j1qK/ho37dGp90jZP69u0jGt47rD/17SPTzRvb4bjZNdTu/8XP2sZ17jNy+1b
Ux+Ppvt16VpnVsZ+ZVxb5sf9ir5tuKfDNl9E/bY8RnG/5Pu0zI+pTcV43HF/hMfJxHMxO1fftum8
w/bDNRbXm203ybeJ+y86zsq1F/016Y8/Hadh7CfL4wrAcyhsiYjIoRMt7sNZvb7C1sW4WHFdLJj0
iwbRgkmxQNWySLEqX4xIFyFmi1JTewvpucp9ssWQLdJzRYsi43Wm7bgZ+6Rlm/K4S6L+TkQLOLWF
vdpCXfbZ2Nb2sUylc2VcMJva0V1H2s7Vca0s0KU2LHT1an3ZeJy+r9N+3TzvO5Ux6I+1bQ61Lt4N
7S4V90vDHBq+N+4fzKH4PKON92PepuIZNH0eHbMf47HdW+fHkvJY6Xgln4fXvnD/zi3do7m1cb1p
OWZ9m5ZxDccj7P91a/Nsks+RuU1/Lqw8G7Jrvkrv1/m+a+1btjIeq/fruP/Y1uUxWDnXyrj221z7
pLAwfqFKf1/v13BO5fd0dZzTZ8NoeYzifsn2aZkfl+2i5+k9ltt7UZmL07X0fZTN9bTviuut3BO3
NiTHTD7v9Nc7tTM6TjGO2T1fKvp6aewnq/0EwN0UtkRE5NCJFvfhrF5lYWtcCJgtdLUsiHRfNyxS
rAsWosZFiGwBqD9XsWgRnSv7Xnfs6Do2GI83LKwki1Et17m5L1ZUFpcm0QJOfREtXqgr9cccrz9a
tFrS79sdv+uHy3+7r7u+mC90rY1rvGCVCft6Yb9aXzYeJ1p829o/1TFI29Y4h6KxLw1jmV9zOT+i
49Tn0MU4fr1kv5b2NJv1R96W/lzRPO73G7fdOj9WpOfM5nOncczWbblHl8f1puWY9W1axjUcj+f2
SWWeTVbblZ1/5c+FdL6l32+5hn6b+b4t/Va3bTyW7td++7Ef43m/cq6VcX3edSbG4+bnK+7XcDzy
bcI2d9Jnw2i57XG/ZPu0zI+LxefpBqt9XZmL07X0fZTN9bTviuut3BO3/k2OmXzeyZ6P0XGKfmvq
n4axn6z2EwB3U9gSEZFDJ1rch7PaVWGrskAwW0xoWKRYFyxEjYsQ6QJHuNhROdd1saVrX7SodY/Z
uSp9lGnZZoPK4tIkWsCpLxLVFzAj9ywO9ee+HL/7b99v43hcx2faZnVcG/oxnAsL+9X6suk4w9f5
NveIxyDvk7Y5VB/nScu5ts6hRNGfTfs0uy2adsct+6J2ruxats6PNf31ducc2vaw4xbW77u2cb2J
t8/Vt2kZ17DNfX894J6p3Lfr/TRu011Td4yl66+co2lcw3k29udK++rq4xFd991j1Nt2rnJcW87d
JByDov8b7ummZ8PC927ifsn3abvvH9VH68eptCftt6yf0+2L6w3HY9hmOn7cfw3HKccxPFdhw/N8
eVwBeA6FLREROXSixX04q30VtsbFgGxxYVygSBcIysWF8ettC5j5YkS6CJEt3JSLHUvn6rfd2o4V
wWLL0L7lc7Rs02y85tlC1ShawKkvfsULdbEt2ya6Puv/Dbfp/N1Yd/84fXINTeMaL1hlyrnYW9gv
GM9e03Ea2tMk6NdgjNvm0NCmfPwvx39z+7qcH9Nx0/lRzpdom8h8nkXtud+tHfUxy/pxfAbU59DY
vux7Wwz7f/R+d+5530ztXR6zBtG1dedOvm4Z15uWe3lpm4ZxLft+/PoR/TGfZ+n3g7mRam1H7dlw
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
N7bxeh3hvA6utbM2vo3jP6icozO2cT73kjkTnCubi43W58fYhzWbxqg7dnINF7Pzj+PRHft6/WV/
hP08tDvsz6rpWjvF/ZD046zvZ/MzOc71e/O5F90LszFrGdexPzrL83jBdIz+uF1bu2dMd97y2oJ5
utD/1flwbfNtv3l/zPts2u92/vE82TwP2thg9uthx3Pd+vCB47rm2j+xqU3Rccv52W/T7XfdLuqz
6dqKef2mbPO4XW1cE/P7ZDTOzXR8hm2Tvm6571vN5szwvdtx1ufZ1L5+m75t0Z/ByfxY6OthPNJ+
Gc8/22b5OEMbl+dZ29hfbH1eQEBhS0REDp1ocR/Oal+FrfSlLfn+XS9BwcvjRfoi1r88li9c44vY
rQ2VNiVqL9TlS99V8II4GF8C0zbPrr3Sd/0xg5f6NdW2dIL2XFSvq7J9b/E87eJzF+eNzrUwh7Yv
iGzt53gu5sZrKK4tP9/9Yx/22+KYPG6eRefOr2u49vi+n9qXt6c/ZjbeW8dkPEY3Lr1o/4X53AvG
dalPa59V2p9d43iuso+yvl0696R2HyT7DmMzHie7B/I2DP1XtDs7ftzmsg3ZNYzK+6z/upy/5byJ
rj+83rZxnbV7o/IaJtn1hu2rnH9lfGvni9WuMe6b/Ngt92uLtvlx1TK/tyrP1TQew9fN933V2NeL
c384V9wX+XiUY5bfV3Ff59s0jmt/7sY5W5MdI+3P/Fqa7vvke2UfXEXjU4x10/0ajvPGa68qj/Oo
cd1mad/os7LfWrYZvm65X1bGNdE0flfFcZvu+xbpXI4+b2tn1j9j24Z2pG0ar6G8tnSOhtdVbHP5
en3MhnPN+qJ4NrSM/W2/oF2wgcKWiIgcOtHiPpzVrgpbxUvSTeWlatH6S2n/EnbZJpS8mA4vZvPv
T/rjRC+y/cvj/AU2XhwZlC+B/dfpi+L4Qpi19So+5qKFttQWFaKX10G8ffbZ2Nb7Xmjr8yDrp+ia
Fl6kwxfvUX6t98zDi6aX+KW+GzWPfd7XV+WYLY39A+fZ+mLHuBhUMfRb2vfT9uP+3XWE87HR9VrL
61ofk3LuVJ8FnUp/D8cYrnVmuq6+jfN9s75dvJdH/TbRXL89k7NryuZu/kyNnwPJNpU2l/fR+vwY
t+n6IzL1d3T9WfsnreNaHH+j6lxIxyBsX97P+X5L4zvdF52VeVA7x/j9vD3leKTnmSv3rWqcH1ct
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
AsHpvtShAAAAAElFTkSuQmCC'/></p>
<h5 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h5><div class="highlight-container" data-rel="Tsx"><figure class="iseeu highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled,&#123;keyframes&#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">StyledAnimation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 动画</span></span><br><span class="line">    <span class="keyword">const</span> myAnimation =keyframes<span class="string">`</span></span><br><span class="line"><span class="string">    from&#123;</span></span><br><span class="line"><span class="string">        transform:rotate(0deg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    to&#123;</span></span><br><span class="line"><span class="string">        transform:rotate(360deg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="comment">// 给div添加动画效果</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">StyledDiv</span>=styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    width: 100px;</span></span><br><span class="line"><span class="string">    height: 100px;</span></span><br><span class="line"><span class="string">    background-color: red;</span></span><br><span class="line"><span class="string">    animation:<span class="subst">$&#123;myAnimation&#125;</span> 2s infinite</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>StyledAnimation<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">StyledDiv</span>&gt;</span><span class="tag">&lt;/<span class="name">StyledDiv</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目的性能优化</title>
    <url>/2023/05/09/optimization/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 Vue 项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。本文是作者通过实际项目的优化实践进行总结而来，希望读者读完本文，有一定的启发思考，从而对自己的项目进行优化起到帮助。本文内容分为以下三部分组成：</p>
<p>Vue 代码层面的优化；</p>
<p>webpack 配置层面的优化；</p>
<p>基础的 Web 技术层面的优化。</p>
<h2 id="一、代码层面的优化"><a href="#一、代码层面的优化" class="headerlink" title="一、代码层面的优化"></a>一、代码层面的优化</h2><h3 id="1-v-if-和-v-show-区分使用场景"><a href="#1-v-if-和-v-show-区分使用场景" class="headerlink" title="1. v-if 和 v-show 区分使用场景"></a>1. <strong>v-if 和 v-show 区分使用场景</strong></h3><p>v-if 是 真正 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>v-show 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 display 属性进行切换。</p>
<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>
<h3 id="2-computed-和-watch-区分使用场景"><a href="#2-computed-和-watch-区分使用场景" class="headerlink" title="2. computed 和 watch 区分使用场景"></a>2. <strong>computed 和 watch 区分使用场景</strong></h3><p>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p>
<p>watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p>
<p>运用场景：</p>
<p>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</p>
<p>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>
<h3 id="3-v-for-遍历必须为-item-添加-key，且避免同时使用-v-if"><a href="#3-v-for-遍历必须为-item-添加-key，且避免同时使用-v-if" class="headerlink" title="3. v-for 遍历必须为 item 添加 key，且避免同时使用 v-if"></a>3. <strong>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</strong></h3><p>（1）v-for 遍历必须为 item 添加 key</p>
<p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。</p>
<p>（2）v-for 遍历避免同时使用 v-if</p>
<p>v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p>
<p>推荐：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;user in activeUsers&quot;</span><br><span class="line">    :key=&quot;user.id&quot;&gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">computed: &#123;</span><br><span class="line">  activeUsers: function () &#123;</span><br><span class="line">    return this.users.filter(function (user) &#123;</span><br><span class="line">   return user.isActive</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>不推荐：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;user in users&quot;</span><br><span class="line">    v-if=&quot;user.isActive&quot;</span><br><span class="line">    :key=&quot;user.id&quot;&gt;</span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-长列表性能优化"><a href="#4-长列表性能优化" class="headerlink" title="4. 长列表性能优化"></a>4. <strong>长列表性能优化</strong></h3><p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    users: &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  async created() &#123;</span><br><span class="line">    const users = await axios.get(&quot;/api/users&quot;);</span><br><span class="line">    this.users = Object.freeze(users);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-事件的销毁"><a href="#5-事件的销毁" class="headerlink" title="5. 事件的销毁"></a>5. <strong>事件的销毁</strong></h3><p>Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。如果在 js 内</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  addEventListener(&#x27;click&#x27;, this.click, false)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  removeEventListener(&#x27;click&#x27;, this.click, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="6-图片资源懒加载"><a href="#6-图片资源懒加载" class="headerlink" title="6. 图片资源懒加载"></a>6. <strong>图片资源懒加载</strong></h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p>
<p>（1）安装插件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-lazyload --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（2）在入口文件 man.js 中引入并使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import VueLazyload from &#x27;vue-lazyload&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>然后再 vue 中直接使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(VueLazyload)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>或者添加自定义选项</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">preLoad: 1.3,</span><br><span class="line">error: &#x27;dist/error.png&#x27;,</span><br><span class="line">loading: &#x27;dist/loading.gif&#x27;,</span><br><span class="line">attempt: 1</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（3）在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p>
<p>以上为 vue-lazyload 插件的简单使用，如果要看插件的更多参数选项，可以查看 vue-lazyload 的 github 地址。</p>
<h3 id="7-路由懒加载"><a href="#7-路由懒加载" class="headerlink" title="7. 路由懒加载"></a>7. <strong>路由懒加载</strong></h3><p>Vue 是单页面应用，可能会有很多的路由引入 ，这样使用 webpcak 打包后的文件很大，当进入首页时，加载的资源过多，页面会出现白屏的情况，不利于用户体验。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应的组件，这样就更加高效了。这样会大大提高首屏显示的速度，但是可能其他的页面的速度就会降下来。</p>
<p>路由懒加载：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Foo = () =&gt; import(&#x27;./Foo.vue&#x27;)</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#x27;/foo&#x27;, component: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-第三方插件的按需引入"><a href="#8-第三方插件的按需引入" class="headerlink" title="8. 第三方插件的按需引入"></a>8. <strong>第三方插件的按需引入</strong></h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：</p>
<p>（1）首先，安装 babel-plugin-component ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（2）然后，将 .babelrc 修改为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;component&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class="line">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（3）在 main.js 中引入部分组件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import &#123; Button, Select &#125; from &#x27;element-ui&#x27;;</span><br><span class="line"></span><br><span class="line"> Vue.use(Button)</span><br><span class="line"> Vue.use(Select)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9-优化无限列表性能"><a href="#9-优化无限列表性能" class="headerlink" title="9. 优化无限列表性能"></a>9. <strong>优化无限列表性能</strong></h3><p>如果你的应用存在非常长或者无限滚动的列表，那么需要采用 窗口化 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。你可以参考以下开源项目 vue-virtual-scroll-list 和 vue-virtual-scroller 来优化这种无限列表的场景的。</p>
<h3 id="10-服务端渲染-SSR-or-预渲染"><a href="#10-服务端渲染-SSR-or-预渲染" class="headerlink" title="10. 服务端渲染 SSR or 预渲染"></a>10. <strong>服务端渲染 SSR or 预渲染</strong></h3><p>服务端渲染是指 Vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p>
<p>（1）服务端渲染的优点：</p>
<p>更好的 SEO：因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</p>
<p>更快的内容到达时间（首屏加载更快）：SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</p>
<p>（2）服务端渲染的缺点：</p>
<p>更多的开发条件限制：例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</p>
<p>更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用CPU 资源，因此如果你预料在高流量环境下使用，请准备相应的服务器负载，并明智地采用缓存策略。</p>
<p>如果你的项目的 SEO 和 首屏渲染是评价项目的关键指标，那么你的项目就需要服务端渲染来帮助你实现最佳的初始加载性能和 SEO，具体的 Vue SSR 如何实现，可以参考作者的另一篇文章《Vue SSR 踩坑之旅》。如果你的 Vue 项目只需改善少数营销页面（例如 /， /about， /contact 等）的 SEO，那么你可能需要预渲染，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点，具体你可以使用 prerender-spa-plugin 就可以轻松地添加预渲染 。</p>
<h2 id="二、Webpack-层面的优化"><a href="#二、Webpack-层面的优化" class="headerlink" title="二、Webpack 层面的优化"></a>二、Webpack 层面的优化</h2><h3 id="1-Webpack-对图片进行压缩"><a href="#1-Webpack-对图片进行压缩" class="headerlink" title="1. Webpack 对图片进行压缩"></a>1. <strong>Webpack 对图片进行压缩</strong></h3><p>在 vue 项目中除了可以在 webpack.base.conf.js 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 image-webpack-loader来压缩图片：</p>
<p>（1）首先，安装 image-webpack-loader ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（2）然后，在 webpack.base.conf.js 中进行配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">  use:[</span><br><span class="line">    &#123;</span><br><span class="line">    loader: &#x27;url-loader&#x27;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: 10000,</span><br><span class="line">      name: utils.assetsPath(&#x27;img/[name].[hash:7].[ext]&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        bypassOnDebug: true,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-减少-ES6-转为-ES5-的冗余代码"><a href="#2-减少-ES6-转为-ES5-的冗余代码" class="headerlink" title="2. 减少 ES6 转为 ES5 的冗余代码"></a>2. <strong>减少 ES6 转为 ES5 的冗余代码</strong></h3><p>Babel 插件会在将 ES6 代码转换成 ES5 代码时会注入一些辅助函数，例如下面的 ES6 代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class HelloWebpack extends Component&#123;...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这段代码再被转换成能正常运行的 ES5 代码时需要以下两个辅助函数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">babel-runtime/helpers/createClass  // 用于实现 class 语法</span><br><span class="line">babel-runtime/helpers/inherits  // 用于实现 extends 语法</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在默认情况下， Babel 会在每个输出文件中内嵌这些依赖的辅助函数代码，如果多个源代码文件都依赖这些辅助函数，那么这些辅助函数的代码将会出现很多次，造成代码冗余。为了不让这些辅助函数的代码重复出现，可以在依赖它们时通过 require(‘babel-runtime/helpers/createClass’) 的方式导入，这样就能做到只让它们出现一次。babel-plugin-transform-runtime 插件就是用来实现这个作用的，将相关辅助函数进行替换成导入语句，从而减小 babel 编译出来的代码的文件大小。</p>
<p>（1）首先，安装 babel-plugin-transform-runtime ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>（2）然后，修改 .babelrc 配置文件为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;transform-runtime&quot;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果要看插件的更多详细内容，可以查看babel-plugin-transform-runtime 的 详细介绍。</p>
<h3 id="3-提取公共代码"><a href="#3-提取公共代码" class="headerlink" title="3. 提取公共代码"></a>3. <strong>提取公共代码</strong></h3><p>如果项目中没有去将每个页面的第三方库和公共模块提取出来，则项目会存在以下问题：</p>
<p>相同的资源被重复加载，浪费用户的流量和服务器的成本。</p>
<p>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</p>
<p>所以我们需要将多个页面的公共代码抽离成单独的文件，来优化以上问题 。Webpack 内置了专门用于提取多个Chunk 中的公共部分的插件 CommonsChunkPlugin，我们在项目中 CommonsChunkPlugin 的配置如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 所有在 package.json 里面依赖的包，都会被打包进 vendor.js 这个文件中。</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &#x27;vendor&#x27;,</span><br><span class="line">  minChunks: function(module, count) &#123;</span><br><span class="line">    return (</span><br><span class="line">      module.resource &amp;&amp;</span><br><span class="line">      /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">      module.resource.indexOf(</span><br><span class="line">        path.join(__dirname, &#x27;../node_modules&#x27;)</span><br><span class="line">      ) === 0</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line">// 抽取出代码模块的映射关系</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: &#x27;manifest&#x27;,</span><br><span class="line">  chunks: [&#x27;vendor&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果要看插件的更多详细内容，可以查看 CommonsChunkPlugin 的 详细介绍。</p>
<h3 id="4-模板预编译"><a href="#4-模板预编译" class="headerlink" title="4. 模板预编译"></a>4. <strong>模板预编译</strong></h3><p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在运行时被编译为渲染函数。通常情况下这个过程已经足够快了，但对性能敏感的应用还是最好避免这种用法。</p>
<p>预编译模板最简单的方式就是使用单文件组件——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p>
<p>如果你使用 webpack，并且喜欢分离 JavaScript 和模板文件，你可以使用 vue-template-loader，它也可以在构建过程中把模板文件转换成为 JavaScript 渲染函数。</p>
<h3 id="5-提取组件的-CSS"><a href="#5-提取组件的-CSS" class="headerlink" title="5. 提取组件的 CSS"></a>5. <strong>提取组件的 CSS</strong></h3><p>当使用单文件组件时，组件内的 CSS 会以 style 标签的方式通过 JavaScript 动态注入。这有一些小小的运行时开销，如果你使用服务端渲染，这会导致一段 “无样式内容闪烁 (fouc) ” 。将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p>
<p>查阅这个构建工具各自的文档来了解更多：</p>
<p>webpack + vue-loader ( vue-cli 的 webpack 模板已经预先配置好)</p>
<p>Browserify + vueify</p>
<p>Rollup + rollup-plugin-vue</p>
<h3 id="6-优化-SourceMap"><a href="#6-优化-SourceMap" class="headerlink" title="6. 优化 SourceMap"></a>6. <strong>优化 SourceMap</strong></h3><p>我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩、去掉多余的空格、babel编译化后，最终将编译得到的代码会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有 bug的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发来说不好调式定位问题，因此 sourceMap 出现了，它就是为了解决不好调式代码问题的。</p>
<p>SourceMap 的可选值如下（+ 号越多，代表速度越快，- 号越多，代表速度越慢, o 代表中等速度 ）</p>
<p>开发环境推荐：cheap-module-eval-source-map</p>
<p>生产环境推荐：cheap-module-source-map</p>
<p>原因如下：</p>
<p>cheap：源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加 cheap 的基本类型来忽略打包前后的列信息；</p>
<p>module ：不管是开发环境还是正式环境，我们都希望能定位到bug的源代码具体的位置，比如说某个 Vue 文件报错了，我们希望能定位到具体的 Vue 文件，因此我们也需要 module 配置；</p>
<p>soure-map ：source-map 会为每一个打包后的模块生成独立的 soucemap 文件 ，因此我们需要增加source-map 属性；</p>
<p>eval-source-map：eval 打包代码的速度非常快，因为它不生成 map 文件，但是可以对 eval 组合使用 eval-source-map 使用会将 map 文件以 DataURL 的形式存在打包后的 js 文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快。</p>
<h3 id="7-构建结果输出分析"><a href="#7-构建结果输出分析" class="headerlink" title="7. 构建结果输出分析"></a>7. <strong>构建结果输出分析</strong></h3><p>Webpack 输出的代码可读性非常差而且文件非常大，让我们非常头疼。为了更简单、直观地分析输出结果，社区中出现了许多可视化分析工具。这些工具以图形的方式将结果更直观地展示出来，让我们快速了解问题所在。接下来讲解我们在 Vue 项目中用到的分析工具：webpack-bundle-analyzer 。</p>
<p>我们在项目中 webpack.prod.conf.js 进行配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">  var BundleAnalyzerPlugin =   require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin;</span><br><span class="line">  webpackConfig.plugins.push(new BundleAnalyzerPlugin());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>执行 $ npm run build –report 后生成分析报告如下：</p>
<h3 id="8-Vue-项目的编译优化"><a href="#8-Vue-项目的编译优化" class="headerlink" title="8. Vue 项目的编译优化"></a>8. <strong>Vue 项目的编译优化</strong></h3><p>如果你的 Vue 项目使用 Webpack 编译，需要你喝一杯咖啡的时间，那么也许你需要对项目的 Webpack 配置进行优化，提高 Webpack 的构建效率。</p>
<h2 id="三、基础的-Web-技术优化"><a href="#三、基础的-Web-技术优化" class="headerlink" title="三、基础的 Web 技术优化"></a>三、基础的 Web 技术优化</h2><h3 id="1-开启-gzip-压缩"><a href="#1-开启-gzip-压缩" class="headerlink" title="1. 开启 gzip 压缩"></a>1. <strong>开启 gzip 压缩</strong></h3><p>gzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome，firefox，IE等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持，gzip 压缩效率非常高，通常可以达到 70% 的压缩率，也就是说，如果你的网页有 30K，压缩之后就变成了 9K 左右</p>
<p>以下我们以服务端使用我们熟悉的 express 为例，开启 gzip 非常简单，相关步骤如下：</p>
<p>安装：</p>
<p>npm install compression –save 添加代码逻辑：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var compression = require(&#x27;compression&#x27;);</span><br><span class="line">var app = express();</span><br><span class="line">app.use(compression())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-浏览器缓存"><a href="#2-浏览器缓存" class="headerlink" title="2. 浏览器缓存"></a>2. <strong>浏览器缓存</strong></h3><p>为了提高用户加载页面的速度，对静态资源进行缓存是非常必要的，根据是否需要重新向服务器发起请求来分类，将 HTTP 缓存规则分为两大类（强制缓存，对比缓存）。</p>
<h3 id="3-CDN-的使用"><a href="#3-CDN-的使用" class="headerlink" title="3. CDN 的使用"></a>3. <strong>CDN 的使用</strong></h3><p>浏览器从服务器上下载 CSS、js 和图片等文件时都要和服务器连接，而大部分服务器的带宽有限，如果超过限制，网页就半天反应不过来。而 CDN 可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加，且CDN 具有更好的可用性，更低的网络延迟和丢包率 。</p>
<h3 id="4-使用-Chrome-Performance-查找性能瓶颈"><a href="#4-使用-Chrome-Performance-查找性能瓶颈" class="headerlink" title="4. 使用 Chrome Performance 查找性能瓶颈"></a>4. <strong>使用 Chrome Performance 查找性能瓶颈</strong></h3><p>Chrome 的 Performance 面板可以录制一段时间内的 js 执行细节及时间。使用 Chrome 开发者工具分析页面性能的步骤如下。</p>
<p>打开 Chrome 开发者工具，切换到 Performance 面板</p>
<p>点击 Record 开始录制</p>
<p>刷新页面或展开某个节点</p>
<p>点击 Stop 停止录制</p>
<h1 id="性能优化面试题"><a href="#性能优化面试题" class="headerlink" title="性能优化面试题"></a>性能优化面试题</h1><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/xnyh/xnyh1.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="一、CDN"><a href="#一、CDN" class="headerlink" title="一、CDN"></a>一、CDN</h2><h3 id="1-CDN的概念"><a href="#1-CDN的概念" class="headerlink" title="1. CDN的概念"></a>1. CDN的概念</h3><p>CDN（Content Delivery Network，<strong>内容分发网络</strong>）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>
<p>典型的CDN系统由下面三个部分组成：</p>
<ul>
<li><strong>分发服务系统：</strong>最基本的工作单元就是Cache设备，cache（边缘cache）负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时cache还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cache设备的数量、规模、总服务能力是衡量一个CDN系统服务能力的最基本的指标。</li>
<li><strong>负载均衡系统：</strong>主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（GSLB）和本地负载均衡（SLB）。<strong>全局负载均衡</strong>主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的cache的物理位置。<strong>本地负载均衡</strong>主要负责节点内部的设备负载均衡</li>
<li><strong>运营管理系统：</strong>运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。</li>
</ul>
<h3 id="2-CDN的作用"><a href="#2-CDN的作用" class="headerlink" title="2. CDN的作用"></a>2. CDN的作用</h3><p>CDN一般会用来托管Web资源（包括文本、图片和脚本等），可供下载的资源（媒体文件、软件、文档等），应用程序（门户网站等）。使用CDN来加速这些资源的访问。</p>
<p>（1）在性能方面，引入CDN的作用在于：</p>
<ul>
<li>用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</li>
<li>部分资源请求分配给了CDN，减少了服务器的负载</li>
</ul>
<p>（2）在安全方面，CDN有助于防御DDoS、MITM等网络攻击：</p>
<ul>
<li>针对DDoS：通过监控分析异常流量，限制其请求频率</li>
<li>针对MITM：从源服务器到 CDN 节点到 ISP（Internet Service Provider），全链路 HTTPS 通信</li>
</ul>
<p>除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</p>
<h3 id="3-CDN的原理"><a href="#3-CDN的原理" class="headerlink" title="3. CDN的原理"></a>3. CDN的原理</h3><p>CDN和DNS有着密不可分的联系，先来看一下DNS的解析域名过程，在浏览器输入 <a class="link"   href="http://www.test.com/" >www.test.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的解析过程如下：</p>
<p>（1） 检查浏览器缓存</p>
<p>（2）检查操作系统缓存，常见的如hosts文件</p>
<p>（3）检查路由器缓存</p>
<p>（4）如果前几步都没没找到，会向ISP(网络服务提供商)的LDNS服务器查询</p>
<p>（5）如果LDNS服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：</p>
<ul>
<li>根服务器返回顶级域名(TLD)服务器如 <code>.com</code>，<code>.cn</code>，<code>.org</code>等的地址，该例子中会返回 <code>.com</code>的地址</li>
<li>接着向顶级域名服务器发送请求，然后会返回次级域名(SLD)服务器的地址，本例子会返回 <code>.test</code>的地址</li>
<li>接着向次级域名服务器发送请求，然后会返回通过域名查询到的目标IP，本例子会返回 <code>www.test.com</code>的地址</li>
<li>Local DNS Server会缓存结果，并返回给用户，缓存在系统中</li>
</ul>
<p><strong>CDN的工作原理：</strong></p>
<p>（1）用户未使用CDN缓存资源的过程：</p>
<ol>
<li>浏览器通过DNS对域名进行解析（就是上面的DNS解析过程），依次得到此域名对应的IP地址</li>
<li>浏览器根据得到的IP地址，向域名的服务主机发送数据请求</li>
<li>服务器向浏览器返回响应数据</li>
</ol>
<p>（2）用户使用CDN缓存资源的过程：</p>
<ol>
<li>对于点击的数据的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给CNAME指向的CDN专用的DNS服务器。</li>
<li>CND专用DNS服务器将CND的全局负载均衡设备IP地址返回给用户</li>
<li>用户向CDN的全局负载均衡设备发起数据请求</li>
<li>CDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</li>
<li>区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备</li>
<li>全局负载均衡设备把服务器的IP地址返回给用户</li>
<li>用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</li>
</ol>
<p>如果缓存服务器没有用户想要的内容，那么缓存服务器就会向它的上一级缓存服务器请求内容，以此类推，直到获取到需要的资源。最后如果还是没有，就会回到自己的服务器去获取资源。</p>
<p>CNAME（意为：别名）：在域名解析中，实际上解析出来的指定域名对应的IP地址，或者该域名的一个CNAME，然后再根据这个CNAME来查找对应的IP地址。</p>
<h3 id="4-CDN的使用场景"><a href="#4-CDN的使用场景" class="headerlink" title="4. CDN的使用场景"></a>4. CDN的使用场景</h3><ul>
<li><strong>使用第三方的CDN服务：</strong>如果想要开源一些项目，可以使用第三方的CDN服务</li>
<li><strong>使用CDN进行静态资源的缓存：</strong>将自己网站的静态资源放在CDN上，比如js、css、图片等。可以将整个项目放在CDN上，完成一键部署。</li>
<li><strong>直播传送：</strong>直播本质上是使用流媒体进行传送，CDN也是支持流媒体传送的，所以直播完全可以使用CDN来提高访问速度。CDN在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。</li>
</ul>
<h2 id="二、懒加载"><a href="#二、懒加载" class="headerlink" title="二、懒加载"></a>二、懒加载</h2><h3 id="1-懒加载的概念"><a href="#1-懒加载的概念" class="headerlink" title="1. 懒加载的概念"></a>1. 懒加载的概念</h3><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。</p>
<p>如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</p>
<h3 id="2-懒加载的特点"><a href="#2-懒加载的特点" class="headerlink" title="2. 懒加载的特点"></a>2. 懒加载的特点</h3><ul>
<li><strong>减少无用资源的加载：</strong>使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</li>
<li>**提升用户体验: **如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</li>
<li><strong>防止加载过多图片而影响其他资源文件的加载 ：</strong>会影响网站应用的正常使用。</li>
</ul>
<h3 id="3-懒加载的实现原理"><a href="#3-懒加载的实现原理" class="headerlink" title="3. 懒加载的实现原理"></a>3. 懒加载的实现原理</h3><p>图片的加载是由 <code>src</code>引起的，当对 <code>src</code>赋值时，浏览器就会请求图片资源。根据这个原理，我们使用HTML5 的 <code>data-xxx</code>属性来储存图片的路径，在需要加载图片的时候，将 <code>data-xxx</code>中图片的路径赋值给 <code>src</code>，这样就实现了图片的按需加载，即懒加载。</p>
<p>注意：<code>data-xxx</code> 中的 <code>xxx</code>可以自定义，这里我们使用 <code>data-src</code>来定义。</p>
<p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p>
<p>使用原生JavaScript实现懒加载：</p>
<p><strong>知识点：</strong></p>
<p>（1）<code>window.innerHeight</code> 是浏览器可视区的高度 <code>document.documentElement.clientHeight</code></p>
<p>（2）<code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离</p>
<p>（3）<code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）</p>
<p>（4）图片加载条件：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></p>
<p><strong>代码实现：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var imgs = document.querySelectorAll(&#x27;img&#x27;);</span><br><span class="line">function lozyLoad()&#123;</span><br><span class="line">        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;</span><br><span class="line">        var winHeight= window.innerHeight;</span><br><span class="line">        for(var i=0;i &lt; imgs.length;i++)&#123;</span><br><span class="line">            if(imgs[i].offsetTop &lt; scrollTop + winHeight )&#123;</span><br><span class="line">                imgs[i].src = imgs[i].getAttribute(&#x27;data-src&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  window.onscroll = lozyLoad();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-懒加载与预加载的区别"><a href="#4-懒加载与预加载的区别" class="headerlink" title="4. 懒加载与预加载的区别"></a>4. 懒加载与预加载的区别</h3><p>这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p>
<ul>
<li><strong>懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载</strong>，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。</li>
<li><strong>预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。</strong>通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。</li>
</ul>
<h2 id="三、回流与重绘"><a href="#三、回流与重绘" class="headerlink" title="三、回流与重绘"></a>三、回流与重绘</h2><h3 id="1-回流与重绘的概念及触发条件"><a href="#1-回流与重绘的概念及触发条件" class="headerlink" title="1. 回流与重绘的概念及触发条件"></a>1. 回流与重绘的概念及触发条件</h3><h4 id="（1）回流"><a href="#（1）回流" class="headerlink" title="（1）回流"></a>（1）回流</h4><p>当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为<strong>回流</strong>。</p>
<p>下面这些操作会导致回流：</p>
<ul>
<li>页面的首次渲染</li>
<li>浏览器的窗口大小发生变化</li>
<li>元素的内容发生变化</li>
<li>元素的尺寸或者位置发生变化</li>
<li>元素的字体大小发生变化</li>
<li>激活CSS伪类</li>
<li>查询某些属性或者调用某些方法</li>
<li>添加或者删除可见的DOM元素</li>
</ul>
<p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：</p>
<ul>
<li>全局范围：从根节点开始，对整个渲染树进行重新布局</li>
<li>局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</li>
</ul>
<h4 id="（2）重绘"><a href="#（2）重绘" class="headerlink" title="（2）重绘"></a>（2）重绘</h4><p>当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是<strong>重绘</strong>。</p>
<p>下面这些操作会导致回流：</p>
<ul>
<li>color、background 相关属性：background-color、background-image 等</li>
<li>outline 相关属性：outline-color、outline-width 、text-decoration</li>
<li>border-radius、visibility、box-shadow</li>
</ul>
<p>注意： <strong>当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</strong></p>
<h3 id="2-如何避免回流与重绘？"><a href="#2-如何避免回流与重绘？" class="headerlink" title="2. 如何避免回流与重绘？"></a>2. 如何避免回流与重绘？</h3><p><strong>减少回流与重绘的措施：</strong></p>
<ul>
<li>操作DOM时，尽量在低层级的DOM节点进行操作</li>
<li>不要使用 <code>table</code>布局， 一个小的改动可能会使整个 <code>table</code>进行重新布局</li>
<li>使用CSS的表达式</li>
<li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li>
<li>使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</li>
<li>避免频繁操作DOM，可以创建一个文档片段 <code>documentFragment</code>，在它上面应用所有DOM操作，最后再把它添加到文档中</li>
<li>将元素先设置 <code>display: none</code>，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</li>
<li>将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于<strong>浏览器的渲染队列机制</strong>。</li>
</ul>
<p>浏览器针对页面的回流与重绘，进行了自身的优化——<strong>渲染队列</strong></p>
<p><strong>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</strong></p>
<p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>
<h3 id="3-如何优化动画？"><a href="#3-如何优化动画？" class="headerlink" title="3. 如何优化动画？"></a>3. 如何优化动画？</h3><p>对于如何优化动画，我们知道，一般情况下，动画需要频繁的操作DOM，就就会导致页面的性能问题，我们可以将动画的 <code>position</code>属性设置为 <code>absolute</code>或者 <code>fixed</code>，将动画脱离文档流，这样他的回流就不会影响到页面了。</p>
<h3 id="4-documentFragment-是什么？用它跟直接操作-DOM-的区别是什么？"><a href="#4-documentFragment-是什么？用它跟直接操作-DOM-的区别是什么？" class="headerlink" title="4. documentFragment 是什么？用它跟直接操作 DOM 的区别是什么？"></a>4. documentFragment 是什么？用它跟直接操作 DOM 的区别是什么？</h3><p>MDN中对 <code>documentFragment</code>的解释：</p>
<p>DocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 Document使用，就像标准的document一样，存储由节点（nodes）组成的文档结构。与document相比，最大的区别是DocumentFragment不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题。</p>
<p>当我们把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。在频繁的DOM操作时，我们就可以将DOM元素插入DocumentFragment，之后一次性的将所有的子孙节点插入文档中。和直接操作DOM相比，将DocumentFragment 节点插入DOM树时，不会触发页面的重绘，这样就大大提高了页面的性能。</p>
<h2 id="四、节流与防抖"><a href="#四、节流与防抖" class="headerlink" title="四、节流与防抖"></a>四、节流与防抖</h2><h3 id="1-对节流与防抖的理解"><a href="#1-对节流与防抖的理解" class="headerlink" title="1. 对节流与防抖的理解"></a>1. 对节流与防抖的理解</h3><ul>
<li>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</li>
<li>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</li>
</ul>
<p><strong>防抖函数的应用场景：</strong></p>
<ul>
<li>按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次</li>
<li>服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次，还有搜索联想词功能类似⽣存环境请⽤lodash.debounce</li>
</ul>
<p><strong>节流函数的适⽤场景：</strong></p>
<ul>
<li>拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动</li>
<li>缩放场景：监控浏览器resize</li>
<li>动画场景：避免短时间内多次触发动画引起性能问题</li>
</ul>
<h3 id="2-实现节流函数和防抖函数"><a href="#2-实现节流函数和防抖函数" class="headerlink" title="2. 实现节流函数和防抖函数"></a>2. 实现节流函数和防抖函数</h3><p><strong>函数防抖的实现：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function debounce(fn, wait) &#123;</span><br><span class="line">  var timer = null;</span><br><span class="line"></span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context = this,</span><br><span class="line">      args = [...arguments];</span><br><span class="line"></span><br><span class="line">    // 如果此时存在定时器的话，则取消之前的定时器重新记时</span><br><span class="line">    if (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置定时器，使事件间隔指定事件后执行</span><br><span class="line">    timer = setTimeout(() =&gt; &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>函数节流的实现：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 时间戳版</span><br><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  var preTime = Date.now();</span><br><span class="line"></span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context = this,</span><br><span class="line">      args = [...arguments],</span><br><span class="line">      nowTime = Date.now();</span><br><span class="line"></span><br><span class="line">    // 如果两次时间间隔超过了指定时间，则执行函数。</span><br><span class="line">    if (nowTime - preTime &gt;= delay) &#123;</span><br><span class="line">      preTime = Date.now();</span><br><span class="line">      return fn.apply(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定时器版</span><br><span class="line">function throttle (fun, wait)&#123;</span><br><span class="line">  let timeout = null</span><br><span class="line">  return function()&#123;</span><br><span class="line">    let context = this</span><br><span class="line">    let args = [...arguments]</span><br><span class="line">    if(!timeout)&#123;</span><br><span class="line">      timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">        fun.apply(context, args)</span><br><span class="line">        timeout = null </span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="五、图片优化"><a href="#五、图片优化" class="headerlink" title="五、图片优化"></a>五、图片优化</h2><h3 id="1-如何对项目中的图片进行优化？"><a href="#1-如何对项目中的图片进行优化？" class="headerlink" title="1. 如何对项目中的图片进行优化？"></a>1. 如何对项目中的图片进行优化？</h3><ol>
<li>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</li>
<li>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</li>
<li>小图使用 base64 格式</li>
<li>将多个图标文件整合到一张图片中（雪碧图）</li>
<li>选择正确的图片格式：</li>
<li><ul>
<li>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</li>
<li>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</li>
<li>照片使用 JPEG</li>
</ul>
</li>
</ol>
<h3 id="2-常见的图片格式及使用场景"><a href="#2-常见的图片格式及使用场景" class="headerlink" title="2. 常见的图片格式及使用场景"></a>2. 常见的图片格式及使用场景</h3><p>（1）<strong>BMP</strong>是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</p>
<p>（2）<strong>GIF</strong>是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</p>
<p>（3）<strong>JPEG</strong>是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</p>
<p>（4）<strong>PNG-8</strong>是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</p>
<p>（5）<strong>PNG-24</strong>是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</p>
<p>（6）<strong>SVG</strong>是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。这意味着SVG图片在放大时，不会失真，所以它非常适合用来绘制Logo、Icon等。</p>
<p>（7）<strong>WebP</strong>是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</p>
<ul>
<li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li>
<li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li>
<li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li>
</ul>
<h2 id="六、Webpack优化"><a href="#六、Webpack优化" class="headerlink" title="六、Webpack优化"></a>六、Webpack优化</h2><h3 id="1-如何提⾼webpack的打包速度"><a href="#1-如何提⾼webpack的打包速度" class="headerlink" title="1. 如何提⾼webpack的打包速度?"></a>1. 如何提⾼webpack的打包速度?</h3><h4 id="（1）优化-Loader"><a href="#（1）优化-Loader" class="headerlink" title="（1）优化 Loader"></a>（1）优化 Loader</h4><p>对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，<strong>转换代码越多，效率就越低</strong>。当然了，这是可以优化的。</p>
<p>首先我们<strong>优化 Loader 的文件搜索范围</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // js 文件才使用 babel</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &#x27;babel-loader&#x27;,</span><br><span class="line">        // 只在 src 文件夹下查找</span><br><span class="line">        include: [resolve(&#x27;src&#x27;)],</span><br><span class="line">        // 不会去查找的路径</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于 Babel 来说，希望只作用在 JS 代码上的，然后 <code>node_modules</code> 中使用的代码都是编译过的，所以完全没有必要再去处理一遍。</p>
<p>当然这样做还不够，还可以将 Babel 编译过的文件<strong>缓存</strong>起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">loader: &#x27;babel-loader?cacheDirectory=true&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（2）HappyPack"><a href="#（2）HappyPack" class="headerlink" title="（2）HappyPack"></a>（2）HappyPack</h4><p>受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。</p>
<p><strong>HappyPack 可以将 Loader 的同步执行转换为并行的</strong>，这样就能充分利用系统资源来加快打包效率了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.js$/,</span><br><span class="line">      include: [resolve(&#x27;src&#x27;)],</span><br><span class="line">      exclude: /node_modules/,</span><br><span class="line">      // id 后面的内容对应下面</span><br><span class="line">      loader: &#x27;happypack/loader?id=happybabel&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  new HappyPack(&#123;</span><br><span class="line">    id: &#x27;happybabel&#x27;,</span><br><span class="line">    loaders: [&#x27;babel-loader?cacheDirectory&#x27;],</span><br><span class="line">    // 开启 4 个线程</span><br><span class="line">    threads: 4</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（3）DllPlugin"><a href="#（3）DllPlugin" class="headerlink" title="（3）DllPlugin"></a>（3）DllPlugin</h4><p><strong>DllPlugin 可以将特定的类库提前打包然后引入</strong>。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。DllPlugin的使用方法如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 单独配置在一个文件中</span><br><span class="line">// webpack.dll.conf.js</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const webpack = require(&#x27;webpack&#x27;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    // 想统一打包的类库</span><br><span class="line">    vendor: [&#x27;react&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;[name].dll.js&#x27;,</span><br><span class="line">    library: &#x27;[name]-[hash]&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      // name 必须和 output.library 一致</span><br><span class="line">      name: &#x27;[name]-[hash]&#x27;,</span><br><span class="line">      // 该属性需要与 DllReferencePlugin 中一致</span><br><span class="line">      context: __dirname,</span><br><span class="line">      path: path.join(__dirname, &#x27;dist&#x27;, &#x27;[name]-manifest.json&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>然后需要执行这个配置文件生成依赖文件，接下来需要使用 <code>DllReferencePlugin</code> 将依赖文件引入项目中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// webpack.conf.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // ...省略其他配置</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DllReferencePlugin(&#123;</span><br><span class="line">      context: __dirname,</span><br><span class="line">      // manifest 就是之前打包出来的 json 文件</span><br><span class="line">      manifest: require(&#x27;./dist/vendor-manifest.json&#x27;),</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（4）代码压缩"><a href="#（4）代码压缩" class="headerlink" title="（4）代码压缩"></a>（4）代码压缩</h4><p>在 Webpack3 中，一般使用 <code>UglifyJS</code> 来压缩代码，但是这个是单线程运行的，为了加快效率，可以使用 <code>webpack-parallel-uglify-plugin</code> 来并行运行 <code>UglifyJS</code>，从而提高效率。</p>
<p>在 Webpack4 中，不需要以上这些操作了，只需要将 <code>mode</code> 设置为 <code>production</code> 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 <code>console.log</code> 这类代码的功能。</p>
<h4 id="（5）其他"><a href="#（5）其他" class="headerlink" title="（5）其他"></a>（5）其他</h4><p>可以通过一些小的优化点来加快打包速度</p>
<ul>
<li><code>resolve.extensions</code>：用来表明文件后缀列表，默认查找顺序是 <code>[&#39;.js&#39;, &#39;.json&#39;]</code>，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li>
<li><code>resolve.alias</code>：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</li>
<li><code>module.noParse</code>：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li>
</ul>
<h3 id="2-如何减少-Webpack-打包体积"><a href="#2-如何减少-Webpack-打包体积" class="headerlink" title="2. 如何减少 Webpack 打包体积"></a>2. 如何减少 Webpack 打包体积</h3><h4 id="（1）按需加载"><a href="#（1）按需加载" class="headerlink" title="（1）按需加载"></a>（1）按需加载</h4><p>在开发 SPA 项目的时候，项目中都会存在很多路由页面。如果将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，希望首页能加载的文件体积越小越好，<strong>这时候就可以使用按需加载，将每个路由页面单独打包为一个文件</strong>。当然不仅仅路由可以按需加载，对于 <code>loadash</code> 这种大型类库同样可以使用这个功能。</p>
<p>按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 <code>Promise</code>，当 <code>Promise</code> 成功以后去执行回调。</p>
<h4 id="（2）Scope-Hoisting"><a href="#（2）Scope-Hoisting" class="headerlink" title="（2）Scope Hoisting"></a>（2）Scope Hoisting</h4><p><strong>Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。</strong></p>
<p>比如希望打包两个文件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.js</span><br><span class="line">export const a = 1</span><br><span class="line">// index.js</span><br><span class="line">import &#123; a &#125; from &#x27;./test.js&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于这种情况，打包出来的代码会类似这样：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  /* 0 */</span><br><span class="line">  function (module, exports, require) &#123;</span><br><span class="line">    //...</span><br><span class="line">  &#125;,</span><br><span class="line">  /* 1 */</span><br><span class="line">  function (module, exports, require) &#123;</span><br><span class="line">    //...</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>但是如果使用 Scope Hoisting ，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  /* 0 */</span><br><span class="line">  function (module, exports, require) &#123;</span><br><span class="line">    //...</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用 <code>optimization.concatenateModules</code> 就可以了：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    concatenateModules: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（3）Tree-Shaking"><a href="#（3）Tree-Shaking" class="headerlink" title="（3）Tree Shaking"></a>（3）Tree Shaking</h4><p><strong>Tree Shaking 可以实现删除项目中未被引用的代码</strong>，比如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.js</span><br><span class="line">export const a = 1</span><br><span class="line">export const b = 2</span><br><span class="line">// index.js</span><br><span class="line">import &#123; a &#125; from &#x27;./test.js&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于以上情况，<code>test</code> 文件中的变量 <code>b</code> 如果没有在项目中使用到的话，就不会被打包到文件中。</p>
<p>如果使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。</p>
<h3 id="3-如何⽤webpack来优化前端性能？"><a href="#3-如何⽤webpack来优化前端性能？" class="headerlink" title="3. 如何⽤webpack来优化前端性能？"></a>3. 如何⽤webpack来优化前端性能？</h3><p>⽤webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>
<ul>
<li><strong>压缩代码</strong>：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css</li>
<li><strong>利⽤CDN加速</strong>: 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径</li>
<li><strong>Tree Shaking</strong>: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 –optimize-minimize 来实现</li>
<li><strong>Code Splitting</strong>: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存</li>
<li><strong>提取公共第三⽅库</strong>: SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码</li>
</ul>
<h3 id="4-如何提⾼webpack的构建速度？"><a href="#4-如何提⾼webpack的构建速度？" class="headerlink" title="4. 如何提⾼webpack的构建速度？"></a>4. 如何提⾼webpack的构建速度？</h3><ol>
<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码</li>
<li>通过 externals 配置来提取常⽤库</li>
<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li>
<li>使⽤ Happypack 实现多线程加速编译</li>
<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度</li>
<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码</li>
</ol>
<h1 id="前端工程化面试题"><a href="#前端工程化面试题" class="headerlink" title="前端工程化面试题"></a>前端工程化面试题</h1><h2 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h2><h3 id="1-git-和-svn-的区别"><a href="#1-git-和-svn-的区别" class="headerlink" title="1. git 和 svn 的区别"></a>1. git 和 svn 的区别</h3><ul>
<li>git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器出现问题，就没有办法使用 svn 来提交代码。</li>
<li>svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指向某次提交，因此 git 的分支创建更加开销更小并且分支上的变化不会影响到其他人。svn 的分支变化会影响到所有的人。</li>
<li>svn 的指令相对于 git 来说要简单一些，比 git 更容易上手。</li>
<li>GIT把内容按元数据方式存储，而SVN是按文件：因为git目录是处于个人机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</li>
<li>GIT分支和SVN的分支不同：svn会发生分支遗漏的情况，而git可以同一个工作目录下快速的在几个分支间切换，很容易发现未被合并的分支，简单而快捷的合并这些文件。</li>
<li>GIT没有一个全局的版本号，而SVN有</li>
<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏</li>
</ul>
<h3 id="2-经常使用的-git-命令？"><a href="#2-经常使用的-git-命令？" class="headerlink" title="2. 经常使用的 git 命令？"></a>2. 经常使用的 git 命令？</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                     // 新建 git 代码库</span><br><span class="line">git add                      // 添加指定文件到暂存区</span><br><span class="line">git rm                       // 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git commit -m [message]      // 提交暂存区到仓库区</span><br><span class="line">git branch                   // 列出所有分支</span><br><span class="line">git checkout -b [branch]     // 新建一个分支，并切换到该分支</span><br><span class="line">git status                   // 显示有变更文件的状态</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-git-pull-和-git-fetch-的区别"><a href="#3-git-pull-和-git-fetch-的区别" class="headerlink" title="3. git pull 和 git fetch 的区别"></a>3. git pull 和 git fetch 的区别</h3><ul>
<li>git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。</li>
<li>git pull 会将远程仓库的变化下载下来，并和当前分支合并。</li>
</ul>
<h3 id="4-git-rebase-和-git-merge-的区别"><a href="#4-git-rebase-和-git-merge-的区别" class="headerlink" title="4. git rebase 和 git merge 的区别"></a>4. git rebase 和 git merge 的区别</h3><p>git merge 和 git rebase 都是用于分支合并，关键<strong>在</strong> <strong>commit 记录的处理上不同</strong>：</p>
<ul>
<li>git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。</li>
<li>git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录了。</li>
</ul>
<h2 id="二、Webpack"><a href="#二、Webpack" class="headerlink" title="二、Webpack"></a>二、Webpack</h2><h3 id="1-webpack与grunt、gulp的不同？"><a href="#1-webpack与grunt、gulp的不同？" class="headerlink" title="1. webpack与grunt、gulp的不同？"></a>1. webpack与grunt、gulp的不同？</h3><p><strong>Grunt****、Gulp是基于任务运⾏的⼯具</strong>： 它们会⾃动执⾏指定的任务，就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活跃的社区，丰富的插件，能⽅便的打造各种⼯作流。</p>
<p><strong>Webpack是基于模块化打包的⼯具:</strong> ⾃动化处理模块，webpack把⼀切当成模块，当 webpack 处理应⽤程序时，它会递归地构建⼀个依赖关系图 (dependency graph)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 bundle。</p>
<p>因此这是完全不同的两类⼯具,⽽现在主流的⽅式是⽤npm script代替Grunt、Gulp，npm script同样可以打造任务流。</p>
<h3 id="2-webpack、rollup、parcel优劣？"><a href="#2-webpack、rollup、parcel优劣？" class="headerlink" title="2. webpack、rollup、parcel优劣？"></a>2. webpack、rollup、parcel优劣？</h3><ul>
<li>webpack适⽤于⼤型复杂的前端站点构建: webpack有强⼤的loader和插件⽣态,打包后的⽂件实际上就是⼀个⽴即执⾏函数，这个⽴即执⾏函数接收⼀个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。⽴即执⾏函数内部则处理模块之间的引⽤，执⾏模块等,这种情况更适合⽂件依赖复杂的应⽤开发。</li>
<li>rollup适⽤于基础库的打包，如vue、d3等: Rollup 就是将各个模块打包进⼀个⽂件中，并且通过 Tree-shaking 来删除⽆⽤的代码,可以最⼤程度上降低代码体积,但是rollup没有webpack如此多的的如代码分割、按需加载等⾼级功能，其更聚焦于库的打包，因此更适合库的开发。</li>
<li>parcel适⽤于简单的实验性项⽬: 他可以满⾜低⻔槛的快速看到效果,但是⽣态差、报错信息不够全⾯都是他的硬伤，除了⼀些玩具项⽬或者实验项⽬不建议使⽤。</li>
</ul>
<h3 id="3-有哪些常⻅的Loader？"><a href="#3-有哪些常⻅的Loader？" class="headerlink" title="3. 有哪些常⻅的Loader？"></a>3. 有哪些常⻅的Loader？</h3><ul>
<li>file-loader：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 URL 去引⽤输出的⽂件</li>
<li>url-loader：和 file-loader 类似，但是能在⽂件很⼩的情况下以 base64 的⽅式把⽂件内容注⼊到代码中去</li>
<li>source-map-loader：加载额外的 Source Map ⽂件，以⽅便断点调试</li>
<li>image-loader：加载并且压缩图⽚⽂件</li>
<li>babel-loader：把 ES6 转换成 ES5</li>
<li>css-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性</li>
<li>style-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS。</li>
<li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li>
</ul>
<p><strong>注意：在Webpack中，loader的执行顺序是从右向左</strong>执行的。因为webpack选择了<strong>compose这样的函数式编程方式</strong>，这种方式的表达式执行是从右向左的。</p>
<h3 id="4-有哪些常⻅的Plugin？"><a href="#4-有哪些常⻅的Plugin？" class="headerlink" title="4. 有哪些常⻅的Plugin？"></a>4. 有哪些常⻅的Plugin？</h3><ul>
<li>define-plugin：定义环境变量</li>
<li>html-webpack-plugin：简化html⽂件创建</li>
<li>uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码</li>
<li>webpack-parallel-uglify-plugin: 多核压缩，提⾼压缩速度</li>
<li>webpack-bundle-analyzer: 可视化webpack输出⽂件的体积</li>
<li>mini-css-extract-plugin: CSS提取到单独的⽂件中，⽀持按需加载</li>
</ul>
<h3 id="5-bundle，chunk，module是什么？"><a href="#5-bundle，chunk，module是什么？" class="headerlink" title="5. bundle，chunk，module是什么？"></a>5. bundle，chunk，module是什么？</h3><ul>
<li>bundle：是由webpack打包出来的⽂件；</li>
<li>chunk：代码块，⼀个chunk由多个模块组合⽽成，⽤于代码的合并和分割；</li>
<li>module：是开发中的单个模块，在webpack的世界，⼀切皆模块，⼀个模块对应⼀个⽂件，webpack会从配置的 entry中递归开始找出所有依赖的模块。</li>
</ul>
<h3 id="6-Loader和Plugin的不同？"><a href="#6-Loader和Plugin的不同？" class="headerlink" title="6. Loader和Plugin的不同？"></a>6. Loader和Plugin的不同？</h3><p>不同的作⽤:</p>
<ul>
<li>Loader直译为”加载器”。Webpack将⼀切⽂件视为模块，但是webpack原⽣是只能解析js⽂件，如果想将其他⽂件也打包的话，就会⽤到 loader 。 所以Loader的作⽤是让webpack拥有了加载和解析⾮JavaScript⽂件的能⼒。</li>
<li>Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运⾏的⽣命周期中会⼴播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li>
</ul>
<p>不同的⽤法:</p>
<ul>
<li>Loader在 module.rules 中配置，也就是说他作为模块的解析规则⽽存在。 类型为数组，每⼀项都是⼀个 Object ，⾥⾯描述了对于什么类型的⽂件（ test ），使⽤什么加载( loader )和使⽤的参数（ options ）</li>
<li>Plugin在 plugins 中单独配置。 类型为数组，每⼀项是⼀个 plugin 的实例，参数都通过构造函数传⼊。</li>
</ul>
<h3 id="7-webpack的构建流程"><a href="#7-webpack的构建流程" class="headerlink" title="7. webpack的构建流程"></a>7. webpack的构建流程</h3><p>Webpack 的运⾏流程是⼀个串⾏的过程，从启动到结束会依次执⾏以下流程：</p>
<ol>
<li>初始化参数：从配置⽂件和 Shell 语句中读取与合并参数，得出最终的参数；</li>
<li>开始编译：⽤上⼀步得到的参数初始化 Compiler 对象，加载所有配置的插件，执⾏对象的 run ⽅法开始执⾏编译；</li>
<li>确定⼊⼝：根据配置中的 entry 找出所有的⼊⼝⽂件；</li>
<li>编译模块：从⼊⼝⽂件出发，调⽤所有配置的 Loader 对模块进⾏翻译，再找出该模块依赖的模块，再递归本步骤直到所有⼊⼝依赖的⽂件都经过了本步骤的处理；</li>
<li>完成模块编译：在经过第4步使⽤ Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li>
<li>输出资源：根据⼊⼝和模块之间的依赖关系，组装成⼀个个包含多个模块的 Chunk，再把每个 Chunk 转换成⼀个单独的⽂件加⼊到输出列表，这步是可以修改输出内容的最后机会；</li>
<li>输出完成：在确定好输出内容后，根据配置确定输出的路径和⽂件名，把⽂件内容写⼊到⽂件系统。</li>
</ol>
<p>在以上过程中，Webpack 会在特定的时间点⼴播出特定的事件，插件在监听到感兴趣的事件后会执⾏特定的逻辑，并且插件可以调⽤ Webpack 提供的 API 改变 Webpack 的运⾏结果。</p>
<h3 id="8-编写loader或plugin的思路？"><a href="#8-编写loader或plugin的思路？" class="headerlink" title="8. 编写loader或plugin的思路？"></a>8. 编写loader或plugin的思路？</h3><p>Loader像⼀个”翻译官”把读到的源⽂件内容转义成新的⽂件内容，并且每个Loader通过链式操作，将源⽂件⼀步步翻译成想要的样⼦。</p>
<p>编写Loader时要遵循单⼀原则，每个Loader只做⼀种”转义”⼯作。 每个Loader的拿到的是源⽂件内容（source），可以通过返回值的⽅式将处理后的内容输出，也可以调⽤ this.callback() ⽅法，将内容返回给webpack。 还可以通过this.async() ⽣成⼀个 callback 函数，再⽤这个callback将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发loader的⼯具函数集——loader-utils 。</p>
<p>相对于Loader⽽⾔，Plugin的编写就灵活了许多。 webpack在运⾏的⽣命周期中会⼴播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<h3 id="9-webpack的热更新是如何做到的？说明其原理？"><a href="#9-webpack的热更新是如何做到的？说明其原理？" class="headerlink" title="9. webpack的热更新是如何做到的？说明其原理？"></a>9. webpack的热更新是如何做到的？说明其原理？</h3><p>webpack的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。 这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。</p>
<p>原理：</p>
<p>⾸先要知道server端和client端都做了处理⼯作：</p>
<ol>
<li>第⼀步，在 webpack 的 watch 模式下，⽂件系统中某⼀个⽂件发⽣修改，webpack 监听到⽂件变化，根据配置⽂件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</li>
<li>第⼆步是 webpack-dev-server 和 webpack 之间的接⼝交互，⽽在这⼀步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调⽤ webpack 暴露的 API对代码变化进⾏监 控，并且告诉 webpack，将代码打包到内存中。</li>
<li>第三步是 webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ live reload。注意，这⼉是浏览器刷新，和 HMR 是两个概念。</li>
<li>第四步也是 webpack-dev-server 代码的⼯作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 websocket ⻓连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态⽂件变化的信息。浏览器端根据这些 socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后⾯的步骤根据这⼀ hash 值来进⾏模块热替换。</li>
<li>webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏热更模块操作，⽽把这些⼯作⼜交回给了webpack，webpack/hot/dev-server 的⼯作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。</li>
<li>HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上⼀步传递给他的新模块的 hash 值，它通过JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回⼀个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li>
<li>⽽第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。</li>
<li>最后⼀步，当 HMR 失败后，回退到 live reload 操作，也就是进⾏浏览器刷新来获取最新打包代码。</li>
</ol>
<p>大概流程是我们用webpack-dev-server启动一个服务之后，浏览器和服务端是通过websocket进行长连接，webpack内部实现的watch就会监听文件修改，只要有修改就webpack会重新打包编译到内存中，然后webpack-dev-server依赖中间件webpack-dev-middleware和webpack之间进行交互，每次热更新都会请求一个携带hash值的json文件和一个js，websocker传递的也是hash值，内部机制通过hash值检查进行热更新， 至于内部原理，因为水平限制，目前还看不懂。</p>
<h3 id="10-如何⽤webpack来优化前端性能？"><a href="#10-如何⽤webpack来优化前端性能？" class="headerlink" title="10. 如何⽤webpack来优化前端性能？"></a>10. 如何⽤webpack来优化前端性能？</h3><p>⽤webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。</p>
<ul>
<li><strong>压缩代码</strong>：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css</li>
<li><strong>利⽤CDN加速</strong>: 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径</li>
<li><strong>Tree Shaking</strong>: 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 –optimize-minimize 来实现</li>
<li><strong>Code Splitting</strong>: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存</li>
<li><strong>提取公共第三⽅库</strong>: SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码</li>
</ul>
<h3 id="11-如何提⾼webpack的打包速度"><a href="#11-如何提⾼webpack的打包速度" class="headerlink" title="11. 如何提⾼webpack的打包速度?"></a>11. 如何提⾼webpack的打包速度?</h3><ul>
<li>happypack: 利⽤进程并⾏编译loader,利⽤缓存来使得 rebuild 更快,遗憾的是作者表示已经不会继续开发此项⽬,类似的替代者是thread-loader</li>
<li>外部扩展(externals): 将不怎么需要更新的第三⽅库脱离webpack打包，不被打⼊bundle中，从⽽减少打包时间，⽐如jQuery⽤script标签引⼊</li>
<li>dll: 采⽤webpack的 DllPlugin 和 DllReferencePlugin 引⼊dll，让⼀些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间</li>
<li>利⽤缓存: webpack.cache 、babel-loader.cacheDirectory、 HappyPack.cache 都可以利⽤缓存提⾼rebuild效率缩⼩⽂件搜索范围: ⽐如babel-loader插件,如果你的⽂件仅存在于src中,那么可以 include: path.resolve(__dirname,‘src’) ,当然绝⼤多数情况下这种操作的提升有限，除⾮不⼩⼼build了node_modules⽂件</li>
</ul>
<h3 id="12-如何提⾼webpack的构建速度？"><a href="#12-如何提⾼webpack的构建速度？" class="headerlink" title="12. 如何提⾼webpack的构建速度？"></a>12. 如何提⾼webpack的构建速度？</h3><ol>
<li>多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码</li>
<li>通过 externals 配置来提取常⽤库</li>
<li>利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li>
<li>使⽤ Happypack 实现多线程加速编译</li>
<li>使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度</li>
<li>使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码</li>
</ol>
<h3 id="13-怎么配置单⻚应⽤？怎么配置多⻚应⽤？"><a href="#13-怎么配置单⻚应⽤？怎么配置多⻚应⽤？" class="headerlink" title="13. 怎么配置单⻚应⽤？怎么配置多⻚应⽤？"></a>13. 怎么配置单⻚应⽤？怎么配置多⻚应⽤？</h3><p>单⻚应⽤可以理解为webpack的标准模式，直接在 entry 中指定单⻚应⽤的⼊⼝即可，这⾥不再赘述多⻚应⽤的话，可以使⽤webpack的 AutoWebPlugin 来完成简单⾃动化的构建，但是前提是项⽬的⽬录结构必须遵守他预设的规范。 多⻚应⽤中要注意的是：</p>
<ul>
<li>每个⻚⾯都有公共的代码，可以将这些代码抽离出来，避免重复的加载。⽐如，每个⻚⾯都引⽤了同⼀套css样式表</li>
<li>随着业务的不断扩展，⻚⾯可能会不断的追加，所以⼀定要让⼊⼝的配置⾜够灵活，避免每次添加新⻚⾯还需要修改构建配置</li>
</ul>
<h2 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h2><h3 id="1-Babel的原理是什么"><a href="#1-Babel的原理是什么" class="headerlink" title="1. Babel的原理是什么?"></a>1. Babel的原理是什么?</h3><p>babel 的转译过程也分为三个阶段，这三步具体是：</p>
<ul>
<li><strong>解析 Parse</strong>: 将代码解析⽣成抽象语法树（AST），即词法分析与语法分析的过程；</li>
<li><strong>转换 Transform</strong>: 对于 AST 进⾏变换⼀系列的操作，babel 接受得到 AST 并通过 babel-traverse 对其进⾏遍历，在此过程中进⾏添加、更新及移除等操作；</li>
<li><strong>⽣成 Generate</strong>: 将变换后的 AST 再转换为 JS 代码, 使⽤到的模块是 babel-generator。</li>
</ul>
<h1 id="浏览器原理面试题"><a href="#浏览器原理面试题" class="headerlink" title="浏览器原理面试题"></a>浏览器原理面试题</h1><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq1.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="一、浏览器安全"><a href="#一、浏览器安全" class="headerlink" title="一、浏览器安全"></a>一、浏览器安全</h2><h3 id="1-什么是-XSS-攻击？"><a href="#1-什么是-XSS-攻击？" class="headerlink" title="1. 什么是 XSS 攻击？"></a>1. 什么是 XSS 攻击？</h3><h4 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h4><p>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</p>
<p>XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</p>
<p>攻击者可以通过这种攻击方式可以进行以下操作：</p>
<ul>
<li>获取页面的数据，如DOM、cookie、localStorage；</li>
<li>DOS攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</li>
<li>破坏页面结构；</li>
<li>流量劫持（将链接指向某网站）；</li>
</ul>
<h4 id="（2）攻击类型"><a href="#（2）攻击类型" class="headerlink" title="（2）攻击类型"></a>（2）攻击类型</h4><p>XSS 可以分为存储型、反射型和 DOM 型：</p>
<ul>
<li>存储型指的是恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</li>
<li>反射型指的是攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成 XSS 攻击。</li>
<li>DOM 型指的通过修改页面的 DOM 节点形成的 XSS。</li>
</ul>
<p><strong>1）存储型</strong> <strong>XSS</strong> <strong>的攻击步骤：</strong></p>
<ol>
<li>攻击者将恶意代码提交到⽬标⽹站的数据库中。</li>
<li>⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>
<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>
<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>
</ol>
<p>这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</p>
<p><strong>2）反射型</strong> <strong>XSS</strong> <strong>的攻击步骤：</strong></p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>⽤户打开带有恶意代码的 URL 时，⽹站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。</li>
<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>
</ol>
<p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库⾥，反射型 XSS 的恶意代码存在 URL ⾥。</p>
<p>反射型 XSS 漏洞常⻅于通过 URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 URL 才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。</p>
<p><strong>3）DOM</strong> <strong>型</strong> <strong>XSS</strong> <strong>的攻击步骤：</strong></p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>⽤户打开带有恶意代码的 URL。</li>
<li>⽤户浏览器接收到响应后解析执⾏，前端 JavaScript 取出 URL 中的恶意代码并执⾏。</li>
<li>恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。</li>
</ol>
<p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript ⾃身的安全漏洞，⽽其他两种 XSS 都属于服务端的安全漏洞。</p>
<h3 id="2-如何防御-XSS-攻击？"><a href="#2-如何防御-XSS-攻击？" class="headerlink" title="2. 如何防御 XSS 攻击？"></a>2. 如何防御 XSS 攻击？</h3><p>可以看到XSS危害如此之大， 那么在开发网站时就要做好防御措施，具体措施如下：</p>
<ul>
<li><p>可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</p>
</li>
<li><p>使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</p>
<blockquote>
<ol>
<li>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</li>
<li>通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code></li>
</ol>
</blockquote>
</li>
<li><p>对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</p>
</li>
</ul>
<h3 id="3-什么是-CSRF-攻击？"><a href="#3-什么是-CSRF-攻击？" class="headerlink" title="3. 什么是 CSRF 攻击？"></a>3. 什么是 CSRF 攻击？</h3><h4 id="（1）概念-1"><a href="#（1）概念-1" class="headerlink" title="（1）概念"></a>（1）概念</h4><p>CSRF 攻击指的是<strong>跨站请求伪造攻击</strong>，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</p>
<p>CSRF 攻击的<strong>本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</strong></p>
<h4 id="（2）攻击类型-1"><a href="#（2）攻击类型-1" class="headerlink" title="（2）攻击类型"></a>（2）攻击类型</h4><p>常见的 CSRF 攻击有三种：</p>
<ul>
<li>GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。</li>
<li>POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</li>
<li>链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。</li>
</ul>
<h3 id="4-如何防御-CSRF-攻击？"><a href="#4-如何防御-CSRF-攻击？" class="headerlink" title="4. 如何防御 CSRF 攻击？"></a>4. 如何防御 CSRF 攻击？</h3><p><strong>CSRF 攻击可以使用以下方法来防护：</strong></p>
<ul>
<li><strong>进行同源检测</strong>，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（Referer 字段会告诉服务器该网页是从哪个页面链接过来的）</li>
<li><strong>使用 CSRF Token 进行验证</strong>，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</li>
<li><strong>对Cookie 进行双重验证</strong>，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</li>
<li><strong>在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用</strong>，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。</li>
</ul>
<h3 id="5-什么是中间人攻击？如何防范中间人攻击？"><a href="#5-什么是中间人攻击？如何防范中间人攻击？" class="headerlink" title="5. 什么是中间人攻击？如何防范中间人攻击？"></a>5. 什么是中间人攻击？如何防范中间人攻击？</h3><p>中间⼈ (Man-in-the-middle attack, MITM) 是指攻击者与通讯的两端分别创建独⽴的联系, 并交换其所收到的数据, 使通讯的两端认为他们正在通过⼀个私密的连接与对⽅直接对话, 但事实上整个会话都被攻击者完全控制。在中间⼈攻击中，攻击者可以拦截通讯双⽅的通话并插⼊新的内容。</p>
<p>攻击过程如下:</p>
<ul>
<li>客户端发送请求到服务端，请求被中间⼈截获</li>
<li>服务器向客户端发送公钥</li>
<li>中间⼈截获公钥，保留在⾃⼰⼿上。然后⾃⼰⽣成⼀个<strong>伪造的</strong>公钥，发给客户端</li>
<li>客户端收到伪造的公钥后，⽣成加密hash值发给服务器</li>
<li>中间⼈获得加密hash值，⽤⾃⼰的私钥解密获得真秘钥,同时⽣成假的加密hash值，发给服务器</li>
<li>服务器⽤私钥解密获得假密钥,然后加密数据传输给客户端</li>
</ul>
<h3 id="6-有哪些可能引起前端安全的问题"><a href="#6-有哪些可能引起前端安全的问题" class="headerlink" title="6. 有哪些可能引起前端安全的问题?"></a>6. 有哪些可能引起前端安全的问题?</h3><ul>
<li>跨站脚本 (Cross-Site Scripting, XSS): ⼀种代码注⼊⽅式, 为了与 CSS 区分所以被称作 XSS。早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯, 其注⼊⽅式很简单包括但不限于 JavaScript / CSS / Flash 等；</li>
<li>iframe的滥⽤: iframe中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在iframe中运⾏JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端⽤户体验；</li>
<li>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）: 指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击</li>
<li>恶意第三⽅库: ⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题。</li>
</ul>
<h3 id="7-网络劫持有哪几种，如何防范？"><a href="#7-网络劫持有哪几种，如何防范？" class="headerlink" title="7. 网络劫持有哪几种，如何防范？"></a>7. 网络劫持有哪几种，如何防范？</h3><p>⽹络劫持分为两种:</p>
<p>（1）<strong>DNS劫持</strong>: (输⼊京东被强制跳转到淘宝这就属于dns劫持)</p>
<ul>
<li>DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器</li>
<li>302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容</li>
</ul>
<p>（2）<strong>HTTP劫持</strong>: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)</p>
<p>DNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。</p>
<h2 id="二、进程与线程"><a href="#二、进程与线程" class="headerlink" title="二、进程与线程"></a>二、进程与线程</h2><h3 id="1-进程与线程的概念"><a href="#1-进程与线程的概念" class="headerlink" title="1. 进程与线程的概念"></a>1. 进程与线程的概念</h3><p>从本质上说，进程和线程都是 CPU 工作时间片的一个描述：</p>
<ul>
<li>进程描述了 CPU 在运行指令及加载和保存上下文所需的时间，放在应用上来说就代表了一个程序。</li>
<li>线程是进程中的更小单位，描述了执行一段指令所需的时间。</li>
</ul>
<p><strong>进程是资源分配的最小单位，线程是CPU调度的最小单位。</strong></p>
<p>一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫<strong>进程</strong>。<strong>进程是运行在虚拟内存上的，虚拟内存是用来解决用户对硬件资源的无限需求和有限的硬件资源之间的矛盾的。从操作系统角度来看，虚拟内存即交换文件；从处理器角度看，虚拟内存即虚拟地址空间。</strong></p>
<p>如果程序很多时，内存可能会不够，操作系统为每个进程提供一套独立的虚拟地址空间，从而使得同一块物理内存在不同的进程中可以对应到不同或相同的虚拟地址，变相的增加了程序可以使用的内存。</p>
<p>进程和线程之间的关系有以下四个特点：</p>
<p>（1）进程中的任意一线程执行出错，都会导致整个进程的崩溃。</p>
<p>（2）线程之间共享进程中的数据。</p>
<p>（3）当一个进程关闭之后，操作系统会回收进程所占用的内存，**当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</p>
<p>（4）进程之间的内容相互隔离。**进程隔离就是为了使操作系统中的进程互不干扰，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信的机制了。</p>
<p><strong>Chrome浏览器的架构图</strong>：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq2.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>从图中可以看出，最新的 Chrome 浏览器包括：</p>
<ul>
<li>1 个浏览器主进程</li>
<li>1 个 GPU 进程</li>
<li>1 个网络进程</li>
<li>多个渲染进程</li>
<li>多个插件进程</li>
</ul>
<p>这些进程的功能：</p>
<ul>
<li><strong>浏览器进程</strong>：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li>
<li><strong>渲染进程</strong>：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li>
<li><strong>GPU 进程</strong>：其实， GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li>
<li><strong>网络进程</strong>：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li>
<li><strong>插件进程</strong>：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li>
</ul>
<p>所以，<strong>打开一个网页，最少需要四个进程</strong>：1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程。如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</p>
<p>虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：</p>
<ul>
<li><strong>更高的资源占用</strong>：因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</li>
<li><strong>更复杂的体系架构</strong>：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</li>
</ul>
<h3 id="2-进程和线程的区别"><a href="#2-进程和线程的区别" class="headerlink" title="2. 进程和线程的区别"></a>2. 进程和线程的区别</h3><ul>
<li>进程可以看做独立应用，线程不能</li>
<li>资源：进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）；线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）。</li>
<li>通信方面：线程间可以通过直接共享同一进程中的资源，而进程通信需要借助 进程间通信。</li>
<li>调度：进程切换比线程切换的开销要大。线程是CPU调度的基本单位，线程的切换不会引起进程切换，但某个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>
<li>系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存、I/O 等，其开销远大于创建或撤销线程时的开销。同理，在进行进程切换时，涉及当前执行进程 CPU 环境还有各种各样状态的保存及新调度进程状态的设置，而线程切换时只需保存和设置少量寄存器内容，开销较小。</li>
</ul>
<h3 id="3-浏览器渲染进程的线程有哪些"><a href="#3-浏览器渲染进程的线程有哪些" class="headerlink" title="3. 浏览器渲染进程的线程有哪些"></a>3. 浏览器渲染进程的线程有哪些</h3><p>浏览器的渲染进程的线程总共有五种：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq3.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p><strong>（1）GUI渲染线程</strong></p>
<p>负责渲染浏览器页面，解析HTML、CSS，构建DOM树、构建CSSOM树、构建渲染树和绘制页面；当界面需要<strong>重绘</strong>或由于某种操作引发<strong>回流</strong>时，该线程就会执行。</p>
<p>注意：GUI渲染线程和JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</p>
<p><strong>（2）JS引擎线程</strong></p>
<p>JS引擎线程也称为JS内核，负责处理Javascript脚本程序，解析Javascript脚本，运行代码；JS引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个Tab页中无论什么时候都只有一个JS引擎线程在运行JS程序；</p>
<p>注意：GUI渲染线程与JS引擎线程的互斥关系，所以如果JS执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p>
<p><strong>（3）事件触发线程</strong></p>
<p><strong>事件触发线程</strong>属于浏览器而不是JS引擎，用来控制事件循环；当JS引擎执行代码块如setTimeOut时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理；</p>
<p>注意：由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）；</p>
<p><strong>（4）定时器触发进程</strong></p>
<p><strong>定时器触发进程</strong>即setInterval与setTimeout所在线程；浏览器定时计数器并不是由JS引擎计数的，因为JS引擎是单线程的，如果处于阻塞线程状态就会影响记计时的准确性；因此使用单独线程来计时并触发定时器，计时完毕后，添加到事件队列中，等待JS引擎空闲后执行，所以定时器中的任务在设定的时间点不一定能够准时执行，定时器只是在指定时间点将任务添加到事件队列中；</p>
<p>注意：W3C在HTML标准中规定，定时器的定时时间不能小于4ms，如果是小于4ms，则默认为4ms。</p>
<p><strong>（5）异步http请求线程</strong></p>
<ul>
<li>XMLHttpRequest连接后通过浏览器新开一个线程请求；</li>
<li>检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行；</li>
</ul>
<h3 id="4-进程之前的通信方式"><a href="#4-进程之前的通信方式" class="headerlink" title="4. 进程之前的通信方式"></a>4. 进程之前的通信方式</h3><p><strong>（1）管道通信</strong></p>
<p>管道是一种最基本的进程间通信机制。<strong>管道就是操作系统在内核中开辟的一段缓冲区，进程1可以将需要交互的数据拷贝到这段缓冲区，进程2就可以读取了。</strong></p>
<p>管道的特点：</p>
<ul>
<li>只能单向通信</li>
<li>只能血缘关系的进程进行通信</li>
<li>依赖于文件系统</li>
<li>生命周期随进程</li>
<li>面向字节流的服务</li>
<li>管道内部提供了同步机制</li>
</ul>
<p><strong>（2）消息队列通信</strong></p>
<p>消息队列就是一个消息的列表。用户可以在消息队列中添加消息、读取消息等。消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。 每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。</p>
<p>使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。</p>
<p><strong>（3）信号量通信</strong></p>
<p>共享内存最大的问题就是多进程竞争内存的问题，就像类似于线程安全问题。我们可以使用信号量来解决这个问题。信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是 1，然后 a 进程来访问内存1的时候，我们就把信号量的值设为 0，然后进程b 也要来访问内存1的时候，看到信号量的值为 0 就知道已经有进程在访问内存1了，这个时候进程 b 就会访问不了内存1。所以说，信号量也是进程之间的一种通信方式。</p>
<p><strong>（4）信号通信</strong></p>
<p>信号（Signals ）是Unix系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。</p>
<p><strong>（5）共享内存通信</strong></p>
<p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问（使多个进程可以访问同一块内存空间）。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</p>
<p><strong>（6）套接字通信</strong></p>
<p>上面我们说的共享内存、管道、信号量、消息队列，他们都是多个进程在一台主机之间的通信，那两个相隔几千里的进程能够进行通信吗？答是必须的，这个时候 Socket 这家伙就派上用场了，例如我们平时通过浏览器发起一个 http 请求，然后服务器给你返回对应的数据，这种就是采用 Socket 的通信方式了。</p>
<h3 id="5-僵尸进程和孤儿进程是什么？"><a href="#5-僵尸进程和孤儿进程是什么？" class="headerlink" title="5. 僵尸进程和孤儿进程是什么？"></a>5. 僵尸进程和孤儿进程是什么？</h3><ul>
<li><strong>孤儿进程</strong>：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</li>
<li><strong>僵尸进程</strong>：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。</li>
</ul>
<h3 id="6-死锁产生的原因？-如果解决死锁的问题？"><a href="#6-死锁产生的原因？-如果解决死锁的问题？" class="headerlink" title="6. 死锁产生的原因？ 如果解决死锁的问题？"></a>6. 死锁产生的原因？ 如果解决死锁的问题？</h3><p>所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</p>
<p>系统中的资源可以分为两类：</p>
<ul>
<li>可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，CPU和主存均属于可剥夺性资源；</li>
<li>不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</li>
</ul>
<p><strong>产生死锁的原因：</strong></p>
<p><strong>（1）竞争资源</strong></p>
<ul>
<li>产生死锁中的竞争资源之一指的是<strong>竞争不可剥夺资源</strong>（例如：系统中只有一台打印机，可供进程P1使用，假定P1已占用了打印机，若P2继续要求打印机打印将阻塞）</li>
<li>产生死锁中的竞争资源另外一种资源指的是<strong>竞争临时资源</strong>（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁</li>
</ul>
<p><strong>（2）进程间推进顺序非法</strong></p>
<p>若P1保持了资源R1，P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁</p>
<p><strong>产生死锁的必要条件：</strong></p>
<ul>
<li>互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</li>
<li>请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</li>
<li>环路等待条件：在发生死锁时，必然存在一个进程——资源的环形链。</li>
</ul>
<p><strong>预防死锁的方法：</strong></p>
<ul>
<li>资源一次性分配：一次性分配所有资源，这样就不会再有请求了（破坏请求条件）</li>
<li>只要有一个资源得不到分配，也不给这个进程分配其他的资源（破坏请保持条件）</li>
<li>可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）</li>
<li>资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）</li>
</ul>
<h3 id="7-如何实现浏览器内多个标签页之间的通信"><a href="#7-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="7. 如何实现浏览器内多个标签页之间的通信?"></a>7. 如何实现浏览器内多个标签页之间的通信?</h3><p>实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</p>
<ul>
<li><strong>使用 websocket 协议</strong>，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</li>
<li><strong>使用 ShareWorker 的方式</strong>，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</li>
<li><strong>使用 localStorage 的方式</strong>，我们可以在一个标签页对 localStorage 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage 对象就是充当的中介者的角色。</li>
<li><strong>使用 postMessage 方法</strong>，如果我们能够获得对应标签页的引用，就可以使用postMessage 方法，进行通信。</li>
</ul>
<h3 id="8-对Service-Worker的理解"><a href="#8-对Service-Worker的理解" class="headerlink" title="8. 对Service Worker的理解"></a>8. 对Service Worker的理解</h3><p>Service Worker 是运行在浏览器背后的<strong>独立线程</strong>，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 <strong>HTTPS</strong>。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。</p>
<p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index.js</span><br><span class="line">if (navigator.serviceWorker) &#123;</span><br><span class="line">  navigator.serviceWorker</span><br><span class="line">    .register(&#x27;sw.js&#x27;)</span><br><span class="line">    .then(function(registration) &#123;</span><br><span class="line">      console.log(&#x27;service worker 注册成功&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(err) &#123;</span><br><span class="line">      console.log(&#x27;servcie worker 注册失败&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// sw.js</span><br><span class="line">// 监听 `install` 事件，回调中缓存所需文件</span><br><span class="line">self.addEventListener(&#x27;install&#x27;, e =&gt; &#123;</span><br><span class="line">  e.waitUntil(</span><br><span class="line">    caches.open(&#x27;my-cache&#x27;).then(function(cache) &#123;</span><br><span class="line">      return cache.addAll([&#x27;./index.html&#x27;, &#x27;./index.js&#x27;])</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line">// 拦截所有请求事件</span><br><span class="line">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span><br><span class="line">self.addEventListener(&#x27;fetch&#x27;, e =&gt; &#123;</span><br><span class="line">  e.respondWith(</span><br><span class="line">    caches.match(e.request).then(function(response) &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        return response</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(&#x27;fetch source&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>打开页面，可以在开发者工具中的 <code>Application</code> 看到 Service Worker 已经启动了：</p>
<p>在 Cache 中也可以发现所需的文件已被缓存：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq4.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="三、浏览器缓存"><a href="#三、浏览器缓存" class="headerlink" title="三、浏览器缓存"></a>三、浏览器缓存</h2><h3 id="1-对浏览器的缓存机制的理解"><a href="#1-对浏览器的缓存机制的理解" class="headerlink" title="1. 对浏览器的缓存机制的理解"></a>1. 对浏览器的缓存机制的理解</h3><p><strong>浏览器缓存的全过程：</strong></p>
<ul>
<li>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</li>
<li>下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</li>
<li>如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</li>
<li>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</li>
<li>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq5.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>很多网站的资源后面都加了版本号，这样做的目的是：每次升级了 JS 或 CSS 文件后，为了防止浏览器进行缓存，强制改变版本号，客户端浏览器就会重新下载新的 JS 或 CSS 文件 ，以保证用户能够及时获得网站的最新更新。</p>
<h3 id="2-浏览器资源缓存的位置有哪些？"><a href="#2-浏览器资源缓存的位置有哪些？" class="headerlink" title="2. 浏览器资源缓存的位置有哪些？"></a>2. 浏览器资源缓存的位置有哪些？</h3><p>资源缓存的位置一共有 3 种，按优先级从高到低分别是：</p>
<ol>
<li><strong>Service Worker</strong>：<strong>Service Worker 运行在 JavaScript 主线程之外，虽然由于脱离了浏览器窗体无法直接访问 DOM，但是它可以完成离线缓存、消息推送、网络代理等功能。它可以让我们自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。当 Service Worker 没有命中缓存的时候，需要去调用 <code>fetch </code>函数获取 数据。也就是说，如果没有在 Service Worker 命中缓存，会根据缓存查找优先级去查找数据。<strong>但是不管是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示是从 Service Worker 中获取的内容。</strong></li>
<li><strong>Memory Cache</strong>：Memory Cache 就是内存缓存，它的效率最快，但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</li>
<li><strong>Disk Cache</strong>：Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></li>
</ol>
<p><strong>Disk Cache</strong>：Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。其具有以下特点：</p>
<ul>
<li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li>
<li>可以推送 <code>no-cache</code> 和 <code>no-store</code> 的资源</li>
<li>一旦连接被关闭，Push Cache 就被释放</li>
<li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li>
<li>Push Cache 中的缓存只能被使用一次</li>
<li>浏览器可以拒绝接受已经存在的资源推送</li>
<li>可以给其他域名推送资源</li>
</ul>
<h3 id="3-协商缓存和强缓存的区别"><a href="#3-协商缓存和强缓存的区别" class="headerlink" title="3. 协商缓存和强缓存的区别"></a>3. 协商缓存和强缓存的区别</h3><h4 id="（1）强缓存"><a href="#（1）强缓存" class="headerlink" title="（1）强缓存"></a>（1）强缓存</h4><p>使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。</p>
<p>强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。</p>
<p>（1）服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。</p>
<p>（2）Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，它提供了对资源的缓存的更精确的控制。它有很多不同的值，</p>
<p><code>Cache-Control</code>可设置的字段：</p>
<ul>
<li><code>public</code>：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age=来精确控制；</li>
<li><code>private</code>：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；</li>
<li><code>no-cache</code>：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；</li>
<li><code>no-store</code>：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；</li>
<li><code>max-age=</code>：设置缓存的最大有效期，单位为秒；</li>
<li><code>s-maxage=</code>：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；</li>
<li><code>max-stale[=]</code>：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。</li>
</ul>
<p>一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。</p>
<p><strong>no-cache和no-store很容易混淆：</strong></p>
<ul>
<li>no-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；</li>
<li>no-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。</li>
</ul>
<h4 id="（2）协商缓存"><a href="#（2）协商缓存" class="headerlink" title="（2）协商缓存"></a>（2）协商缓存</h4><p>如果命中强制缓存，我们无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。</p>
<p>上面已经说到了，命中协商缓存的条件有两个：</p>
<ul>
<li><code>max-age=xxx</code> 过期了</li>
<li>值为 <code>no-cache</code></li>
</ul>
<p>使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。</p>
<p>协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 <strong>Etag</strong> 和 <strong>Last-Modified</strong> 属性。</p>
<p>（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。</p>
<p>（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。</p>
<p>当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。</p>
<p><strong>总结：</strong></p>
<p>强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。</p>
<h3 id="4-为什么需要浏览器缓存？"><a href="#4-为什么需要浏览器缓存？" class="headerlink" title="4. 为什么需要浏览器缓存？"></a>4. 为什么需要浏览器缓存？</h3><p>对于浏览器的缓存，主要针对的是前端的静态资源，最好的效果就是，在发起请求之后，拉取相应的静态资源，并保存在本地。如果服务器的静态资源没有更新，那么在下次请求的时候，就直接从本地读取即可，如果服务器的静态资源已经更新，那么我们再次请求的时候，就到服务器拉取新的资源，并保存在本地。这样就大大的减少了请求的次数，提高了网站的性能。这就要用到浏览器的缓存策略了。</p>
<p>所谓的<strong>浏览器缓存</strong>指的是浏览器将用户请求过的静态资源，存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载，不需要再去服务端请求了。</p>
<p>使用浏览器缓存，有以下优点：</p>
<ul>
<li>减少了服务器的负担，提高了网站的性能</li>
<li>加快了客户端网页的加载速度</li>
<li>减少了多余网络数据传输</li>
</ul>
<h3 id="5-点击刷新按钮或者按-F5、按-Ctrl-F5-（强制刷新）、地址栏回车有什么区别？"><a href="#5-点击刷新按钮或者按-F5、按-Ctrl-F5-（强制刷新）、地址栏回车有什么区别？" class="headerlink" title="5. 点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？"></a>5. 点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</h3><ul>
<li>点击刷新按钮或者按 F5：浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是 304，也有可能是 200。</li>
<li>用户按 Ctrl+F5（强制刷新）：浏览器不仅会对本地文件过期，而且不会带上 If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。</li>
<li>地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。</li>
</ul>
<h2 id="四、浏览器组成"><a href="#四、浏览器组成" class="headerlink" title="四、浏览器组成"></a>四、浏览器组成</h2><h3 id="1-对浏览器的理解"><a href="#1-对浏览器的理解" class="headerlink" title="1. 对浏览器的理解"></a>1. 对浏览器的理解</h3><p>浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。</p>
<p>HTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web 标准的组织。但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。</p>
<p>浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。也有一些浏览器并不区分外壳和内核。从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。</p>
<ul>
<li>shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。</li>
<li>内核是浏览器的核心。内核是基于标记语言显示内容的程序或模块。</li>
</ul>
<h3 id="2-对浏览器内核的理解"><a href="#2-对浏览器内核的理解" class="headerlink" title="2. 对浏览器内核的理解"></a>2. 对浏览器内核的理解</h3><p>浏览器内核主要分成两部分：</p>
<ul>
<li>渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。</li>
<li>JS 引擎：解析和执行 javascript 来实现网页的动态效果。</li>
</ul>
<p>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</p>
<h3 id="3-常见的浏览器内核比较"><a href="#3-常见的浏览器内核比较" class="headerlink" title="3. 常见的浏览器内核比较"></a>3. 常见的浏览器内核比较</h3><ul>
<li><strong>Trident</strong>：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</li>
<li><strong>Gecko</strong>：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</li>
<li><strong>Presto</strong>：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</li>
<li><strong>Webkit</strong>：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</li>
<li><strong>Blink</strong>：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto 内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</li>
</ul>
<h3 id="4-常见浏览器所用内核"><a href="#4-常见浏览器所用内核" class="headerlink" title="4. 常见浏览器所用内核"></a>4. 常见浏览器所用内核</h3><p>（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</p>
<p>（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</p>
<p>（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</p>
<p>（4） Safari 浏览器内核：Webkit 内核；</p>
<p>（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</p>
<p>（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</p>
<p>（7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</p>
<p>（8） 百度浏览器、世界之窗内核：IE 内核；</p>
<p>（9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</p>
<p>（10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说是基于火狐内核。</p>
<h3 id="5-浏览器的主要组成部分"><a href="#5-浏览器的主要组成部分" class="headerlink" title="5. 浏览器的主要组成部分"></a>5. 浏览器的主要组成部分</h3><ul>
<li><strong>用户界面</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯。</li>
<li><strong>浏览器引擎</strong> - 在⽤户界⾯和呈现引擎之间传送指令。</li>
<li><strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>
<li>**网络 **- ⽤于⽹络调⽤，⽐如 HTTP 请求。其接⼝与平台⽆关，并为所有平台提供底层实现。</li>
<li><strong>用户界面后端</strong> - ⽤于绘制基本的窗⼝⼩部件，⽐如组合框和窗⼝。其公开了与平台⽆关的通⽤接⼝，⽽在底层使⽤操作系统的⽤户界⾯⽅法。</li>
<li><strong>JavaScript解释器</strong>。⽤于解析和执⾏ JavaScript 代码。</li>
<li><strong>数据存储</strong> - 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“⽹络数据库”，这是⼀个完整（但是轻便）的浏览器内数据库。</li>
</ul>
<p>值得注意的是，和⼤多数浏览器不同，Chrome 浏览器的每个标签⻚都分别对应⼀个呈现引擎实例。每个标签⻚都是⼀个独⽴的进程。</p>
<h2 id="五、浏览器渲染原理"><a href="#五、浏览器渲染原理" class="headerlink" title="五、浏览器渲染原理"></a>五、浏览器渲染原理</h2><h3 id="1-浏览器的渲染过程"><a href="#1-浏览器的渲染过程" class="headerlink" title="1. 浏览器的渲染过程"></a>1. 浏览器的渲染过程</h3><p>浏览器渲染主要有以下步骤：</p>
<ul>
<li>首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。</li>
<li>然后对 CSS 进行解析，生成 CSSOM 规则树。</li>
<li>根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</li>
<li>当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</li>
<li>布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。</li>
</ul>
<p>大致过程如图所示：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq6.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p><strong>注意</strong>：这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
<h3 id="2-浏览器渲染优化"><a href="#2-浏览器渲染优化" class="headerlink" title="2. 浏览器渲染优化"></a>2. 浏览器渲染优化</h3><p><strong>（1）针对JavaScript</strong>：JavaScript既会阻塞HTML的解析，也会阻塞CSS的解析。因此我们可以对JavaScript的加载方式进行改变，来进行优化：</p>
<p>（1）尽量将JavaScript文件放在body的最后</p>
<p>（2） body中间尽量不要写 <code>&lt;script&gt;</code>标签</p>
<p>（3）<code>&lt;script&gt;</code>标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用 async 属性和 defer 属性来异步引入，两者都是去异步加载外部的JS文件，不会阻塞DOM的解析（尽量使用异步加载）。三者的区别如下：</p>
<ul>
<li>**script **立即停止页面渲染去加载资源文件，当资源加载完毕后立即执行js代码，js代码执行完毕后继续渲染页面；</li>
<li>**async **是在下载完成之后，立即异步加载，加载好后立即执行，多个带async属性的标签，不能保证加载的顺序；</li>
<li>**defer **是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM 树解析好再执行；如果DOM树已经准备好，则立即执行。多个带defer属性的标签，按照顺序执行。</li>
</ul>
<p><strong>（2）针对CSS：使用CSS有三种方式：使用link、@import、内联样式</strong>，其中link和@import都是导入外部样式。它们之间的区别：</p>
<ul>
<li><strong>link</strong>：浏览器会派发一个新等线程(HTTP线程)去加载资源文件，与此同时GUI渲染线程会继续向下渲染代码</li>
<li><strong>@import</strong>：GUI渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)</li>
<li><strong>style</strong>：GUI直接渲染</li>
</ul>
<p>外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在headr中，让浏览器尽快发送请求去获取css样式。</p>
<p>所以，在开发过程中，导入外部样式使用link，而不用@import。如果css少，尽可能采用内嵌样式，直接写在style标签中。</p>
<p><strong>（3）针对DOM树、CSSOM树：</strong></p>
<p>可以通过以下几种方式来减少渲染的时间：</p>
<ul>
<li>HTML文件的代码层级尽量不要太深</li>
<li>使用语义化的标签，来避免不标准语义化的特殊处理</li>
<li>减少CSSD代码的层级，因为选择器是从右向左进行解析的</li>
</ul>
<p><strong>（4）减少回流与重绘：</strong></p>
<ul>
<li>操作DOM时，尽量在低层级的DOM节点进行操作</li>
<li>不要使用 <code>table</code>布局， 一个小的改动可能会使整个 <code>table</code>进行重新布局</li>
<li>使用CSS的表达式</li>
<li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li>
<li>使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</li>
<li>避免频繁操作DOM，可以创建一个文档片段 <code>documentFragment</code>，在它上面应用所有DOM操作，最后再把它添加到文档中</li>
<li>将元素先设置 <code>display: none</code>，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</li>
<li>将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于<strong>浏览器的渲染队列机制</strong>。</li>
</ul>
<p>浏览器针对页面的回流与重绘，进行了自身的优化——<strong>渲染队列</strong></p>
<p><strong>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</strong></p>
<p>将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>
<h3 id="3-渲染过程中遇到-JS-文件如何处理？"><a href="#3-渲染过程中遇到-JS-文件如何处理？" class="headerlink" title="3. 渲染过程中遇到 JS 文件如何处理？"></a>3. 渲染过程中遇到 JS 文件如何处理？</h3><p>JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。也就是说，如果想要首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</p>
<h3 id="4-什么是文档的预解析？"><a href="#4-什么是文档的预解析？" class="headerlink" title="4. 什么是文档的预解析？"></a>4. 什么是文档的预解析？</h3><p>Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。</p>
<h3 id="5-CSS-如何阻塞文档解析？"><a href="#5-CSS-如何阻塞文档解析？" class="headerlink" title="5. CSS 如何阻塞文档解析？"></a>5. CSS 如何阻塞文档解析？</h3><p>理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们。然而，存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。</p>
<h3 id="6-如何优化关键渲染路径？"><a href="#6-如何优化关键渲染路径？" class="headerlink" title="6. 如何优化关键渲染路径？"></a>6. 如何优化关键渲染路径？</h3><p>为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：</p>
<p>（1）关键资源的数量。</p>
<p>（2）关键路径长度。</p>
<p>（3）关键字节的数量。</p>
<p>关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。</p>
<p>优化关键渲染路径的常规步骤如下：</p>
<p>（1）对关键路径进行分析和特性描述：资源数、字节数、长度。</p>
<p>（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。</p>
<p>（3）优化关键字节数以缩短下载时间（往返次数）。</p>
<p>（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度</p>
<h3 id="7-什么情况会阻塞渲染？"><a href="#7-什么情况会阻塞渲染？" class="headerlink" title="7. 什么情况会阻塞渲染？"></a>7. 什么情况会阻塞渲染？</h3><p>首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。然后当浏览器在解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。</p>
<p>当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。当 script 标签加上 defer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script 标签放在任意位置。对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。</p>
<h2 id="六、浏览器本地存储"><a href="#六、浏览器本地存储" class="headerlink" title="六、浏览器本地存储"></a>六、浏览器本地存储</h2><h3 id="1-浏览器本地存储方式及使用场景"><a href="#1-浏览器本地存储方式及使用场景" class="headerlink" title="1. 浏览器本地存储方式及使用场景"></a>1. 浏览器本地存储方式及使用场景</h3><h4 id="（1）Cookie"><a href="#（1）Cookie" class="headerlink" title="（1）Cookie"></a>（1）Cookie</h4><p>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie。</p>
<p><strong>Cookie的特性：</strong></p>
<ul>
<li>Cookie一旦创建成功，名称就无法修改</li>
<li>Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie</li>
<li>每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb</li>
<li>有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的</li>
<li>Cookie在请求一个新的页面的时候都会被发送过去</li>
</ul>
<p>如果需要域名之间跨域共享Cookie，有两种方法：</p>
<ol>
<li>使用Nginx反向代理</li>
<li>在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId</li>
</ol>
<p><strong>Cookie的使用场景：</strong></p>
<ul>
<li>最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。</li>
<li>可以用来统计页面的点击次数</li>
</ul>
<h4 id="（2）LocalStorage"><a href="#（2）LocalStorage" class="headerlink" title="（2）LocalStorage"></a>（2）LocalStorage</h4><p>LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</p>
<p><strong>LocalStorage的优点：</strong></p>
<ul>
<li>在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息</li>
<li>LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li>
<li>仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</li>
</ul>
<p><strong>LocalStorage的缺点：</strong></p>
<ul>
<li>存在浏览器兼容问题，IE8以下版本的浏览器不支持</li>
<li>如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage</li>
<li>LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li>
</ul>
<p><strong>LocalStorage的常用API：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 保存数据到 localStorage</span><br><span class="line">localStorage.setItem(&#x27;key&#x27;, &#x27;value&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 localStorage 获取数据</span><br><span class="line">let data = localStorage.getItem(&#x27;key&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 localStorage 删除保存的数据</span><br><span class="line">localStorage.removeItem(&#x27;key&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 localStorage 删除所有保存的数据</span><br><span class="line">localStorage.clear();</span><br><span class="line"></span><br><span class="line">// 获取某个索引的Key</span><br><span class="line">localStorage.key(index)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>LocalStorage的使用场景：</strong></p>
<ul>
<li>有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可</li>
<li>在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中</li>
</ul>
<h4 id="（3）SessionStorage"><a href="#（3）SessionStorage" class="headerlink" title="（3）SessionStorage"></a>（3）SessionStorage</h4><p>SessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p>
<p><strong>SessionStorage与LocalStorage对比：</strong></p>
<ul>
<li>SessionStorage和LocalStorage都在<strong>本地进行数据存储</strong>；</li>
<li>SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage<strong>只有在同一浏览器的同一窗口下才能够共享</strong>；</li>
<li>LocalStorage和SessionStorage<strong>都不能被爬虫爬取</strong>；</li>
</ul>
<p><strong>SessionStorage的常用API：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 保存数据到 sessionStorage</span><br><span class="line">sessionStorage.setItem(&#x27;key&#x27;, &#x27;value&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 sessionStorage 获取数据</span><br><span class="line">let data = sessionStorage.getItem(&#x27;key&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 sessionStorage 删除保存的数据</span><br><span class="line">sessionStorage.removeItem(&#x27;key&#x27;);</span><br><span class="line"></span><br><span class="line">// 从 sessionStorage 删除所有保存的数据</span><br><span class="line">sessionStorage.clear();</span><br><span class="line"></span><br><span class="line">// 获取某个索引的Key</span><br><span class="line">sessionStorage.key(index)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>SessionStorage的使用场景</strong></p>
<ul>
<li>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</li>
</ul>
<h3 id="2-Cookie有哪些字段，作用分别是什么"><a href="#2-Cookie有哪些字段，作用分别是什么" class="headerlink" title="2. Cookie有哪些字段，作用分别是什么"></a>2. Cookie有哪些字段，作用分别是什么</h3><p><strong>Cookie由以下字段组成：</strong></p>
<ul>
<li><strong>Name</strong>：cookie的名称</li>
<li><strong>Value</strong>：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌；</li>
<li><strong>Size</strong>： cookie的大小</li>
<li><strong>Path</strong>：可以访问此cookie的页面路径。 比如domain是abc.com，path是 <code>/test</code>，那么只有 <code>/test</code>路径下的页面可以读取此cookie。</li>
<li><strong>Secure</strong>： 指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。</li>
<li><strong>Domain</strong>：可以访问该cookie的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的 Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。</li>
<li><strong>HTTP</strong>： 该字段包含 <code>HTTPOnly </code>属性 ，该属性用来设置cookie能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，这种类型的cookie只能通过服务端来设置。该属性用于防止客户端脚本通过 <code>document.cookie</code>属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。</li>
<li><strong>Expires/Max-size</strong> ： 此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</li>
</ul>
<p><strong>总结：</strong></p>
<p>服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。</p>
<h3 id="3-Cookie、LocalStorage、SessionStorage区别"><a href="#3-Cookie、LocalStorage、SessionStorage区别" class="headerlink" title="3. Cookie、LocalStorage、SessionStorage区别"></a>3. Cookie、LocalStorage、SessionStorage区别</h3><p>浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。</p>
<ul>
<li><strong>cookie</strong>：其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</li>
<li><strong>sessionStorage</strong>：html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。</li>
<li><strong>localStorage</strong>：html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</li>
</ul>
<p>上面几种方式都是存储少量数据的时候的存储方式，当需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB 这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。</p>
<h3 id="4-前端储存的⽅式有哪些？"><a href="#4-前端储存的⽅式有哪些？" class="headerlink" title="4. 前端储存的⽅式有哪些？"></a>4. 前端储存的⽅式有哪些？</h3><ul>
<li>cookies： 在HTML5标准前本地储存的主要⽅式，优点是兼容性好，请求头⾃带cookie⽅便，缺点是⼤⼩只有4k，⾃动请求头加⼊cookie浪费流量，每个domain限制20个cookie，使⽤起来麻烦，需要⾃⾏封装；</li>
<li>localStorage：HTML5加⼊的以键值对(Key-Value)为标准的⽅式，优点是操作⽅便，永久性储存（除⾮⼿动删除），⼤⼩为5M，兼容IE8+ ；</li>
<li>sessionStorage：与localStorage基本类似，区别是sessionStorage当⻚⾯关闭后会被清理，⽽且与cookie、localStorage不同，他不能在所有同源窗⼝中共享，是会话级别的储存⽅式；</li>
<li>Web SQL：2010年被W3C废弃的本地数据库数据存储⽅案，但是主流浏览器（⽕狐除外）都已经有了相关的实现，web sql类似于SQLite，是真正意义上的关系型数据库，⽤sql进⾏操作，当我们⽤JavaScript时要进⾏转换，较为繁琐；</li>
<li>IndexedDB： 是被正式纳⼊HTML5标准的数据库储存⽅案，它是NoSQL数据库，⽤键值对进⾏储存，可以进⾏快速读取操作，⾮常适合web场景，同时⽤JavaScript进⾏操作会⾮常便。</li>
</ul>
<h3 id="5-IndexedDB有哪些特点？"><a href="#5-IndexedDB有哪些特点？" class="headerlink" title="5. IndexedDB有哪些特点？"></a>5. IndexedDB有哪些特点？</h3><p>IndexedDB 具有以下特点：</p>
<ul>
<li><strong>键值对储存</strong>：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。</li>
<li><strong>异步</strong>：IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。</li>
<li><strong>支持事务</strong>：IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</li>
<li><strong>同源限制</strong>：IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</li>
<li><strong>储存空间大</strong>：IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</li>
<li><strong>支持二进制储存</strong>：IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</li>
</ul>
<h2 id="七、浏览器同源策略"><a href="#七、浏览器同源策略" class="headerlink" title="七、浏览器同源策略"></a>七、浏览器同源策略</h2><h3 id="1-什么是同源策略"><a href="#1-什么是同源策略" class="headerlink" title="1. 什么是同源策略"></a>1. 什么是同源策略</h3><p>跨域问题其实就是浏览器的同源策略造成的。</p>
<blockquote>
<p>同源策略限制了从同一个源加载的文档或脚本如何与另一个源的资源进行交互。这是浏览器的一个用于隔离潜在恶意文件的重要的安全机制。同源指的是：<strong>协议</strong>、<strong>端口号</strong>、<strong>域名</strong>必须一致。</p>
</blockquote>
<p>下表给出了与 URL <code>**http://store.company.com/dir/page.html**</code> 的源进行对比的示例:</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>是否跨域</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><a class="link"   href="http://store.company.com/dir/page.html" >http://store.company.com/dir/page.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>同源</td>
<td>完全相同</td>
</tr>
<tr>
<td><a class="link"   href="http://store.company.com/dir/inner/another.html" >http://store.company.com/dir/inner/another.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>同源</td>
<td>只有路径不同</td>
</tr>
<tr>
<td><a class="link"   href="https://store.company.com/secure.html" >https://store.company.com/secure.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>跨域</td>
<td>协议不同</td>
</tr>
<tr>
<td><a class="link"   href="http://store.company.com:81/dir/etc.html" >http://store.company.com:81/dir/etc.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>跨域</td>
<td>端口不同 ( http:// 默认端口是80)</td>
</tr>
<tr>
<td><a class="link"   href="http://news.company.com/dir/other.html" >http://news.company.com/dir/other.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></td>
<td>跨域</td>
<td>主机不同</td>
</tr>
</tbody></table>
<p><strong>同源策略：protocol（协议）、domain（域名）、port（端口）三者必须一致。</strong></p>
<p><strong>同源政策主要限制了三个方面：</strong></p>
<ul>
<li>当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。</li>
<li>当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。</li>
<li>当前域下 ajax 无法发送跨域请求。</li>
</ul>
<p>同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者script 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。</p>
<h3 id="2-如何解决跨越问题"><a href="#2-如何解决跨越问题" class="headerlink" title="2. 如何解决跨越问题"></a>2. 如何解决跨越问题</h3><h4 id="（1）CORS"><a href="#（1）CORS" class="headerlink" title="（1）CORS"></a>（1）CORS</h4><p>下面是MDN对于CORS的定义：</p>
<blockquote>
<p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain)上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP 请求。</p>
</blockquote>
<p>CORS需要浏览器和服务器同时支持，整个CORS过程都是浏览器完成的，无需用户参与。因此实现<strong>CORS的关键就是服务器，只要服务器实现了CORS请求</strong>，就可以跨源通信了。</p>
<p>浏览器将CORS分为<strong>简单请求</strong>和<strong>非简单请求</strong>：</p>
<p>简单请求不会触发CORS预检请求。若该请求满足以下两个条件，就可以看作是简单请求：</p>
<p><strong>1）请求方法是以下三种方法之一：</strong></p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p><strong>2）HTTP的头信息不超出以下几种字段：</strong></p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>
</ul>
<p>若不满足以上条件，就属于非简单请求了。</p>
<p><strong>（1）简单请求过程：</strong></p>
<p>对于简单请求，浏览器会直接发出CORS请求，它会在请求的头信息中增加一个Orign字段，该字段用来说明本次请求来自哪个源（协议+端口+域名），服务器会根据这个值来决定是否同意这次请求。如果Orign指定的域名在许可范围之内，服务器返回的响应就会多出以下信息头：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com  // 和Orign一直</span><br><span class="line">Access-Control-Allow-Credentials: true   // 表示是否允许发送Cookie</span><br><span class="line">Access-Control-Expose-Headers: FooBar   // 指定返回其他字段的值</span><br><span class="line">Content-Type: text/html; charset=utf-8   // 表示文档类型</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果Orign指定的域名不在许可范围之内，服务器会返回一个正常的HTTP回应，浏览器发现没有上面的Access-Control-Allow-Origin头部信息，就知道出错了。这个错误无法通过状态码识别，因为返回的状态码可能是200。</p>
<p><strong>在简单请求中，在服务器内，至少需要设置字段：</strong><code>Access-Control-Allow-Origin</code></p>
<p><strong>（2）非简单请求过程</strong></p>
<p>非简单请求是对服务器有特殊要求的请求，比如请求方法为DELETE或者PUT等。非简单请求的CORS请求会在正式通信之前进行一次HTTP查询请求，<strong>称为预检请求</strong>。</p>
<p>浏览器会询问服务器，当前所在的网页是否在服务器允许访问的范围内，以及可以使用哪些HTTP请求方式和头信息字段，只有得到肯定的回复，才会进行正式的HTTP请求，否则就会报错。</p>
<p>预检请求使用的<strong>请求方法是OPTIONS</strong>，表示这个请求是来询问的。他的头信息中的关键字段是Orign，表示请求来自哪个源。除此之外，头信息中还包括两个字段：</p>
<ul>
<li><strong>Access-Control-Request-Method</strong>：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。</li>
<li><strong>Access-Control-Request-Headers</strong>： 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。</li>
</ul>
<p>服务器在收到浏览器的预检请求之后，会根据头信息的三个字段来进行判断，如果返回的头信息在中有Access-Control-Allow-Origin这个字段就是允许跨域请求，如果没有，就是不同意这个预检请求，就会报错。</p>
<p>服务器回应的CORS的字段如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com  // 允许跨域的源地址</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT // 服务器支持的所有跨域请求的方法</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header  // 服务器支持的所有头信息字段</span><br><span class="line">Access-Control-Allow-Credentials: true   // 表示是否允许发送Cookie</span><br><span class="line">Access-Control-Max-Age: 1728000  // 用来指定本次预检请求的有效期，单位为秒</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>只要服务器通过了预检请求，在以后每次的CORS请求都会自带一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p>
<p><strong>在非简单请求中，至少需要设置以下字段：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;Access-Control-Allow-Origin&#x27;  </span><br><span class="line">&#x27;Access-Control-Allow-Methods&#x27;</span><br><span class="line">&#x27;Access-Control-Allow-Headers&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h5 id="减少OPTIONS请求次数："><a href="#减少OPTIONS请求次数：" class="headerlink" title="减少OPTIONS请求次数："></a>减少OPTIONS请求次数：</h5><p>OPTIONS请求次数过多就会损耗页面加载的性能，降低用户体验度。所以尽量要减少OPTIONS请求次数，可以后端在请求的返回头部添加：Access-Control-Max-Age：number。它表示预检请求的返回结果可以被缓存多久，单位是秒。该字段只对完全一样的URL的缓存设置生效，所以设置了缓存时间，在这个时间范围内，再次发送请求就不需要进行预检请求了。</p>
<h5 id="CORS中Cookie相关问题："><a href="#CORS中Cookie相关问题：" class="headerlink" title="CORS中Cookie相关问题："></a>CORS中Cookie相关问题：</h5><p>在CORS请求中，如果想要传递Cookie，就要满足以下三个条件：</p>
<ul>
<li>在请求中设置<code>withCredentials</code></li>
</ul>
<p>默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 withCredentials 来进行传递 cookie.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 原生 xml 的设置方式</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">// axios 设置方式</span><br><span class="line">axios.defaults.withCredentials = true;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>Access-Control-Allow-Credentials</strong> 设置为 <code>true</code></li>
<li><strong>Access-Control-Allow-Origin</strong> 设置为 <code>false</code></li>
</ul>
<h4 id="（2）JSONP"><a href="#（2）JSONP" class="headerlink" title="（2）JSONP"></a>（2）JSONP</h4><p><strong>jsonp</strong>的原理就是利用 <code>&lt;script&gt;</code>标签没有跨域限制，通过 <code>&lt;script&gt;</code>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p>
<p>1）原生JS实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">    script.type = &#x27;text/javascript&#x27;;</span><br><span class="line">    // 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span><br><span class="line">    script.src = &#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;;</span><br><span class="line">    document.head.appendChild(script);</span><br><span class="line">    // 回调执行函数</span><br><span class="line">    function handleCallback(res) &#123;</span><br><span class="line">        alert(JSON.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>服务端返回如下（返回时即执行全局函数）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">handleCallback(&#123;&quot;success&quot;: true, &quot;user&quot;: &quot;admin&quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）Vue axios实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$http = axios;</span><br><span class="line">this.$http.jsonp(&#x27;http://www.domain2.com:8080/login&#x27;, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: &#x27;handleCallback&#x27;</span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line">    console.log(res); </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>后端node.js代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">var server = http.createServer();</span><br><span class="line">server.on(&#x27;request&#x27;, function(req, res) &#123;</span><br><span class="line">    var params = querystring.parse(req.url.split(&#x27;?&#x27;)[1]);</span><br><span class="line">    var fn = params.callback;</span><br><span class="line">    // jsonp返回设置</span><br><span class="line">    res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27; &#125;);</span><br><span class="line">    res.write(fn + &#x27;(&#x27; + JSON.stringify(params) + &#x27;)&#x27;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(&#x27;8080&#x27;);</span><br><span class="line">console.log(&#x27;Server is running at port 8080...&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>JSONP的缺点：</strong></p>
<ul>
<li>具有局限性， 仅支持get方法</li>
<li>不安全，可能会遭受XSS攻击</li>
</ul>
<h4 id="（3）postMessage-跨域"><a href="#（3）postMessage-跨域" class="headerlink" title="（3）postMessage 跨域"></a>（3）postMessage 跨域</h4><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>
<ul>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的iframe消息传递</li>
<li>上面三个场景的跨域数据传递</li>
</ul>
<p>用法：postMessage(data,origin)方法接受两个参数：</p>
<ul>
<li><strong>data</strong>： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li>
<li><strong>origin</strong>： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</li>
</ul>
<p>1）a.html：(domain1.com/a.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot;  style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;     </span><br><span class="line">    var iframe = document.getElementById(&#x27;iframe&#x27;);</span><br><span class="line">    iframe.onload = function() &#123;</span><br><span class="line">        var data = &#123;</span><br><span class="line">            name: &#x27;aym&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 向domain2传送跨域数据</span><br><span class="line">        iframe.contentWindow.postMessage(JSON.stringify(data), &#x27;http://www.domain2.com&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">    // 接受domain2返回数据</span><br><span class="line">    window.addEventListener(&#x27;message&#x27;, function(e) &#123;</span><br><span class="line">        alert(&#x27;data from domain2 ---&gt; &#x27; + e.data);</span><br><span class="line">    &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）b.html：(domain2.com/b.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 接收domain1的数据</span><br><span class="line">    window.addEventListener(&#x27;message&#x27;, function(e) &#123;</span><br><span class="line">        alert(&#x27;data from domain1 ---&gt; &#x27; + e.data);</span><br><span class="line">        var data = JSON.parse(e.data);</span><br><span class="line">        if (data) &#123;</span><br><span class="line">            data.number = 16;</span><br><span class="line">            // 处理后再发回domain1</span><br><span class="line">            window.parent.postMessage(JSON.stringify(data), &#x27;http://www.domain1.com&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（4）nginx代理跨域"><a href="#（4）nginx代理跨域" class="headerlink" title="（4）nginx代理跨域"></a>（4）nginx代理跨域</h4><p>nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</p>
<p>1）nginx配置解决iconfont跨域</p>
<p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）nginx反向代理接口跨域</p>
<p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</p>
<p>实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。</p>
<p>nginx具体配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  #反向代理</span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（5）nodejs-中间件代理跨域"><a href="#（5）nodejs-中间件代理跨域" class="headerlink" title="（5）nodejs 中间件代理跨域"></a>（5）nodejs 中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p>
<p><strong>1）非vue框架的跨域</strong></p>
<p>使用node + express + http-proxy-middleware搭建一个proxy服务器。</p>
<ul>
<li>前端代码：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">// 前端开关：浏览器是否读写cookie</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">// 访问http-proxy-middleware代理服务器</span><br><span class="line">xhr.open(&#x27;get&#x27;, &#x27;http://www.domain1.com:3000/login?user=admin&#x27;, true);</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>中间件服务器代码：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var proxy = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class="line">var app = express();</span><br><span class="line">app.use(&#x27;/&#x27;, proxy(&#123;</span><br><span class="line">    // 代理跨域目标接口</span><br><span class="line">    target: &#x27;http://www.domain2.com:8080&#x27;,</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    // 修改响应头信息，实现跨域并允许带cookie</span><br><span class="line">    onProxyRes: function(proxyRes, req, res) &#123;</span><br><span class="line">        res.header(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;http://www.domain1.com&#x27;);</span><br><span class="line">        res.header(&#x27;Access-Control-Allow-Credentials&#x27;, &#x27;true&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改响应信息中的cookie域名</span><br><span class="line">    cookieDomainRewrite: &#x27;www.domain1.com&#x27;  // 可以为false，表示不修改</span><br><span class="line">&#125;));</span><br><span class="line">app.listen(3000);</span><br><span class="line">console.log(&#x27;Proxy server is listen at port 3000...&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>2）vue框架的跨域</strong></p>
<p>node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。</p>
<p>webpack.config.js部分配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    module: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: true,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: &#x27;/login&#x27;,</span><br><span class="line">            target: &#x27;http://www.domain2.com:8080&#x27;,  // 代理跨域目标接口</span><br><span class="line">            changeOrigin: true,</span><br><span class="line">            secure: false,  // 当代理某些https服务报错时用</span><br><span class="line">            cookieDomainRewrite: &#x27;www.domain1.com&#x27;  // 可以为false，表示不修改</span><br><span class="line">        &#125;],</span><br><span class="line">        noInfo: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（6）document-domain-iframe跨域"><a href="#（6）document-domain-iframe跨域" class="headerlink" title="（6）document.domain + iframe跨域"></a>（6）document.domain + iframe跨域</h4><p>此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>
<p>1）父窗口：(domain.com/a.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://child.domain.com/b.html&quot; rel=&quot;external nofollow&quot; &gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain = &#x27;domain.com&#x27;;</span><br><span class="line">    var user = &#x27;admin&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）子窗口：(child.domain.com/a.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain = &#x27;domain.com&#x27;;</span><br><span class="line">    // 获取父窗口中变量</span><br><span class="line">    console.log(&#x27;get js data from parent ---&gt; &#x27; + window.parent.user);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（7）location-hash-iframe跨域"><a href="#（7）location-hash-iframe跨域" class="headerlink" title="（7）location.hash + iframe跨域"></a>（7）location.hash + iframe跨域</h4><p>实现原理：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>
<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>
<p>1）a.html：(domain1.com/a.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; rel=&quot;external nofollow&quot;  rel=&quot;external nofollow&quot;  style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var iframe = document.getElementById(&#x27;iframe&#x27;);</span><br><span class="line">    // 向b.html传hash值</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        iframe.src = iframe.src + &#x27;#user=admin&#x27;;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  </span><br><span class="line">    // 开放给同域c.html的回调方法</span><br><span class="line">    function onCallback(res) &#123;</span><br><span class="line">        alert(&#x27;data from c.html ---&gt; &#x27; + res);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）b.html：(.domain2.com/b.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain1.com/c.html&quot; rel=&quot;external nofollow&quot;  style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var iframe = document.getElementById(&#x27;iframe&#x27;);</span><br><span class="line">    // 监听a.html传来的hash值，再传给c.html</span><br><span class="line">    window.onhashchange = function () &#123;</span><br><span class="line">        iframe.src = iframe.src + location.hash;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>3）c.html：(<code>http://www.domain1.com/c.html</code>)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 监听b.html传来的hash值</span><br><span class="line">    window.onhashchange = function () &#123;</span><br><span class="line">        // 再通过操作同域a.html的js回调，将结果传回</span><br><span class="line">        window.parent.parent.onCallback(&#x27;hello: &#x27; + location.hash.replace(&#x27;#user=&#x27;, &#x27;&#x27;));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（8）window-name-iframe跨域"><a href="#（8）window-name-iframe跨域" class="headerlink" title="（8）window.name + iframe跨域"></a>（8）window.name + iframe跨域</h4><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>
<p>1）a.html：(domain1.com/a.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var proxy = function(url, callback) &#123;</span><br><span class="line">    var state = 0;</span><br><span class="line">    var iframe = document.createElement(&#x27;iframe&#x27;);</span><br><span class="line">    // 加载跨域页面</span><br><span class="line">    iframe.src = url;</span><br><span class="line">    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span><br><span class="line">    iframe.onload = function() &#123;</span><br><span class="line">        if (state === 1) &#123;</span><br><span class="line">            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span><br><span class="line">            callback(iframe.contentWindow.name);</span><br><span class="line">            destoryFrame();</span><br><span class="line">        &#125; else if (state === 0) &#123;</span><br><span class="line">            // 第1次onload(跨域页)成功后，切换到同域代理页面</span><br><span class="line">            iframe.contentWindow.location = &#x27;http://www.domain1.com/proxy.html&#x27;;</span><br><span class="line">            state = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    document.body.appendChild(iframe);</span><br><span class="line">    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span><br><span class="line">    function destoryFrame() &#123;</span><br><span class="line">        iframe.contentWindow.document.write(&#x27;&#x27;);</span><br><span class="line">        iframe.contentWindow.close();</span><br><span class="line">        document.body.removeChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 请求跨域b页面数据</span><br><span class="line">proxy(&#x27;http://www.domain2.com/b.html&#x27;, function(data)&#123;</span><br><span class="line">    alert(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）proxy.html：(domain1.com/proxy.html)</p>
<p>中间代理页，与a.html同域，内容为空即可。</p>
<p>3）b.html：(domain2.com/b.html)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.name = &#x27;This is domain2 data!&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>
<h4 id="（9）WebSocket协议跨域"><a href="#（9）WebSocket协议跨域" class="headerlink" title="（9）WebSocket协议跨域"></a>（9）WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p>
<p>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>
<p>1）前端代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot; rel=&quot;external nofollow&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var socket = io(&#x27;http://www.domain2.com:8080&#x27;);</span><br><span class="line">// 连接成功处理</span><br><span class="line">socket.on(&#x27;connect&#x27;, function() &#123;</span><br><span class="line">    // 监听服务端消息</span><br><span class="line">    socket.on(&#x27;message&#x27;, function(msg) &#123;</span><br><span class="line">        console.log(&#x27;data from server: ---&gt; &#x27; + msg); </span><br><span class="line">    &#125;);</span><br><span class="line">    // 监听服务端关闭</span><br><span class="line">    socket.on(&#x27;disconnect&#x27;, function() &#123; </span><br><span class="line">        console.log(&#x27;Server socket has closed.&#x27;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">document.getElementsByTagName(&#x27;input&#x27;)[0].onblur = function() &#123;</span><br><span class="line">    socket.send(this.value);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）Nodejs socket后台：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">var socket = require(&#x27;socket.io&#x27;);</span><br><span class="line">// 启http服务</span><br><span class="line">var server = http.createServer(function(req, res) &#123;</span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">        &#x27;Content-type&#x27;: &#x27;text/html&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(&#x27;8080&#x27;);</span><br><span class="line">console.log(&#x27;Server is running at port 8080...&#x27;);</span><br><span class="line">// 监听socket连接</span><br><span class="line">socket.listen(server).on(&#x27;connection&#x27;, function(client) &#123;</span><br><span class="line">    // 接收信息</span><br><span class="line">    client.on(&#x27;message&#x27;, function(msg) &#123;</span><br><span class="line">        client.send(&#x27;hello：&#x27; + msg);</span><br><span class="line">        console.log(&#x27;data from client: ---&gt; &#x27; + msg);</span><br><span class="line">    &#125;);</span><br><span class="line">    // 断开处理</span><br><span class="line">    client.on(&#x27;disconnect&#x27;, function() &#123;</span><br><span class="line">        console.log(&#x27;Client socket has closed.&#x27;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-正向代理和反向代理的区别"><a href="#3-正向代理和反向代理的区别" class="headerlink" title="3. 正向代理和反向代理的区别"></a>3. 正向代理和反向代理的区别</h3><ul>
<li>正向代理：</li>
</ul>
<p>客户端想获得一个服务器的数据，但是因为种种原因无法直接获取。于是客户端设置了一个代理服务器，并且指定目标服务器，之后代理服务器向目标服务器转交请求并将获得的内容发送给客户端。这样本质上起到了对真实服务器隐藏真实客户端的目的。实现正向代理需要修改客户端，比如修改浏览器配置。</p>
<ul>
<li>反向代理：</li>
</ul>
<p>服务器为了能够将工作负载分不到多个服务器来提高网站性能 (负载均衡)等目的，当其受到请求后，会首先根据转发规则来确定请求应该被转发到哪个服务器上，然后将请求转发到对应的真实服务器上。这样本质上起到了对客户端隐藏真实服务器的作用。</p>
<p>一般使用反向代理后，需要通过修改 DNS 让域名解析到代理服务器 IP，这时浏览器无法察觉到真正服务器的存在，当然也就不需要修改配置了。</p>
<p>两者区别如图示：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq7.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>正向代理和反向代理的结构是一样的，都是 client-proxy-server 的结构，它们主要的区别就在于中间这个 proxy 是哪一方设置的。在正向代理中，proxy 是 client 设置的，用来隐藏 client；而在反向代理中，proxy 是 server 设置的，用来隐藏 server。</p>
<h3 id="4-Nginx的概念及其工作原理"><a href="#4-Nginx的概念及其工作原理" class="headerlink" title="4. Nginx的概念及其工作原理"></a>4. Nginx的概念及其工作原理</h3><p>Nginx 是一款轻量级的 Web 服务器，也可以用于反向代理、负载平衡和 HTTP 缓存等。Nginx 使用异步事件驱动的方法来处理请求，是一款面向性能设计的 HTTP 服务器。</p>
<p>传统的 Web 服务器如 Apache 是 process-based 模型的，而 Nginx 是基于event-driven模型的。正是这个主要的区别带给了 Nginx 在性能上的优势。</p>
<p>Nginx 架构的最顶层是一个 master process，这个 master process 用于产生其他的 worker process，这一点和Apache 非常像，但是 Nginx 的 worker process 可以同时处理大量的HTTP请求，而每个 Apache process 只能处理一个。</p>
<h2 id="八、浏览器事件机制"><a href="#八、浏览器事件机制" class="headerlink" title="八、浏览器事件机制"></a>八、浏览器事件机制</h2><h3 id="1-事件是什么？事件模型？"><a href="#1-事件是什么？事件模型？" class="headerlink" title="1. 事件是什么？事件模型？"></a>1. 事件是什么？事件模型？</h3><p>事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。</p>
<p>事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型：</p>
<ul>
<li><strong>DOM0 级事件模型</strong>，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。所有浏览器都兼容这种方式。直接在dom对象上注册事件名称，就是DOM0写法。</li>
<li><strong>IE 事件模型</strong>，在该事件模型中，一次事件共有两个过程，事件处理阶段和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。</li>
<li><strong>DOM2 级事件模型</strong>，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。</li>
</ul>
<h3 id="2-如何阻止事件冒泡"><a href="#2-如何阻止事件冒泡" class="headerlink" title="2. 如何阻止事件冒泡"></a>2. 如何阻止事件冒泡</h3><ul>
<li>普通浏览器使用：event.stopPropagation()</li>
<li>IE浏览器使用：event.cancelBubble = true;</li>
</ul>
<h3 id="3-对事件委托的理解"><a href="#3-对事件委托的理解" class="headerlink" title="3. 对事件委托的理解"></a>3. 对事件委托的理解</h3><h4 id="1）事件委托的概念"><a href="#1）事件委托的概念" class="headerlink" title="1）事件委托的概念"></a>1）事件委托的概念</h4><p>事件委托本质上是利用了<strong>浏览器事件冒泡</strong>的机制。因为事件在冒泡过程中会上传到父节点，父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件委托（事件代理）。</p>
<p>使用事件委托可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理还可以实现事件的动态绑定，比如说新增了一个子节点，并不需要单独地为它添加一个监听事件，它绑定的事件会交给父元素中的监听函数来处理。</p>
<h4 id="（2）事件委托的特点"><a href="#（2）事件委托的特点" class="headerlink" title="（2）事件委托的特点"></a>（2）事件委托的特点</h4><ul>
<li>减少内存消耗</li>
</ul>
<p>如果有一个列表，列表之中有大量的列表项，需要在点击列表项的时候响应一个事件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;list&quot;&gt;</span><br><span class="line">  &lt;li&gt;item 1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;item 2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;item 3&lt;/li&gt;</span><br><span class="line">  ......</span><br><span class="line">  &lt;li&gt;item n&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 ul 上，然后在执行事件时再去匹配判断目标元素，所以事件委托可以减少大量的内存消耗，节约效率。</p>
<ul>
<li>动态绑定事件</li>
</ul>
<p>给上述的例子中每个列表项都绑定事件，在很多时候，需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的，所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 来实现把 #list 下的 li 元素的事件代理委托到它的父层元素也就是 #list 上：</span><br><span class="line">// 给父层元素绑定事件</span><br><span class="line">document.getElementById(&#x27;list&#x27;).addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">  // 兼容性处理</span><br><span class="line">  var event = e || window.event;</span><br><span class="line">  var target = event.target || event.srcElement;</span><br><span class="line">  // 判断是否匹配目标元素</span><br><span class="line">  if (target.nodeName.toLocaleLowerCase === &#x27;li&#x27;) &#123;</span><br><span class="line">    console.log(&#x27;the content is: &#x27;, target.innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在上述代码中， target 元素则是在 #list 元素之下具体被点击的元素，然后通过判断 target 的一些属性（比如：nodeName，id 等等）可以更精确地匹配到某一类 #list li 元素之上；</p>
<h4 id="（3）局限性"><a href="#（3）局限性" class="headerlink" title="（3）局限性"></a>（3）局限性</h4><p>当然，事件委托也是有局限的。比如 focus、blur 之类的事件没有事件冒泡机制，所以无法实现事件委托；mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。</p>
<p>当然事件委托不是只有优点，它也是有<strong>缺点</strong>的，事件委托会影响页面性能，主要影响因素有：</p>
<ul>
<li>元素中，绑定事件委托的次数；</li>
<li>点击的最底层元素，到绑定事件元素之间的 <code>DOM</code>层数；</li>
</ul>
<p>在必须使用事件委托的地方，可以进行如下的处理：</p>
<ul>
<li>只在必须的地方，使用事件委托，比如：<code>ajax</code>的局部刷新区域</li>
<li>尽量的减少绑定的层级，不在 <code>body</code>元素上，进行绑定</li>
<li>减少绑定的次数，如果可以，那么把多个事件的绑定，合并到一次事件委托中去，由这个事件委托的回调，来进行分发。</li>
</ul>
<h3 id="4-事件委托的使用场景"><a href="#4-事件委托的使用场景" class="headerlink" title="4. 事件委托的使用场景"></a>4. 事件委托的使用场景</h3><p>场景：给页面的所有的a标签添加click事件，代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;click&quot;, function(e) &#123;</span><br><span class="line">    if (e.target.nodeName == &quot;A&quot;)</span><br><span class="line">        console.log(&quot;a&quot;);</span><br><span class="line">&#125;, false);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>但是这些a标签可能包含一些像span、img等元素，如果点击到了这些a标签中的元素，就不会触发click事件，因为事件绑定上在a标签元素上，而触发这些内部的元素时，e.target指向的是触发click事件的元素（span、img等其他元素）。</p>
<p>这种情况下就可以使用事件委托来处理，将事件绑定在a标签的内部元素上，当点击它的时候，就会逐级向上查找，知道找到a标签为止，代码如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&quot;click&quot;, function(e) &#123;</span><br><span class="line">    var node = e.target;</span><br><span class="line">    while (node.parentNode.nodeName != &quot;BODY&quot;) &#123;</span><br><span class="line">        if (node.nodeName == &quot;A&quot;) &#123;</span><br><span class="line">            console.log(&quot;a&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, false);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-同步和异步的区别"><a href="#5-同步和异步的区别" class="headerlink" title="5. 同步和异步的区别"></a>5. 同步和异步的区别</h3><ul>
<li><strong>同步</strong>指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。</li>
<li><strong>异步</strong>指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理。</li>
</ul>
<h3 id="6-对事件循环的理解"><a href="#6-对事件循环的理解" class="headerlink" title="6. 对事件循环的理解"></a>6. 对事件循环的理解</h3><p>因为 js 是单线程运行的，在代码执行时，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码时，如果遇到异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到一个任务队列中等待执行。任务队列可以分为宏任务队列和微任务队列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务队列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务队列中的任务都执行完成后再去执行宏任务队列中的任务。</p>
<p>Event Loop 执行顺序如下所示：</p>
<ul>
<li>首先执行同步代码，这属于宏任务</li>
<li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>
<li>执行所有微任务</li>
<li>当执行完所有微任务后，如有必要会渲染页面</li>
<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码</li>
</ul>
<h3 id="7-宏任务和微任务分别有哪些"><a href="#7-宏任务和微任务分别有哪些" class="headerlink" title="7. 宏任务和微任务分别有哪些"></a>7. 宏任务和微任务分别有哪些</h3><ul>
<li>微任务包括： promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。</li>
<li>宏任务包括： script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲染等。</li>
</ul>
<h3 id="8-什么是执行栈"><a href="#8-什么是执行栈" class="headerlink" title="8. 什么是执行栈"></a>8. 什么是执行栈</h3><p>可以把执行栈认为是一个存储函数调用的<strong>栈结构</strong>，遵循先进后出的原则。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq1.gif"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>当开始执行 JS 代码时，根据先进后出的原则，后执行的函数会先弹出栈，可以看到，<code>foo</code> 函数后执行，当执行完毕后就从栈中弹出了。</p>
<p>平时在开发中，可以在报错中找到执行栈的痕迹：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  throw new Error(&#x27;error&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq8.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>可以看到报错在 <code>foo</code> 函数，<code>foo</code> 函数又是在 <code>bar</code> 函数中调用的。当使用递归时，因为栈可存放的函数是有<strong>限制</strong>的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function bar() &#123;</span><br><span class="line">  bar()</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq9.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h3 id="9-Node-中的-Event-Loop-和浏览器中的有什么区别？process-nextTick-执行顺序？"><a href="#9-Node-中的-Event-Loop-和浏览器中的有什么区别？process-nextTick-执行顺序？" class="headerlink" title="9. Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？"></a>9. Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？</h3><p>Node 中的 Event Loop 和浏览器中的是完全不相同的东西。</p>
<p>Node 的 Event Loop 分为 6 个阶段，它们会按照<strong>顺序</strong>反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq10.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>1）<strong>Timers（计时器阶段）</strong>：初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和 setInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Pending callbacks 阶段。</p>
<p>（2）<strong>Pending callbacks</strong>：执行推迟到下一个循环迭代的I / O回调（系统调用相关的回调）。</p>
<p>（3）<strong>Idle/Prepare</strong>：仅供内部使用。</p>
<p>（4）<strong>Poll</strong>（轮询阶段）：</p>
<ul>
<li>当回调队列不为空时：会执行回调，若回调中触发了相应的微任务，这里的微任务执行时机和其他地方有所不同，不会等到所有回调执行完毕后才执行，而是针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回调后，变为下面的情况。</li>
<li>当回调队列为空时（没有回调或所有回调执行完毕）：但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入 Check 阶段。否则会阻塞并等待任何正在执行的I/O操作完成，并马上执行相应的回调，直到所有回调执行完毕。</li>
</ul>
<p>（5）<strong>Check（查询阶段）</strong>：会检查是否存在 setImmediate 相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。</p>
<p>（6）<strong>Close callbacks</strong>：执行一些关闭回调，比如socket.on(‘close’, …)等。</p>
<p>下面来看一个例子，首先在有些情况下，定时器的执行顺序其实是<strong>随机</strong>的</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;setTimeout&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;setImmediate&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于以上代码来说，<code>setTimeout</code> 可能执行在前，也可能执行在后</p>
<ul>
<li>首先 <code>setTimeout(fn, 0) === setTimeout(fn, 1)</code>，这是由源码决定的</li>
<li>进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 <code>setTimeout </code>回调</li>
<li>那么如果准备时间花费小于 1ms，那么就是 <code>setImmediate </code>回调先执行了</li>
</ul>
<p>当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&#x27;timeout&#x27;);</span><br><span class="line">    &#125;, 0)</span><br><span class="line">    setImmediate(() =&gt; &#123;</span><br><span class="line">        console.log(&#x27;immediate&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在上述代码中，<code>setImmediate</code> 永远<strong>先执行</strong>。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 <code>setImmediate</code> 回调，所以就直接跳转到 check 阶段去执行回调了。</p>
<p>上面都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前<strong>清空</strong> microtask 队列，下图中的 Tick 就代表了 microtask</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/llq/llq11.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;timer21&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">Promise.resolve().then(function() &#123;</span><br><span class="line">  console.log(&#x27;promise1&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。</p>
<p>最后来看 Node 中的 <code>process.nextTick</code>，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会<strong>清空队列中的所有回调函数</strong>，并且优先于其他 microtask 执行。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line"> console.log(&#x27;timer1&#x27;)</span><br><span class="line"> Promise.resolve().then(function() &#123;</span><br><span class="line">   console.log(&#x27;promise1&#x27;)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">process.nextTick(() =&gt; &#123;</span><br><span class="line"> console.log(&#x27;nextTick&#x27;)</span><br><span class="line"> process.nextTick(() =&gt; &#123;</span><br><span class="line">   console.log(&#x27;nextTick&#x27;)</span><br><span class="line">   process.nextTick(() =&gt; &#123;</span><br><span class="line">     console.log(&#x27;nextTick&#x27;)</span><br><span class="line">     process.nextTick(() =&gt; &#123;</span><br><span class="line">       console.log(&#x27;nextTick&#x27;)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于以上代码，永远都是先把 nextTick 全部打印出来。</p>
<p>顺序</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//macro-task:script(全部的代码) setInterval setTimeout setImmediate I/O</span><br><span class="line">//micro-task:process.nextTick  Promise</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="10-事件触发的过程是怎样的"><a href="#10-事件触发的过程是怎样的" class="headerlink" title="10. 事件触发的过程是怎样的"></a>10. 事件触发的过程是怎样的</h3><p>事件触发有三个阶段：</p>
<ul>
<li><code>window </code>往事件触发处传播，遇到注册的捕获事件会触发</li>
<li>传播到事件触发处时触发注册的事件</li>
<li>从事件触发处往 <code>window </code>传播，遇到注册的冒泡事件会触发</li>
</ul>
<p>事件触发一般来说会按照上面的顺序进行，但是也有特例，<strong>如果给一个</strong> <code>body</code> <strong>中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 以下会先打印冒泡然后是捕获</span><br><span class="line">node.addEventListener(</span><br><span class="line">  &#x27;click&#x27;,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    console.log(&#x27;冒泡&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  false</span><br><span class="line">)</span><br><span class="line">node.addEventListener(</span><br><span class="line">  &#x27;click&#x27;,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    console.log(&#x27;捕获 &#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  true</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>通常使用 <code>addEventListener</code> 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 <code>useCapture</code> 参数来说，该参数默认值为 <code>false</code> ，<code>useCapture</code> 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性：</p>
<ul>
<li><code>capture</code>：布尔值，和 <code>useCapture </code>作用一样</li>
<li><code>once</code>：布尔值，值为 <code>true </code>表示该回调只会调用一次，调用后会移除监听</li>
<li><code>passive</code>：布尔值，表示永远不会调用 <code>preventDefault</code></li>
</ul>
<p>一般来说，如果只希望事件只触发在目标上，这时候可以使用 <code>stopPropagation</code> 来阻止事件的进一步传播。通常认为 <code>stopPropagation</code> 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。</p>
<p><code>stopImmediatePropagation</code> 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.addEventListener(</span><br><span class="line">  &#x27;click&#x27;,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    event.stopImmediatePropagation()</span><br><span class="line">    console.log(&#x27;冒泡&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  false</span><br><span class="line">)</span><br><span class="line">// 点击 node 只会执行上面的函数，该函数不会执行</span><br><span class="line">node.addEventListener(</span><br><span class="line">  &#x27;click&#x27;,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    console.log(&#x27;捕获 &#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  true</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="九、浏览器垃圾回收机制"><a href="#九、浏览器垃圾回收机制" class="headerlink" title="九、浏览器垃圾回收机制"></a>九、浏览器垃圾回收机制</h2><h3 id="1-V8的垃圾回收机制是怎样的"><a href="#1-V8的垃圾回收机制是怎样的" class="headerlink" title="1. V8的垃圾回收机制是怎样的"></a>1. V8的垃圾回收机制是怎样的</h3><p>V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。</p>
<p><strong>（1）新生代算法</strong></p>
<p>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</p>
<p>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p>
<p><strong>（2）老生代算法</strong></p>
<p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p>
<p>先来说下什么情况下对象会出现在老生代空间中：</p>
<ul>
<li>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。</li>
<li>To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</li>
</ul>
<p>老生代中的空间很复杂，有如下几个空间</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum AllocationSpace &#123;</span><br><span class="line">  // TODO(v8:7464): Actually map this space&#x27;s memory as read-only.</span><br><span class="line">  RO_SPACE,    // 不变的对象空间</span><br><span class="line">  NEW_SPACE,   // 新生代用于 GC 复制算法的空间</span><br><span class="line">  OLD_SPACE,   // 老生代常驻对象空间</span><br><span class="line">  CODE_SPACE,  // 老生代代码对象空间</span><br><span class="line">  MAP_SPACE,   // 老生代 map 对象</span><br><span class="line">  LO_SPACE,    // 老生代大空间对象</span><br><span class="line">  NEW_LO_SPACE,  // 新生代大空间对象</span><br><span class="line">  FIRST_SPACE = RO_SPACE,</span><br><span class="line">  LAST_SPACE = NEW_LO_SPACE,</span><br><span class="line">  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,</span><br><span class="line">  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在老生代中，以下情况会先启动标记清除算法：</p>
<ul>
<li>某一个空间没有分块的时候</li>
<li>空间中被对象超过一定限制</li>
<li>空间不能保证新生代中的对象移动到老生代中</li>
</ul>
<p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行。</p>
<p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p>
<h3 id="2-哪些操作会造成内存泄漏？"><a href="#2-哪些操作会造成内存泄漏？" class="headerlink" title="2. 哪些操作会造成内存泄漏？"></a>2. 哪些操作会造成内存泄漏？</h3><ul>
<li>第一种情况是由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li>
<li>第二种情况是设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li>
<li>第三种情况是获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。</li>
<li>第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li>
</ul>
<h1 id="计算机网络面试题"><a href="#计算机网络面试题" class="headerlink" title="计算机网络面试题"></a>计算机网络面试题</h1><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl1.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h2><h3 id="1-GET和POST的请求的区别"><a href="#1-GET和POST的请求的区别" class="headerlink" title="1. GET和POST的请求的区别"></a>1. GET和POST的请求的区别</h3><p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p>
<ul>
<li><strong>应用场景：</strong>GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>
<li><strong>是否缓存：</strong>因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li>
<li><strong>发送的报文格式：</strong>Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li>
<li><strong>安全性：</strong>Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</li>
<li><strong>请求长度：</strong>浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li>
<li><strong>参数类型：</strong>post 的参数传递支持更多的数据类型。</li>
</ul>
<h3 id="2-POST和PUT请求的区别"><a href="#2-POST和PUT请求的区别" class="headerlink" title="2. POST和PUT请求的区别"></a>2. POST和PUT请求的区别</h3><ul>
<li>PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为是<strong>更新数据</strong>）</li>
<li>POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>
</ul>
<h3 id="3-常见的HTTP请求头和响应头"><a href="#3-常见的HTTP请求头和响应头" class="headerlink" title="3. 常见的HTTP请求头和响应头"></a>3. 常见的HTTP请求头和响应头</h3><p><strong>HTTP Request Header 常见的请求头：</strong></p>
<ul>
<li>Accept:浏览器能够处理的内容类型</li>
<li>Accept-Charset:浏览器能够显示的字符集</li>
<li>Accept-Encoding：浏览器能够处理的压缩编码</li>
<li>Accept-Language：浏览器当前设置的语言</li>
<li>Connection：浏览器与服务器之间连接的类型</li>
<li>Cookie：当前页面设置的任何Cookie</li>
<li>Host：发出请求的页面所在的域</li>
<li>Referer：发出请求的页面的URL</li>
<li>User-Agent：浏览器的用户代理字符串</li>
</ul>
<p><strong>HTTP Responses Header 常见的响应头：</strong></p>
<ul>
<li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li>
<li>server:服务器名称</li>
<li>Connection：浏览器与服务器之间连接的类型</li>
<li>Cache-Control：控制HTTP缓存</li>
<li>content-type:表示后面的文档属于什么MIME类型</li>
</ul>
<p>常见的 Content-Type 属性值有以下四种：</p>
<p>（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。</p>
<p>（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。</p>
<p>（3）application/json：服务器消息主体是序列化后的 JSON 字符串。</p>
<p>（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p>
<p>服务器向客户端发送数据格式类型：XML、HTML、JSON</p>
<h3 id="4-HTTP状态码304是多好还是少好"><a href="#4-HTTP状态码304是多好还是少好" class="headerlink" title="4. HTTP状态码304是多好还是少好"></a>4. HTTP状态码304是多好还是少好</h3><p>服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。</p>
<p>状态码304不应该认为是一种错误，而是对客户端<strong>有缓存情况下</strong>服务端的一种响应。</p>
<p>搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。</p>
<p><strong>产生较多304状态码的原因：</strong></p>
<ul>
<li>页面更新周期长或不更新</li>
<li>纯静态页面或强制生成静态html</li>
</ul>
<p><strong>304状态码出现过多会造成以下问题：</strong></p>
<ul>
<li>网站快照停止；</li>
<li>收录减少；</li>
<li>权重下降。</li>
</ul>
<h3 id="5-常见的HTTP请求方法"><a href="#5-常见的HTTP请求方法" class="headerlink" title="5. 常见的HTTP请求方法"></a>5. 常见的HTTP请求方法</h3><ul>
<li>GET: 向服务器获取数据；</li>
<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>
<li>PUT：上传文件，更新数据；</li>
<li>DELETE：删除服务器上的对象；</li>
<li>HEAD：获取报文首部，与GET相比，不返回报文主体部分；</li>
<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>
<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</li>
<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</li>
</ul>
<h3 id="6-OPTIONS请求方法及使用场景"><a href="#6-OPTIONS请求方法及使用场景" class="headerlink" title="6. OPTIONS请求方法及使用场景"></a>6. OPTIONS请求方法及使用场景</h3><p>OPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。</p>
<p>OPTIONS方法是用于请求获得由 <code>Request-URI</code>标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以<strong>在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能</strong>。该请求方法的响应不能缓存。</p>
<p>OPTIONS请求方法的<strong>主要用途</strong>有两个：</p>
<ul>
<li>获取服务器支持的所有HTTP请求方法；</li>
<li>用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li>
</ul>
<h3 id="7-HTTP-1-0-和-HTTP-1-1-之间有哪些区别？"><a href="#7-HTTP-1-0-和-HTTP-1-1-之间有哪些区别？" class="headerlink" title="7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？"></a>7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？</h3><p><strong>HTTP 1.0和 HTTP 1.1</strong> <strong>有以下区别</strong>：</p>
<ul>
<li><strong>连接方面</strong>，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</li>
<li><strong>资源请求方面</strong>，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>
<li><strong>缓存方面</strong>，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>
<li>http1.1 中<strong>新增了 host 字段</strong>，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。</li>
<li>http1.1 相对于 http1.0 还新增了很多<strong>请求方法</strong>，如 PUT、HEAD、OPTIONS 等。</li>
</ul>
<h3 id="8-HTTP-1-1-和-HTTP-2-0-的区别"><a href="#8-HTTP-1-1-和-HTTP-2-0-的区别" class="headerlink" title="8. HTTP 1.1 和 HTTP 2.0 的区别"></a>8. HTTP 1.1 和 HTTP 2.0 的区别</h3><ul>
<li><strong>二进制协议：</strong>HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li>
<li><strong>多路复用：</strong>HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了”队头堵塞”【1】的问题。</li>
<li><strong>数据流：</strong>HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li>
<li><strong>头信息压缩：</strong>HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li>
<li><strong>服务器推送：</strong>HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li>
</ul>
<p><strong>【1】队头堵塞：</strong></p>
<blockquote>
<p>队头阻塞是由 HTTP 基本的“请求 - 应答”模型所导致的。HTTP 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。</p>
</blockquote>
<h3 id="9-HTTP和HTTPS协议的区别"><a href="#9-HTTP和HTTPS协议的区别" class="headerlink" title="9. HTTP和HTTPS协议的区别"></a>9. HTTP和HTTPS协议的区别</h3><p>HTTP和HTTPS协议的主要区别如下：</p>
<ul>
<li>HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；</li>
<li>HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；</li>
<li>使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；</li>
<li>HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。</li>
</ul>
<h3 id="10-GET方法URL长度限制的原因"><a href="#10-GET方法URL长度限制的原因" class="headerlink" title="10. GET方法URL长度限制的原因"></a>10. GET方法URL长度限制的原因</h3><p>实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。</p>
<p>IE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET的长度值 = URL（2083）- （你的Domain+Path）-2（2是get请求中?=两个字符的长度）</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>下面看一下主流浏览器对get方法中url的长度限制范围：</p>
<ul>
<li>Microsoft Internet Explorer (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。</li>
<li>Firefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。</li>
<li>Safari (Browser)：URL最大长度限制为 80,000 个字符。</li>
<li>Opera (Browser)：URL最大长度限制为 190,000 个字符。</li>
<li>Google (chrome)：URL最大长度限制为 8182 个字符。</li>
</ul>
<p>主流的服务器对get方法中url的长度限制范围：</p>
<ul>
<li>Apache (Server)：能接受最大url长度为8192个字符。</li>
<li>Microsoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。</li>
</ul>
<p>根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。</p>
<h3 id="11-当在浏览器中输入-Google-com-并且按下回车之后发生了什么？"><a href="#11-当在浏览器中输入-Google-com-并且按下回车之后发生了什么？" class="headerlink" title="11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？"></a>11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？</h3><p><strong>（1）解析URL：</strong>首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p>
<p><strong>（2）缓存判断：</strong>浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p>
<p><strong>（3）DNS解析：</strong>下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p>
<p><strong>（4）获取MAC地址：</strong>当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 ARP 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p>
<p><strong>（5）TCP三次握手：</strong>下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p>
<p><strong>（6）HTTPS握手：</strong>如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p>
<p><strong>（7）返回数据：</strong>当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p>
<p><strong>（8）页面渲染：</strong>浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p>
<p><strong>（9）TCP四次挥手：</strong>最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>
<h3 id="12-对keep-alive的理解"><a href="#12-对keep-alive的理解" class="headerlink" title="12. 对keep-alive的理解"></a>12. 对keep-alive的理解</h3><p>HTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是<strong>短连接</strong>。当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是<strong>长连接</strong>。其使用方法如下：</p>
<ul>
<li>HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送 <code>Connection: keep-alive</code>字段。若想断开keep-alive连接，需发送 <code>Connection:close</code>字段；</li>
<li>HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送 <code>Connection:close</code>首部字段。</li>
</ul>
<p>Keep-Alive的<strong>建立过程</strong>：</p>
<ul>
<li>客户端向服务器在发送请求报文同时在首部添加发送Connection字段</li>
<li>服务器收到请求并处理 Connection字段</li>
<li>服务器回送Connection:Keep-Alive字段给客户端</li>
<li>客户端接收到Connection字段</li>
<li>Keep-Alive连接建立成功</li>
</ul>
<p><strong>服务端自动断开过程（也就是没有keep-alive）</strong>：</p>
<ul>
<li>客户端向服务器只是发送内容报文（不包含Connection字段）</li>
<li>服务器收到请求并处理</li>
<li>服务器返回客户端请求的资源并关闭连接</li>
<li>客户端接收资源，发现没有Connection字段，断开连接</li>
</ul>
<p><strong>客户端请求断开连接过程</strong>：</p>
<ul>
<li>客户端向服务器发送Connection:close字段</li>
<li>服务器收到请求并处理connection字段</li>
<li>服务器回送响应资源并断开连接</li>
<li>客户端接收资源并断开连接</li>
</ul>
<p>开启Keep-Alive的<strong>优点：</strong></p>
<ul>
<li>较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；</li>
<li>允许请求和应答的HTTP管线化；</li>
<li>降低拥塞控制 （TCP连接减少了）；</li>
<li>减少了后续请求的延迟（⽆需再进⾏握⼿）；</li>
<li>报告错误⽆需关闭TCP连；</li>
</ul>
<p>开启Keep-Alive的<strong>缺点</strong>：</p>
<ul>
<li>长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。</li>
</ul>
<h3 id="13-页面有多张图片，HTTP是怎样的加载表现？"><a href="#13-页面有多张图片，HTTP是怎样的加载表现？" class="headerlink" title="13. 页面有多张图片，HTTP是怎样的加载表现？"></a>13. 页面有多张图片，HTTP是怎样的加载表现？</h3><ul>
<li>在 <strong>HTTP 1</strong>下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用<strong>多域名部署</strong>解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</li>
<li>在 <strong>HTTP 2</strong>下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。</li>
</ul>
<h3 id="14-HTTP2的头部压缩算法是怎样的？"><a href="#14-HTTP2的头部压缩算法是怎样的？" class="headerlink" title="14. HTTP2的头部压缩算法是怎样的？"></a>14. HTTP2的头部压缩算法是怎样的？</h3><p>HTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</p>
<p>具体来说:</p>
<ul>
<li>在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；</li>
<li>首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</li>
<li>每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。</li>
</ul>
<p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl2.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h3 id="15-HTTP请求报文的是什么样的？"><a href="#15-HTTP请求报文的是什么样的？" class="headerlink" title="15. HTTP请求报文的是什么样的？"></a>15. HTTP请求报文的是什么样的？</h3><p>请求报⽂有4部分组成:</p>
<ul>
<li>请求⾏</li>
<li>请求头部</li>
<li>空⾏</li>
<li>请求体</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl3.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p><strong>其中：</strong></p>
<p>（1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。</p>
<p>（2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔</p>
<ul>
<li>User-Agent：产⽣请求的浏览器类型。</li>
<li>Accept：客户端可识别的内容类型列表。</li>
<li>Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。</li>
</ul>
<p>（3）请求体: post put等请求携带的数据</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl4.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h3 id="16-HTTP响应报文的是什么样的？"><a href="#16-HTTP响应报文的是什么样的？" class="headerlink" title="16. HTTP响应报文的是什么样的？"></a>16. HTTP响应报文的是什么样的？</h3><p>请求报⽂有4部分组成:</p>
<ul>
<li>响应⾏</li>
<li>响应头</li>
<li>空⾏</li>
<li>响应体</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl5.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<ul>
<li>响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li>
<li>响应头：响应部⾸组成</li>
<li>响应体：服务器响应的数据</li>
</ul>
<h3 id="17-HTTP协议的优点和缺点"><a href="#17-HTTP协议的优点和缺点" class="headerlink" title="17. HTTP协议的优点和缺点"></a>17. HTTP协议的优点和缺点</h3><p>HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</p>
<p>HTTP协议具有以下<strong>优点</strong>：</p>
<ul>
<li>支持客户端/服务器模式</li>
<li><strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li>
<li><strong>无连接</strong>：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>
<li><strong>无状态</strong>：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</li>
<li><strong>灵活</strong>：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li>
</ul>
<p>HTTP协议具有以下<strong>缺点</strong>：</p>
<ul>
<li><strong>无状态</strong>：HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li>
<li><strong>明文传输</strong>：协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li>
<li><strong>不安全</strong></li>
</ul>
<p>（1）通信使用明文（不加密），内容可能会被窃听；</p>
<p>（2）不验证通信方的身份，因此有可能遭遇伪装；</p>
<p>（3）无法证明报文的完整性，所以有可能已遭篡改；</p>
<h3 id="18-说一下HTTP-3-0"><a href="#18-说一下HTTP-3-0" class="headerlink" title="18. 说一下HTTP 3.0"></a>18. 说一下HTTP 3.0</h3><p>HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。</p>
<ol>
<li>流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。</li>
<li>集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。</li>
<li>多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。</li>
<li>快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。</li>
</ol>
<h3 id="19-HTTP协议的性能怎么样"><a href="#19-HTTP协议的性能怎么样" class="headerlink" title="19. HTTP协议的性能怎么样"></a>19. HTTP协议的性能怎么样</h3><p>HTTP 协议是基于 TCP/IP，并且使用了<strong>请求-应答</strong>的通信模式，所以性能的关键就在这两点里。</p>
<ul>
<li><strong>长连接</strong></li>
</ul>
<p>HTTP协议有两种连接模式，一种是持续连接，一种非持续连接。</p>
<p>（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。</p>
<p>（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。</p>
<p>对于不同版本的采用不同的连接方式：</p>
<ul>
<li>在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。</li>
<li>在HTTP/1.1 提出了<strong>长连接</strong>的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl6.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<ul>
<li><strong>管道网络传输</strong></li>
</ul>
<p>HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。</p>
<p>管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。</p>
<ul>
<li><strong>队头堵塞</strong></li>
</ul>
<p>HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。</p>
<p><strong>队头阻塞的解决方案：</strong></p>
<p>（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。</p>
<p>（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</p>
<h3 id="20-URL有哪些组成部分"><a href="#20-URL有哪些组成部分" class="headerlink" title="20. URL有哪些组成部分"></a>20. URL有哪些组成部分</h3><p>以下面的URL为例：<strong><a class="link"   href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" >http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p>
<ul>
<li><strong>协议部分</strong>：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符；</li>
<li><strong>域名部分</strong>：该URL的域名部分为“<a class="link"   href="http://www.aspxfans.com”.一个url中,也可以使用ip地址作为域名使用/" >www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><strong>端口部分</strong>：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）；</li>
<li><strong>虚拟目录部分</strong>：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；</li>
<li><strong>文件名部分</strong>：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名；</li>
<li><strong>锚部分</strong>：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；</li>
<li><strong>参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li>
</ul>
<h3 id="21-与缓存相关的HTTP请求头有哪些"><a href="#21-与缓存相关的HTTP请求头有哪些" class="headerlink" title="21. 与缓存相关的HTTP请求头有哪些"></a>21. 与缓存相关的HTTP请求头有哪些</h3><p>强缓存：</p>
<ul>
<li>Expires</li>
<li>Cache-Control</li>
</ul>
<p>协商缓存：</p>
<ul>
<li>Etag、If-None-Match</li>
<li>Last-Modified、If-Modified-Since</li>
</ul>
<h2 id="二、HTTPS协议"><a href="#二、HTTPS协议" class="headerlink" title="二、HTTPS协议"></a>二、HTTPS协议</h2><h3 id="1-什么是HTTPS协议？"><a href="#1-什么是HTTPS协议？" class="headerlink" title="1. 什么是HTTPS协议？"></a>1. 什么是HTTPS协议？</h3><p>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
<p>HTTP协议采用<strong>明文传输</strong>信息，存在<strong>信息窃听</strong>、<strong>信息篡改</strong>和<strong>信息劫持</strong>的风险，而协议TLS/SSL具有<strong>身份验证</strong>、<strong>信息加密</strong>和<strong>完整性校验</strong>的功能，可以避免此类问题发生。</p>
<p>安全层的主要职责就是<strong>对发起的HTTP请求的数据进行加密操作</strong> 和 <strong>对接收到的HTTP的内容进行解密操作</strong>。</p>
<h3 id="2-TLS-SSL的工作原理"><a href="#2-TLS-SSL的工作原理" class="headerlink" title="2. TLS/SSL的工作原理"></a>2. TLS/SSL的工作原理</h3><p><strong>TLS/SSL</strong>全称<strong>安全传输层协议</strong>（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</p>
<p>TLS/SSL的功能实现主要依赖三类基本算法：<strong>散列函数hash</strong>、<strong>对称加密</strong>、<strong>非对称加密</strong>。这三类算法的作用如下：</p>
<ul>
<li>基于散列函数验证信息的完整性</li>
<li>对称加密算法采用协商的秘钥对数据加密</li>
<li>非对称加密实现身份认证和秘钥协商</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl7.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h4 id="（1）散列函数hash"><a href="#（1）散列函数hash" class="headerlink" title="（1）散列函数hash"></a>（1）散列函数hash</h4><p>常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。</p>
<p><strong>特点</strong>：在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</p>
<h4 id="（2）对称加密"><a href="#（2）对称加密" class="headerlink" title="（2）对称加密"></a>（2）对称加密</h4><p>对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。</p>
<p>常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。</p>
<p><strong>特点</strong>：对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。</p>
<h4 id="（3）非对称加密"><a href="#（3）非对称加密" class="headerlink" title="（3）非对称加密"></a>（3）非对称加密</h4><p>非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。</p>
<p>常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。</p>
<p><strong>特点</strong>：非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。</p>
<p>综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。</p>
<h3 id="3-数字证书是什么？"><a href="#3-数字证书是什么？" class="headerlink" title="3. 数字证书是什么？"></a>3. 数字证书是什么？</h3><p>现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</p>
<p>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</p>
<p>这个方法最要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl8.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h3 id="4-HTTPS通信（握手）过程"><a href="#4-HTTPS通信（握手）过程" class="headerlink" title="4. HTTPS通信（握手）过程"></a>4. HTTPS通信（握手）过程</h3><p>HTTPS的通信过程如下：</p>
<ol>
<li>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li>
<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li>
<li>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</li>
<li>服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</li>
<li>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li>
</ol>
<h3 id="5-HTTPS的特点"><a href="#5-HTTPS的特点" class="headerlink" title="5. HTTPS的特点"></a>5. HTTPS的特点</h3><p>HTTPS的<strong>优点</strong>如下：</p>
<ul>
<li>使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；</li>
<li>使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；</li>
<li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；</li>
</ul>
<p>HTTPS的<strong>缺点</strong>如下：</p>
<ul>
<li>HTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；</li>
<li>HTTPS协议握手阶段比较费时，增加页面的加载时间；</li>
<li>SSL证书是收费的，功能越强大的证书费用越高；</li>
<li>HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</li>
<li>SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。</li>
</ul>
<h3 id="6-HTTPS是如何保证安全的？"><a href="#6-HTTPS是如何保证安全的？" class="headerlink" title="6. HTTPS是如何保证安全的？"></a>6. HTTPS是如何保证安全的？</h3><p>先理解两个概念：</p>
<ul>
<li>对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。</li>
<li>⾮对称加密：</li>
</ul>
<ol>
<li>私钥 + 公钥= 密钥对</li>
<li>即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密</li>
<li>因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅</li>
<li>然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密</li>
</ol>
<p>⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。</p>
<p><strong>解决⽅案：</strong></p>
<p>结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。</p>
<p>此时⼜带来⼀个问题，中间⼈问题：</p>
<p>如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。</p>
<p>所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。</p>
<p>但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。</p>
<p>数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。</p>
<h2 id="三、HTTP状态码"><a href="#三、HTTP状态码" class="headerlink" title="三、HTTP状态码"></a>三、HTTP状态码</h2><p>状态码的类别：</p>
<table>
<thead>
<tr>
<th><strong>类别</strong></th>
<th><strong>原因</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>Informational(信息性状态码)</td>
<td>接受的请求正在处理</td>
</tr>
<tr>
<td>2xx</td>
<td>Success(成功状态码)</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>Redirection(重定向状态码)</td>
<td>需要进行附加操作一完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>Client Error (客户端错误状态码)</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>Server Error(服务器错误状态码)</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<h3 id="1-2XX-Success-成功状态码"><a href="#1-2XX-Success-成功状态码" class="headerlink" title="1. 2XX (Success 成功状态码)"></a>1. 2XX (Success 成功状态码)</h3><p>状态码2XX表示请求被正常处理了。</p>
<h4 id="（1）200-OK"><a href="#（1）200-OK" class="headerlink" title="（1）200 OK"></a>（1）200 OK</h4><p>200 OK表示客户端发来的请求被服务器端正常处理了。</p>
<h4 id="（2）204-No-Content"><a href="#（2）204-No-Content" class="headerlink" title="（2）204 No Content"></a>（2）204 No Content</h4><p>该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。</p>
<h4 id="（3）206-Partial-Content"><a href="#（3）206-Partial-Content" class="headerlink" title="（3）206 Partial Content"></a>（3）206 Partial Content</h4><p>该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>
<h3 id="2-3XX-Redirection-重定向状态码"><a href="#2-3XX-Redirection-重定向状态码" class="headerlink" title="2. 3XX (Redirection 重定向状态码)"></a>2. 3XX (Redirection 重定向状态码)</h3><p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>
<h4 id="（1）301-Moved-Permanently"><a href="#（1）301-Moved-Permanently" class="headerlink" title="（1）301 Moved Permanently"></a>（1）301 Moved Permanently</h4><p><strong>永久重定向。</strong></p>
<p>该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</li>
<li>在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。</li>
</ul>
<h4 id="（2）302-Found"><a href="#（2）302-Found" class="headerlink" title="（2）302 Found"></a>（2）302 Found</h4><p><strong>临时重定向。</strong></p>
<p>该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li>
<li>未登陆的用户访问用户中心重定向到登录页面。</li>
<li>访问404页面重新定向到首页。</li>
</ul>
<h4 id="（3）303-See-Other"><a href="#（3）303-See-Other" class="headerlink" title="（3）303 See Other"></a>（3）303 See Other</h4><p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</p>
<p>303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。</p>
<p>303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。</p>
<p>注意：</p>
<ul>
<li>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。</li>
<li>301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。</li>
</ul>
<h4 id="（4）304-Not-Modified"><a href="#（4）304-Not-Modified" class="headerlink" title="（4）304 Not Modified"></a>（4）304 Not Modified</h4><p>浏览器缓存相关。</p>
<p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p>
<p>带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（<code>if-match</code>、<code>if-none-match</code>、<code>if-modified-since</code>、<code>if-unmodified-since</code>、<code>if-range</code>）中任意首部。</p>
<p>状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</p>
<h4 id="（5）307-Temporary-Redirect"><a href="#（5）307-Temporary-Redirect" class="headerlink" title="（5）307 Temporary Redirect"></a>（5）307 Temporary Redirect</h4><p>307表示临时重定向。该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。</p>
<p>307 会遵守浏览器标准，<strong>不会从 POST 变成 GET</strong>。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。规范要求浏览器继续向 Location 的地址 POST 内容。</p>
<h3 id="3-4XX-Client-Error-客户端错误状态码"><a href="#3-4XX-Client-Error-客户端错误状态码" class="headerlink" title="3. 4XX (Client Error 客户端错误状态码)"></a>3. 4XX (Client Error 客户端错误状态码)</h3><p>4XX 的响应结果表明客户端是发生错误的原因所在。</p>
<h4 id="（1）400-Bad-Request"><a href="#（1）400-Bad-Request" class="headerlink" title="（1）400 Bad Request"></a>（1）400 Bad Request</h4><p>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>
<h4 id="（2）401-Unauthorized"><a href="#（2）401-Unauthorized" class="headerlink" title="（2）401 Unauthorized"></a>（2）401 Unauthorized</h4><p>该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败</p>
<p>返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</p>
<p>以下情况会出现401：</p>
<ul>
<li>401.1 - 登录失败。</li>
<li>401.2 - 服务器配置导致登录失败。</li>
<li>401.3 - 由于 ACL 对资源的限制而未获得授权。</li>
<li>401.4 - 筛选器授权失败。</li>
<li>401.5 - ISAPI/CGI 应用程序授权失败。</li>
<li>401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li>
</ul>
<h4 id="（3）403-Forbidden"><a href="#（3）403-Forbidden" class="headerlink" title="（3）403 Forbidden"></a>（3）403 Forbidden</h4><p>该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。</p>
<p>IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</p>
<ul>
<li>403.1 - 执行访问被禁止。</li>
<li>403.2 - 读访问被禁止。</li>
<li>403.3 - 写访问被禁止。</li>
<li>403.4 - 要求 SSL。</li>
<li>403.5 - 要求 SSL 128。</li>
<li>403.6 - IP 地址被拒绝。</li>
<li>403.7 - 要求客户端证书。</li>
<li>403.8 - 站点访问被拒绝。</li>
<li>403.9 - 用户数过多。</li>
<li>403.10 - 配置无效。</li>
<li>403.11 - 密码更改。</li>
<li>403.12 - 拒绝访问映射表。</li>
<li>403.13 - 客户端证书被吊销。</li>
<li>403.14 - 拒绝目录列表。</li>
<li>403.15 - 超出客户端访问许可。</li>
<li>403.16 - 客户端证书不受信任或无效。</li>
<li>403.17 - 客户端证书已过期或尚未生效</li>
<li>403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li>
<li>403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li>
<li>403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li>
</ul>
<h4 id="（4）404-Not-Found"><a href="#（4）404-Not-Found" class="headerlink" title="（4）404 Not Found"></a>（4）404 Not Found</h4><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>
<p>以下情况会出现404：</p>
<ul>
<li>404.0 -（无） – 没有找到文件或目录。</li>
<li>404.1 - 无法在所请求的端口上访问 Web 站点。</li>
<li>404.2 - Web 服务扩展锁定策略阻止本请求。</li>
<li>404.3 - MIME 映射策略阻止本请求。</li>
</ul>
<h4 id="（5）405-Method-Not-Allowed"><a href="#（5）405-Method-Not-Allowed" class="headerlink" title="（5）405 Method Not Allowed"></a>（5）405 Method Not Allowed</h4><p>该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-5XX-Server-Error-服务器错误状态码"><a href="#4-5XX-Server-Error-服务器错误状态码" class="headerlink" title="4. 5XX (Server Error 服务器错误状态码)"></a>4. 5XX (Server Error 服务器错误状态码)</h3><p>5XX 的响应结果表明服务器本身发生错误.</p>
<h4 id="（1）500-Internal-Server-Error"><a href="#（1）500-Internal-Server-Error" class="headerlink" title="（1）500 Internal Server Error"></a>（1）500 Internal Server Error</h4><p>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>
<h4 id="（2）502-Bad-Gateway"><a href="#（2）502-Bad-Gateway" class="headerlink" title="（2）502 Bad Gateway"></a>（2）502 Bad Gateway</h4><p>该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现502：</p>
<ul>
<li>502.1 - CGI （通用网关接口）应用程序超时。</li>
<li>502.2 - CGI （通用网关接口）应用程序出错。</li>
</ul>
<h4 id="（3）503-Service-Unavailable"><a href="#（3）503-Service-Unavailable" class="headerlink" title="（3）503 Service Unavailable"></a>（3）503 Service Unavailable</h4><p>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>服务器停机维护时，主动用503响应请求；</li>
<li>nginx 设置限速，超过限速，会返回503。</li>
</ul>
<h4 id="（4）504-Gateway-Timeout"><a href="#（4）504-Gateway-Timeout" class="headerlink" title="（4）504 Gateway Timeout"></a>（4）504 Gateway Timeout</h4><p>该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。</p>
<p>使用场景：代码执行时间超时，或者发生了死循环。</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p><strong>1）2XX 成功</strong></p>
<ul>
<li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li>
<li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li>
<li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li>
<li>206 Partial Content，进行范围请求</li>
</ul>
<p><strong>（2）3XX 重定向</strong></p>
<ul>
<li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li>
<li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li>
<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li>
<li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li>
<li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li>
</ul>
<p><strong>（3）4XX 客户端错误</strong></p>
<ul>
<li>400 bad request，请求报文存在语法错误</li>
<li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li>
<li>403 forbidden，表示对请求资源的访问被服务器拒绝</li>
<li>404 not found，表示在服务器上没有找到请求的资源</li>
</ul>
<p><strong>（4）5XX 服务器错误</strong></p>
<ul>
<li>500 internal sever error，表示服务器端在执行请求时发生了错误</li>
<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>
<li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li>
</ul>
<h3 id="6-同样是重定向，307，303，302的区别？"><a href="#6-同样是重定向，307，303，302的区别？" class="headerlink" title="6. 同样是重定向，307，303，302的区别？"></a>6. 同样是重定向，307，303，302的区别？</h3><p>302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。 303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。</p>
<h2 id="四、DNS协议介绍"><a href="#四、DNS协议介绍" class="headerlink" title="四、DNS协议介绍"></a>四、DNS协议介绍</h2><h3 id="1-DNS-协议是什么"><a href="#1-DNS-协议是什么" class="headerlink" title="1. DNS 协议是什么"></a>1. DNS 协议是什么</h3><p><strong>概念</strong>： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p>
<p><strong>作用</strong>： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。</p>
<h3 id="2-DNS同时使用TCP和UDP协议？"><a href="#2-DNS同时使用TCP和UDP协议？" class="headerlink" title="2. DNS同时使用TCP和UDP协议？"></a>2. DNS同时使用TCP和UDP协议？</h3><p><strong>DNS占用53号端口，同时使用TCP和UDP协议。</strong></p>
<p>（1）在区域传输的时候使用TCP协议</p>
<ul>
<li>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>
<li>TCP是一种可靠连接，保证了数据的准确性。</li>
</ul>
<p>（2）在域名解析的时候使用UDP协议</p>
<ul>
<li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li>
</ul>
<h3 id="3-DNS完整的查询过程"><a href="#3-DNS完整的查询过程" class="headerlink" title="3. DNS完整的查询过程"></a>3. DNS完整的查询过程</h3><p>DNS服务器解析域名的过程：</p>
<ul>
<li>首先会在<strong>浏览器的缓存</strong>中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</li>
<li>将请求发送给<strong>本地DNS服务器</strong>，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li>
<li>本地DNS服务器向<strong>根域名服务器</strong>发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>
<li>本地DNS服务器向<strong>顶级域名服务器</strong>发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>
<li>本地DNS服务器向<strong>权威域名服务器</strong>发送请求，域名服务器返回对应的结果</li>
<li>本地DNS服务器将返回结果保存在缓存中，便于下次使用</li>
<li>本地DNS服务器将返回结果返回给浏览器</li>
</ul>
<p>比如要查询 <strong><a class="link"   href="http://www.baidu.com/" >www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</p>
<h3 id="4-迭代查询与递归查询"><a href="#4-迭代查询与递归查询" class="headerlink" title="4. 迭代查询与递归查询"></a>4. 迭代查询与递归查询</h3><p>实际上，DNS解析是一个包含迭代查询和递归查询的过程。</p>
<ul>
<li><strong>递归查询</strong>指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。</li>
<li><strong>迭代查询</strong>指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。</li>
</ul>
<p>一般我们向本地 DNS 服务器发送请求的方式就是递归查询，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我 们最终的请求结果。而本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程，因为每一次域名服务器只返回单次 查询的结果，下一级的查询由本地 DNS 服务器自己进行。</p>
<h3 id="5-DNS-记录和报文"><a href="#5-DNS-记录和报文" class="headerlink" title="5. DNS 记录和报文"></a>5. DNS 记录和报文</h3><p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">（Name，Value，Type，TTL）</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。</p>
<p>常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p>
<ul>
<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>
<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>
<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>
<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>
</ul>
<h2 id="五、网络模型"><a href="#五、网络模型" class="headerlink" title="五、网络模型"></a>五、网络模型</h2><h3 id="1-OSI七层模型"><a href="#1-OSI七层模型" class="headerlink" title="1. OSI七层模型"></a>1. OSI七层模型</h3><p><code>ISO</code>为了更好的使网络应用更为普及，推出了 <code>OSI</code>参考模型。</p>
<h4 id="（1）应用层"><a href="#（1）应用层" class="headerlink" title="（1）应用层"></a>（1）应用层</h4><p><code>OSI</code>参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：<code>HTTP</code>，<code>HTTPS</code>，<code>FTP</code>，<code>POP3</code>、<code>SMTP</code>等。</p>
<ul>
<li>在客户端与服务器中经常会有数据的请求，这个时候就是会用到 <code>http(hyper text transfer protocol)(超文本传输协议)</code>或者 <code>https</code>在后端设计数据接口时，我们常常使用到这个协议。</li>
<li><code>FTP</code>是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如 <strong>百度网盘 迅雷</strong>应该是基于此协议的。</li>
<li><code>SMTP</code>是 <code>simple mail transfer protocol（简单邮件传输协议）</code>。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</li>
</ul>
<h4 id="（2）表示层"><a href="#（2）表示层" class="headerlink" title="（2）表示层"></a>（2）表示层</h4><p>表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p>
<p>在项目开发中，为了方便数据传输，可以使用 <code>base64</code>对数据进行编解码。如果按功能来划分，<code>base64</code>应该是工作在表示层。</p>
<h4 id="（3）会话层"><a href="#（3）会话层" class="headerlink" title="（3）会话层"></a>（3）会话层</h4><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>
<h4 id="（4）传输层"><a href="#（4）传输层" class="headerlink" title="（4）传输层"></a>（4）传输层</h4><p>传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，<code>TCP</code> <code>UDP</code>就是在这一层。端口号既是这里的“端”。</p>
<h4 id="（5）网络层"><a href="#（5）网络层" class="headerlink" title="（5）网络层"></a>（5）网络层</h4><p>本层通过 <code>IP</code>寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 <code>IP</code>层。这一层就是我们经常说的 <code>IP</code>协议层。<code>IP</code>协议是 <code>Internet</code>的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</p>
<h4 id="（6）数据链路层"><a href="#（6）数据链路层" class="headerlink" title="（6）数据链路层"></a>（6）数据链路层</h4><p>将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。</p>
<p>网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p>
<h4 id="（7）物理层"><a href="#（7）物理层" class="headerlink" title="（7）物理层"></a>（7）物理层</h4><p>实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p>
<p><strong>OSI七层模型通信特点：对等通信</strong></p>
<p>对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p>
<h3 id="2-TCP-IP五层协议"><a href="#2-TCP-IP五层协议" class="headerlink" title="2. TCP/IP五层协议"></a>2. TCP/IP五层协议</h3><p><code>TCP/IP</code>五层协议和 <code>OSI</code>的七层协议对应关系如下：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl9.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<ul>
<li>**应用层 (application layer)**：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。</li>
<li>**传输层 (transport layer)**：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li>
<li><ul>
<li>**传输控制协议 (Transmission Control Protocol，TCP)**：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>
<li>**用户数据报协议 (User Datagram Protocol，UDP)**：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>
</ul>
</li>
<li>**网络层 (internet layer)**：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li>
<li>**数据链路层 (data link layer)**：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li>
<li>**物理层 (physical Layer)**：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</li>
</ul>
<p>从上图中可以看出，<code>TCP/IP</code>模型比 <code>OSI</code>模型更加简洁，它把 <code>应用层/表示层/会话层</code>全部整合为了 <code>应用层</code>。</p>
<p>在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</p>
<p>在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</p>
<p>同样，<code>TCP/IP</code>五层协议的通信方式也是对等通信：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl10.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="六、TCP与UDP"><a href="#六、TCP与UDP" class="headerlink" title="六、TCP与UDP"></a>六、TCP与UDP</h2><h3 id="1-TCP-和-UDP的概念及特点"><a href="#1-TCP-和-UDP的概念及特点" class="headerlink" title="1. TCP 和 UDP的概念及特点"></a>1. TCP 和 UDP的概念及特点</h3><p>TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：</p>
<p><strong>（1）UDP</strong></p>
<p>UDP的全称是<strong>用户数据报协议</strong>，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<p>它的特点如下：</p>
<p><strong>1）面向无连接</strong></p>
<p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>
<p>具体来说就是：</p>
<ul>
<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>
<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>
</ul>
<p><strong>2）有单播，多播，广播的功能</strong></p>
<p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>
<p><strong>3）面向报文</strong></p>
<p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>
<p><strong>4）不可靠性</strong></p>
<p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p>
<p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p>
<p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>
<p><strong>5）头部开销小，传输数据报文时是很高效的。</strong></p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl11.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>UDP 头部包含了以下几个数据：</p>
<ul>
<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>
<li>整个数据报文的长度</li>
<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误</li>
</ul>
<p>因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。</p>
<p><strong>（2）TCP</strong></p>
<p>TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p>
<p>它有以下几个特点：</p>
<p><strong>1）面向连接</strong></p>
<p>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</p>
<p><strong>2）仅支持单播传输</strong></p>
<p>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</p>
<p><strong>3）面向字节流</strong></p>
<p>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p>
<p><strong>4）可靠传输</strong></p>
<p>对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</p>
<p><strong>5）提供拥塞控制</strong></p>
<p>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</p>
<p><strong>6）提供全双工通信</strong></p>
<p>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p>
<h3 id="2-TCP和UDP的区别"><a href="#2-TCP和UDP的区别" class="headerlink" title="2. TCP和UDP的区别"></a>2. TCP和UDP的区别</h3><table>
<thead>
<tr>
<th></th>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody><tr>
<td>是否连接</td>
<td>无连接</td>
<td>面向连接</td>
</tr>
<tr>
<td>是否可靠</td>
<td>不可靠传输，不使用流量控制和拥塞控制</td>
<td>可靠传输（数据顺序和正确性），使用流量控制和拥塞控制</td>
</tr>
<tr>
<td>连接对象个数</td>
<td>支持一对一，一对多，多对一和多对多交互通信</td>
<td>只能是一对一通信</td>
</tr>
<tr>
<td>传输方式</td>
<td>面向报文</td>
<td>面向字节流</td>
</tr>
<tr>
<td>首部开销</td>
<td>首部开销小，仅8字节</td>
<td>首部最小20字节，最大60字节</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于实时应用，例如视频会议、直播</td>
<td>适用于要求可靠传输的应用，例如文件传输</td>
</tr>
</tbody></table>
<h3 id="3-TCP和UDP的使用场景"><a href="#3-TCP和UDP的使用场景" class="headerlink" title="3. TCP和UDP的使用场景"></a>3. TCP和UDP的使用场景</h3><ul>
<li><strong>TCP应用场景</strong>： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</li>
<li><strong>UDP应用场景</strong>： 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</li>
</ul>
<h3 id="4-UDP协议为什么不可靠？"><a href="#4-UDP协议为什么不可靠？" class="headerlink" title="4. UDP协议为什么不可靠？"></a>4. UDP协议为什么不可靠？</h3><p>UDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>
<ul>
<li>不保证消息交付：不确认，不重传，无超时</li>
<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>
<li>不跟踪连接状态：不必建立连接或重启状态机</li>
<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>
</ul>
<h3 id="5-TCP的重传机制"><a href="#5-TCP的重传机制" class="headerlink" title="5. TCP的重传机制"></a>5. TCP的重传机制</h3><p>由于TCP的下层网络（网络层）可能出现<strong>丢失、重复或失序</strong>的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是<strong>基于时间</strong>，二是<strong>基于确认信息</strong>。</p>
<p>TCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>
<h3 id="6-TCP的拥塞控制机制"><a href="#6-TCP的拥塞控制机制" class="headerlink" title="6. TCP的拥塞控制机制"></a>6. TCP的拥塞控制机制</h3><p>TCP的拥塞控制机制主要是以下四种机制：</p>
<ul>
<li>慢启动（慢开始）</li>
<li>拥塞避免</li>
<li>快速重传</li>
<li>快速恢复</li>
</ul>
<p><strong>（1）慢启动（慢开始）</strong></p>
<ul>
<li>在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）</li>
<li>思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</li>
<li>为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)</li>
<li><ul>
<li>当cnwd &lt; ssthresh，使用慢开始算法</li>
<li>当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</li>
<li>当cnwd &gt; ssthresh，使用拥塞避免算法</li>
</ul>
</li>
</ul>
<p><strong>（2）拥塞避免</strong></p>
<ul>
<li>拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</li>
<li>思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一</li>
<li>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:</li>
</ul>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl12.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<ul>
<li>其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。</li>
</ul>
<p><strong>（3）快速重传</strong></p>
<ul>
<li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li>
<li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</li>
</ul>
<p><strong>（4）快速恢复</strong></p>
<ul>
<li>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</li>
<li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li>
</ul>
<h3 id="7-TCP的流量控制机制"><a href="#7-TCP的流量控制机制" class="headerlink" title="7. TCP的流量控制机制"></a>7. TCP的流量控制机制</h3><p>一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的<strong>滑动窗口</strong>进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>
<ul>
<li>当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</li>
<li>当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</li>
<li>如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</li>
<li>如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</li>
</ul>
<h3 id="8-TCP的可靠传输机制"><a href="#8-TCP的可靠传输机制" class="headerlink" title="8. TCP的可靠传输机制"></a>8. TCP的可靠传输机制</h3><p>TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。</p>
<p>TCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</p>
<p>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</p>
<p>发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</p>
<p>但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</p>
<h3 id="9-TCP的三次握手和四次挥手"><a href="#9-TCP的三次握手和四次挥手" class="headerlink" title="9. TCP的三次握手和四次挥手"></a>9. TCP的三次握手和四次挥手</h3><h4 id="（1）三次握手"><a href="#（1）三次握手" class="headerlink" title="（1）三次握手"></a>（1）三次握手</h4><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl13.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p>
<p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p>
<ul>
<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</li>
</ul>
<blockquote>
<p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p>
</blockquote>
<ul>
<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>
</ul>
<blockquote>
<p>在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y</p>
</blockquote>
<ul>
<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>
</ul>
<blockquote>
<p>确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>
</blockquote>
<p><strong>那为什么要三次握手呢？两次不行吗？</strong></p>
<ul>
<li>为了确认双方的接收能力和发送能力都正常</li>
<li>如果是用两次握手，则会出现下面这种情况：</li>
</ul>
<blockquote>
<p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p>
</blockquote>
<p><strong>简单来说就是以下三步：</strong></p>
<ul>
<li><strong>第一次握手</strong>：客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>
<li><strong>第二次握手</strong>：服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>
<li><strong>第三次握手</strong>：当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>
</ul>
<p>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>
<h4 id="（2）四次挥手"><a href="#（2）四次挥手" class="headerlink" title="（2）四次挥手"></a>（2）四次挥手</h4><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/wl/wl14.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>
<ul>
<li>第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>
</ul>
<blockquote>
<p>即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</p>
</blockquote>
<ul>
<li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li>
</ul>
<blockquote>
<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</p>
</blockquote>
<ul>
<li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li>
</ul>
<blockquote>
<p>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</p>
</blockquote>
<ul>
<li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>
</ul>
<blockquote>
<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</p>
</blockquote>
<p>那为什么需要四次挥手呢？</p>
<blockquote>
<p>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。</p>
</blockquote>
<p>简单来说就是以下四步：</p>
<ul>
<li><strong>第一次挥手</strong>：若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>
<li><strong>第二次挥手</strong>：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</li>
<li><strong>第三次挥手</strong>：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</li>
<li><strong>第四次挥手</strong>：客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>
</ul>
<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。</p>
<p>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>
<h3 id="10-TCP粘包是怎么回事，如何处理"><a href="#10-TCP粘包是怎么回事，如何处理" class="headerlink" title="10. TCP粘包是怎么回事，如何处理?"></a>10. TCP粘包是怎么回事，如何处理?</h3><p>默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲大小见 socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.</p>
<p>如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.</p>
<p>下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:</p>
<p>A. 先接收到 data1, 然后接收到 data2 .</p>
<p>B. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部.</p>
<p>C. 先接收到了 data1 的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据.</p>
<p>D. ⼀次性接收到了 data1 和 data2 的全部数据.</p>
<p>其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有:</p>
<ul>
<li><strong>多次发送之前间隔⼀个等待时间</strong>：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显, 对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.</li>
<li><strong>关闭Nagle算法</strong>：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法, 让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为 Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)</li>
<li><strong>进⾏封包/拆包</strong>：封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时 候根据特征数据分割出来各个数据包。</li>
</ul>
<h3 id="11-为什么udp不会粘包？"><a href="#11-为什么udp不会粘包？" class="headerlink" title="11. 为什么udp不会粘包？"></a>11. 为什么udp不会粘包？</h3><ul>
<li>TCP协议是⾯向流的协议，UDP是⾯向消息的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据</li>
<li>UDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</li>
</ul>
<h2 id="七、WebSocket"><a href="#七、WebSocket" class="headerlink" title="七、WebSocket"></a>七、WebSocket</h2><h3 id="1-对-WebSocket-的理解"><a href="#1-对-WebSocket-的理解" class="headerlink" title="1. 对 WebSocket 的理解"></a>1. 对 WebSocket 的理解</h3><p>WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>
<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p>
<p><strong>WebSocket原理</strong>：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。</p>
<p><strong>WebSocket 特点的如下：</strong></p>
<ul>
<li>支持双向通信，实时性更强</li>
<li>可以发送文本，也可以发送二进制数据‘’</li>
<li>建立在TCP协议之上，服务端的实现比较容易</li>
<li>数据格式比较轻量，性能开销小，通信高效</li>
<li>没有同源限制，客户端可以与任意服务器通信</li>
<li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li>
<li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>
</ul>
<p><strong>Websocket的使用方法如下：</strong></p>
<p>在客户端中：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在index.html中直接写WebSocket，设置服务端的端口号为 9999</span><br><span class="line">let ws = new WebSocket(&#x27;ws://localhost:9999&#x27;);</span><br><span class="line">// 在客户端与服务端建立连接后触发</span><br><span class="line">ws.onopen = function() &#123;</span><br><span class="line">    console.log(&quot;Connection open.&quot;); </span><br><span class="line">    ws.send(&#x27;hello&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">// 在服务端给客户端发来消息的时候触发</span><br><span class="line">ws.onmessage = function(res) &#123;</span><br><span class="line">    console.log(res);       // 打印的是MessageEvent对象</span><br><span class="line">    console.log(res.data);  // 打印的是收到的消息</span><br><span class="line">&#125;;</span><br><span class="line">// 在客户端与服务端建立关闭后触发</span><br><span class="line">ws.onclose = function(evt) &#123;</span><br><span class="line">  console.log(&quot;Connection closed.&quot;);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？"><a href="#2-即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？" class="headerlink" title="2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？"></a>2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h3><p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>
<p><strong>短轮询的基本思路</strong>：浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>
<p><strong>长轮询的基本思路</strong>：首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>
<p><strong>SSE 的基本思想</strong>：服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>
<p>WebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>
<p><strong>上面的四个通信协议，前三个都是基于HTTP协议的。</strong></p>
<p>对于这四种即使通信协议，从性能的角度来看：</p>
<p><strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong></p>
<p>但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：</p>
<p><strong>短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket</strong></p>
<p>所以，还是要根据具体的使用场景来判断使用哪种方式。</p>
<h1 id="代码输出面试题"><a href="#代码输出面试题" class="headerlink" title="代码输出面试题"></a>代码输出面试题</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><strong>代码输出结果</strong>也是面试中常考的题目，一段代码中可能涉及到很多的知识点，这就考察到了应聘者的基础能力。在前端面试中，常考的代码输出问题主要涉及到以下知识点：<strong>异步编程、事件循环、this指向、作用域、变量提升、闭包、原型、继承</strong>等，这些知识点往往不是单独出现的，而是在同一段代码中包含多个知识点。所以，笔者将这些问题大致分为四类进行讨论。这里不会系统的阐述基础知识，而是通过面试例题的形式，来讲述每个题目的知识点以及代码的执行过程。如果会了这些例题，在前端面试中多数代码输出问题就可以轻而易举的解决了。</p>
<h2 id="一、异步-amp-事件循环"><a href="#一、异步-amp-事件循环" class="headerlink" title="一、异步&amp;事件循环"></a>一、异步&amp;事件循环</h2><h3 id="1-代码输出结果"><a href="#1-代码输出结果" class="headerlink" title="1. 代码输出结果"></a>1. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(() =&gt; &#123;</span><br><span class="line">  console.log(3);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>promise.then 是微任务，它会在所有的宏任务执行完之后才会执行，同时需要promise内部的状态发生变化，因为这里内部没有发生变化，一直处于pending状态，所以不输出3。</p>
<h3 id="2-代码输出结果"><a href="#2-代码输出结果" class="headerlink" title="2. 代码输出结果"></a>2. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;promise1&#x27;)</span><br><span class="line">  resolve(&#x27;resolve1&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">const promise2 = promise1.then(res =&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;1&#x27;, promise1);</span><br><span class="line">console.log(&#x27;2&#x27;, promise2);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise1</span><br><span class="line">1 Promise&#123;&lt;resolved&gt;: resolve1&#125;</span><br><span class="line">2 Promise&#123;&lt;pending&gt;&#125;</span><br><span class="line">resolve1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，直接打印promise1，会打印出它的状态值和参数。</p>
<p>代码执行过程如下：</p>
<ol>
<li>script是一个宏任务，按照顺序执行这些代码；</li>
<li>首先进入Promise，执行该构造函数中的代码，打印 <code>promise1</code>；</li>
<li>碰到 <code>resolve</code>函数, 将 <code>promise1</code>的状态改变为 <code>resolved</code>, 并将结果保存下来；</li>
<li>碰到 <code>promise1.then</code>这个微任务，将它放入微任务队列；</li>
<li><code>promise2</code>是一个新的状态为 <code>pending</code>的 <code>Promise</code>；</li>
<li>执行同步代码1， 同时打印出 <code>promise1</code>的状态是 <code>resolved</code>；</li>
<li>执行同步代码2，同时打印出 <code>promise2</code>的状态是 <code>pending</code>；</li>
<li>宏任务执行完毕，查找微任务队列，发现 <code>promise1.then</code>这个微任务且状态为 <code>resolved</code>，执行它。</li>
</ol>
<h3 id="3-代码输出结果"><a href="#3-代码输出结果" class="headerlink" title="3. 代码输出结果"></a>3. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;timerStart&quot;);</span><br><span class="line">    resolve(&quot;success&quot;);</span><br><span class="line">    console.log(&quot;timerEnd&quot;);</span><br><span class="line">  &#125;, 0);</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">timerStart</span><br><span class="line">timerEnd</span><br><span class="line">success</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ul>
<li>首先遇到Promise构造函数，会先执行里面的内容，打印 1；</li>
<li>遇到定时器 <code>steTimeout</code>，它是一个宏任务，放入宏任务队列；</li>
<li>继续向下执行，打印出2；</li>
<li>由于 <code>Promise</code>的状态此时还是 <code>pending</code>，所以 <code>promise.then</code>先不执行；</li>
<li>继续执行下面的同步任务，打印出4；</li>
<li>此时微任务队列没有任务，继续执行下一轮宏任务，执行 <code>steTimeout</code>；</li>
<li>首先执行 <code>timerStart</code>，然后遇到了 <code>resolve</code>，将 <code>promise</code>的状态改为 <code>resolved</code>且保存结果并将之前的 <code>promise.then</code>推入微任务队列，再执行 <code>timerEnd</code>；</li>
<li>执行完这个宏任务，就去执行微任务 <code>promise.then</code>，打印出 <code>resolve</code>的结果。</li>
</ul>
<h3 id="4-代码输出结果"><a href="#4-代码输出结果" class="headerlink" title="4. 代码输出结果"></a>4. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;promise1&#x27;);</span><br><span class="line">  const timer2 = setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timer2&#x27;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line">&#125;);</span><br><span class="line">const timer1 = setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;timer1&#x27;)</span><br><span class="line">  Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;promise2&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&#x27;start&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">promise1</span><br><span class="line">timer1</span><br><span class="line">promise2</span><br><span class="line">timer2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ol>
<li>首先，<code>Promise.resolve().then</code>是一个微任务，加入微任务队列</li>
<li>执行timer1，它是一个宏任务，加入宏任务队列</li>
<li>继续执行下面的同步代码，打印出 <code>start</code></li>
<li>这样第一轮宏任务就执行完了，开始执行微任务 <code>Promise.resolve().then</code>，打印出 <code>promise1</code></li>
<li>遇到 <code>timer2</code>，它是一个宏任务，将其加入宏任务队列，此时宏任务队列有两个任务，分别是 <code>timer1</code>、<code>timer2</code>；</li>
<li>这样第一轮微任务就执行完了，开始执行第二轮宏任务，首先执行定时器 <code>timer1</code>，打印 <code>timer1</code>；</li>
<li>遇到 <code>Promise.resolve().then</code>，它是一个微任务，加入微任务队列</li>
<li>开始执行微任务队列中的任务，打印 <code>promise2</code>；</li>
<li>最后执行宏任务 <code>timer2</code>定时器，打印出 <code>timer2</code>；</li>
</ol>
<h3 id="5-代码输出结果"><a href="#5-代码输出结果" class="headerlink" title="5. 代码输出结果"></a>5. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    resolve(&#x27;success1&#x27;);</span><br><span class="line">    reject(&#x27;error&#x27;);</span><br><span class="line">    resolve(&#x27;success2&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then((res) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;then:&#x27;, res);</span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;catch:&#x27;, err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">then：success1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这个题目考察的就是<strong>Promise的状态在发生变化之后，就不会再发生变化</strong>。开始状态由 <code>pending</code>变为 <code>resolve</code>，说明已经变为已完成状态，下面的两个状态的就不会再执行，同时下面的catch也不会捕获到错误。</p>
<h3 id="6-代码输出结果"><a href="#6-代码输出结果" class="headerlink" title="6. 代码输出结果"></a>6. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">  .then(2)</span><br><span class="line">  .then(Promise.resolve(3))</span><br><span class="line">  .then(console.log)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Promise.resolve方法的参数如果是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved，Promise.resolve方法的参数，会同时传给回调函数。</p>
<p>then方法接受的参数是函数，而如果传递的并非是一个函数，它实际上会将其解释为then(null)，这就会导致前一个Promise的结果会传递下面。</p>
<h3 id="7-代码输出结果"><a href="#7-代码输出结果" class="headerlink" title="7. 代码输出结果"></a>7. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;success&#x27;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">const promise2 = promise1.then(() =&gt; &#123;</span><br><span class="line">  throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;promise1&#x27;, promise1)</span><br><span class="line">console.log(&#x27;promise2&#x27;, promise2)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;promise1&#x27;, promise1)</span><br><span class="line">  console.log(&#x27;promise2&#x27;, promise2)</span><br><span class="line">&#125;, 2000)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise1 Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line">promise2 Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line"></span><br><span class="line">Uncaught (in promise) Error: error!!!</span><br><span class="line">promise1 Promise &#123;&lt;fulfilled&gt;: &quot;success&quot;&#125;</span><br><span class="line">promise2 Promise &#123;&lt;rejected&gt;: Error: error!!&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-代码输出结果"><a href="#8-代码输出结果" class="headerlink" title="8. 代码输出结果"></a>8. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(err =&gt; &#123;</span><br><span class="line">    return 3;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1   </span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Promise是可以链式调用的，由于每次调用 <code>.then</code> 或者 <code>.catch</code> 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般任务的链式调用一样return this。</p>
<p>上面的输出结果之所以依次打印出1和2，是因为 <code>resolve(1)</code>之后走的是第一个then方法，并没有进catch里，所以第二个then中的res得到的实际上是第一个then的返回值。并且return 2会被包装成 <code>resolve(2)</code>，被最后的then打印输出2。</p>
<h3 id="9-代码输出结果"><a href="#9-代码输出结果" class="headerlink" title="9. 代码输出结果"></a>9. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">  return new Error(&#x27;error!!!&#x27;)</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(&quot;then: &quot;, res)</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">  console.log(&quot;catch: &quot;, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;then: &quot; &quot;Error: error!!!&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的 <code>return new Error(&#39;error!!!&#39;)</code>也被包裹成了 <code>return Promise.resolve(new Error(&#39;error!!!&#39;))</code>，因此它会被then捕获而不是catch。</p>
<h3 id="10-代码输出结果"><a href="#10-代码输出结果" class="headerlink" title="10. 代码输出结果"></a>10. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const promise = Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">  return promise;</span><br><span class="line">&#125;)</span><br><span class="line">promise.catch(console.err)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught (in promise) TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里其实是一个坑，<code>.then</code> 或 <code>.catch</code> 返回的值不能是 promise 本身，否则会造成死循环。</p>
<h3 id="11-代码输出结果"><a href="#11-代码输出结果" class="headerlink" title="11. 代码输出结果"></a>11. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve(1)</span><br><span class="line">  .then(2)</span><br><span class="line">  .then(Promise.resolve(3))</span><br><span class="line">  .then(console.log)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>看到这个题目，好多的then，实际上只需要记住一个原则：<code>.then</code> 或 <code>.catch</code> 的参数期望是函数，传入非函数则会发生<strong>值透传</strong>。</p>
<p>第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将 <code>resolve(1)</code> 的值直接传到最后一个then里，直接打印出1。</p>
<h3 id="12-代码输出结果"><a href="#12-代码输出结果" class="headerlink" title="12. 代码输出结果"></a>12. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.reject(&#x27;err!!!&#x27;)</span><br><span class="line">  .then((res) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;success&#x27;, res)</span><br><span class="line">  &#125;, (err) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;error&#x27;, err)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;catch&#x27;, err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">error err!!!</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们知道，<code>.then</code>函数中的两个参数：</p>
<ul>
<li>第一个参数是用来处理Promise成功的函数</li>
<li>第二个则是处理失败的函数</li>
</ul>
<p>也就是说 <code>Promise.resolve(&#39;1&#39;)</code>的值会进入成功的函数，<code>Promise.reject(&#39;2&#39;)</code>的值会进入失败的函数。</p>
<p>在这道题中，错误直接被 <code>then</code>的第二个参数捕获了，所以就不会被 <code>catch</code>捕获了，输出结果为：<code>error err!!!&#39;</code></p>
<p>但是，如果是像下面这样：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve()</span><br><span class="line">  .then(function success (res) &#123;</span><br><span class="line">    throw new Error(&#x27;error!!!&#x27;)</span><br><span class="line">  &#125;, function fail1 (err) &#123;</span><br><span class="line">    console.log(&#x27;fail1&#x27;, err)</span><br><span class="line">  &#125;).catch(function fail2 (err) &#123;</span><br><span class="line">    console.log(&#x27;fail2&#x27;, err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在 <code>then</code>的第一参数中抛出了错误，那么他就不会被第二个参数不活了，而是被后面的 <code>catch</code>捕获到。</p>
<h3 id="13-代码输出结果"><a href="#13-代码输出结果" class="headerlink" title="13. 代码输出结果"></a>13. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve(&#x27;1&#x27;)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;finally&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">Promise.resolve(&#x27;2&#x27;)</span><br><span class="line">  .finally(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;finally2&#x27;)</span><br><span class="line">    return &#x27;我是finally2返回的值&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;finally2后面的then函数&#x27;, res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">finally2</span><br><span class="line">finally</span><br><span class="line">finally2后面的then函数 2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><code>.finally()</code>一般用的很少，只要记住以下几点就可以了：</p>
<ul>
<li><code>.finally()</code>方法不管Promise对象最后的状态如何都会执行</li>
<li><code>.finally()</code>方法的回调函数不接受任何的参数，也就是说你在 <code>.finally()</code>函数中是无法知道Promise最终的状态是 <code>resolved</code>还是 <code>rejected</code>的</li>
<li>它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。</li>
<li>finally本质上是then方法的特例</li>
</ul>
<p><code>.finally()</code>的错误捕获：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve(&#x27;1&#x27;)</span><br><span class="line">  .finally(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;finally1&#x27;)</span><br><span class="line">    throw new Error(&#x27;我是finally中抛出的异常&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(res =&gt; &#123;</span><br><span class="line">    console.log(&#x27;finally后面的then函数&#x27;, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(err =&gt; &#123;</span><br><span class="line">    console.log(&#x27;捕获错误&#x27;, err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;finally1&#x27;</span><br><span class="line">&#x27;捕获错误&#x27; Error: 我是finally中抛出的异常</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="14-代码输出结果"><a href="#14-代码输出结果" class="headerlink" title="14. 代码输出结果"></a>14. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function runAsync (x) &#123;</span><br><span class="line">    const p = new Promise(r =&gt; setTimeout(() =&gt; r(x, console.log(x)), 1000))</span><br><span class="line">    return p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.all([runAsync(1), runAsync(2), runAsync(3)]).then(res =&gt; console.log(res))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>首先，定义了一个Promise，来异步执行函数runAsync，该函数传入一个值x，然后间隔一秒后打印出这个x。</p>
<p>之后再使用 <code>Promise.all</code>来执行这个函数，执行的时候，看到一秒之后输出了1，2，3，同时输出了数组[1, 2, 3]，三个函数是同步执行的，并且在一个回调函数中返回了所有的结果。并且结果和函数的执行顺序是一致的。</p>
<h3 id="15-代码输出结果"><a href="#15-代码输出结果" class="headerlink" title="15. 代码输出结果"></a>15. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function runAsync (x) &#123;</span><br><span class="line">  const p = new Promise(r =&gt; setTimeout(() =&gt; r(x, console.log(x)), 1000))</span><br><span class="line">  return p</span><br><span class="line">&#125;</span><br><span class="line">function runReject (x) &#123;</span><br><span class="line">  const p = new Promise((res, rej) =&gt; setTimeout(() =&gt; rej(`Error: $&#123;x&#125;`, console.log(x)), 1000 * x))</span><br><span class="line">  return p</span><br><span class="line">&#125;</span><br><span class="line">Promise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])</span><br><span class="line">       .then(res =&gt; console.log(res))</span><br><span class="line">       .catch(err =&gt; console.log(err))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1s后输出</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">// 2s后输出</span><br><span class="line">2</span><br><span class="line">Error: 2</span><br><span class="line">// 4s后输出</span><br><span class="line">4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以看到。catch捕获到了第一个错误，在这道题目中最先的错误就是 <code>runReject(2)</code>的结果。如果一组异步操作中有一个异常都不会进入 <code>.then()</code>的第一个回调函数参数中。会被 <code>.then()</code>的第二个回调函数捕获。</p>
<h3 id="16-代码输出结果"><a href="#16-代码输出结果" class="headerlink" title="16. 代码输出结果"></a>16. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function runAsync (x) &#123;</span><br><span class="line">  const p = new Promise(r =&gt; setTimeout(() =&gt; r(x, console.log(x)), 1000))</span><br><span class="line">  return p</span><br><span class="line">&#125;</span><br><span class="line">Promise.race([runAsync(1), runAsync(2), runAsync(3)])</span><br><span class="line">  .then(res =&gt; console.log(&#x27;result: &#x27;, res))</span><br><span class="line">  .catch(err =&gt; console.log(err))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">&#x27;result: &#x27; 1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>then只会捕获第一个成功的方法，其他的函数虽然还会继续执行，但是不是被then捕获了。</p>
<h3 id="17-代码输出结果"><a href="#17-代码输出结果" class="headerlink" title="17. 代码输出结果"></a>17. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function runAsync(x) &#123;</span><br><span class="line">  const p = new Promise(r =&gt;</span><br><span class="line">    setTimeout(() =&gt; r(x, console.log(x)), 1000)</span><br><span class="line">  );</span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line">function runReject(x) &#123;</span><br><span class="line">  const p = new Promise((res, rej) =&gt;</span><br><span class="line">    setTimeout(() =&gt; rej(`Error: $&#123;x&#125;`, console.log(x)), 1000 * x)</span><br><span class="line">  );</span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line">Promise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])</span><br><span class="line">  .then(res =&gt; console.log(&quot;result: &quot;, res))</span><br><span class="line">  .catch(err =&gt; console.log(err));</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">Error: 0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以看到在catch捕获到第一个错误之后，后面的代码还不执行，不过不会再被捕获了。</p>
<p>注意：<code>all</code>和 <code>race</code>传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被then的第二个参数或者后面的catch捕获；但并不会影响数组中其它的异步任务的执行。</p>
<h3 id="18-代码输出结果"><a href="#18-代码输出结果" class="headerlink" title="18. 代码输出结果"></a>18. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1() &#123;</span><br><span class="line">  console.log(&quot;async1 start&quot;);</span><br><span class="line">  await async2();</span><br><span class="line">  console.log(&quot;async1 end&quot;);</span><br><span class="line">&#125;</span><br><span class="line">async function async2() &#123;</span><br><span class="line">  console.log(&quot;async2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">async1();</span><br><span class="line">console.log(&#x27;start&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">start</span><br><span class="line">async1 end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码的执行过程如下：</p>
<ol>
<li>首先执行函数中的同步代码 <code>async1 start</code>，之后遇到了 <code>await</code>，它会阻塞 <code>async1</code>后面代码的执行，因此会先去执行 <code>async2</code>中的同步代码 <code>async2</code>，然后跳出 <code>async1</code>；</li>
<li>跳出 <code>async1</code>函数后，执行同步代码 <code>start</code>；</li>
<li>在一轮宏任务全部执行完之后，再来执行 <code>await</code>后面的内容 <code>async1 end</code>。</li>
</ol>
<p>这里可以理解为await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中。</p>
<h3 id="19-代码输出结果"><a href="#19-代码输出结果" class="headerlink" title="19. 代码输出结果"></a>19. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1() &#123;</span><br><span class="line">  console.log(&quot;async1 start&quot;);</span><br><span class="line">  await async2();</span><br><span class="line">  console.log(&quot;async1 end&quot;);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timer1&#x27;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line">&#125;</span><br><span class="line">async function async2() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timer2&#x27;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line">  console.log(&quot;async2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">async1();</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;timer3&#x27;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">console.log(&quot;start&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">start</span><br><span class="line">async1 end</span><br><span class="line">timer2</span><br><span class="line">timer3</span><br><span class="line">timer1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码的执行过程如下：</p>
<ol>
<li>首先进入 <code>async1</code>，打印出 <code>async1 start</code>；</li>
<li>之后遇到 <code>async2</code>，进入 <code>async2</code>，遇到定时器 <code>timer2</code>，加入宏任务队列，之后打印 <code>async2</code>；</li>
<li>由于 <code>async2</code>阻塞了后面代码的执行，所以执行后面的定时器 <code>timer3</code>，将其加入宏任务队列，之后打印 <code>start</code>；</li>
<li>然后执行<code>async2</code>后面的代码，打印出 <code>async1 end</code>，遇到定时器<code>timer1</code>，将其加入宏任务队列；</li>
<li>最后，宏任务队列有三个任务，先后顺序为 <code>timer2</code>，<code>timer3</code>，<code>timer1</code>，没有微任务，所以直接所有的宏任务按照先进先出的原则执行。</li>
</ol>
<h3 id="20-代码输出结果"><a href="#20-代码输出结果" class="headerlink" title="20. 代码输出结果"></a>20. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1 () &#123;</span><br><span class="line">  console.log(&#x27;async1 start&#x27;);</span><br><span class="line">  await new Promise(resolve =&gt; &#123;</span><br><span class="line">    console.log(&#x27;promise1&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&#x27;async1 success&#x27;);</span><br><span class="line">  return &#x27;async1 end&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;srcipt start&#x27;)</span><br><span class="line">async1().then(res =&gt; console.log(res))</span><br><span class="line">console.log(&#x27;srcipt end&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里需要注意的是在 <code>async1</code>中 <code>await</code>后面的Promise是没有返回值的，也就是它的状态始终是 <code>pending</code>状态，所以在 <code>await</code>之后的内容是不会执行的，包括 <code>async1</code>后面的 <code>.then</code>。</p>
<h3 id="21-代码输出结果"><a href="#21-代码输出结果" class="headerlink" title="21. 代码输出结果"></a>21. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1 () &#123;</span><br><span class="line">  console.log(&#x27;async1 start&#x27;);</span><br><span class="line">  await new Promise(resolve =&gt; &#123;</span><br><span class="line">    console.log(&#x27;promise1&#x27;)</span><br><span class="line">    resolve(&#x27;promise1 resolve&#x27;)</span><br><span class="line">  &#125;).then(res =&gt; console.log(res))</span><br><span class="line">  console.log(&#x27;async1 success&#x27;);</span><br><span class="line">  return &#x27;async1 end&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;srcipt start&#x27;)</span><br><span class="line">async1().then(res =&gt; console.log(res))</span><br><span class="line">console.log(&#x27;srcipt end&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里是对上面一题进行了改造，加上了resolve。</p>
<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise1 resolve</span><br><span class="line">async1 success</span><br><span class="line">async1 end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="22-代码输出结果"><a href="#22-代码输出结果" class="headerlink" title="22. 代码输出结果"></a>22. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1() &#123;</span><br><span class="line">  console.log(&quot;async1 start&quot;);</span><br><span class="line">  await async2();</span><br><span class="line">  console.log(&quot;async1 end&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function async2() &#123;</span><br><span class="line">  console.log(&quot;async2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&quot;script start&quot;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(&quot;setTimeout&quot;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line">new Promise(resolve =&gt; &#123;</span><br><span class="line">  console.log(&quot;promise1&quot;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(&quot;promise2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#x27;script end&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ol>
<li>开头定义了async1和async2两个函数，但是并未执行，执行script中的代码，所以打印出script start；</li>
<li>遇到定时器Settimeout，它是一个宏任务，将其加入到宏任务队列；</li>
<li>之后执行函数async1，首先打印出async1 start；</li>
<li>遇到await，执行async2，打印出async2，并阻断后面代码的执行，将后面的代码加入到微任务队列；</li>
<li>然后跳出async1和async2，遇到Promise，打印出promise1；</li>
<li>遇到resolve，将其加入到微任务队列，然后执行后面的script代码，打印出script end；</li>
<li>之后就该执行微任务队列了，首先打印出async1 end，然后打印出promise2；</li>
<li>执行完微任务队列，就开始执行宏任务队列中的定时器，打印出setTimeout。</li>
</ol>
<h3 id="23-代码输出结果"><a href="#23-代码输出结果" class="headerlink" title="23. 代码输出结果"></a>23. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1 () &#123;</span><br><span class="line">  await async2();</span><br><span class="line">  console.log(&#x27;async1&#x27;);</span><br><span class="line">  return &#x27;async1 success&#x27;</span><br><span class="line">&#125;</span><br><span class="line">async function async2 () &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;async2&#x27;)</span><br><span class="line">    reject(&#x27;error&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async1().then(res =&gt; console.log(res))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async2</span><br><span class="line">Uncaught (in promise) error</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以看到，如果async函数中抛出了错误，就会终止错误结果，不会继续向下执行。</p>
<p>如果想要让错误不足之处后面的代码执行，可以使用catch来捕获：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function async1 () &#123;</span><br><span class="line">  await Promise.reject(&#x27;error!!!&#x27;).catch(e =&gt; console.log(e))</span><br><span class="line">  console.log(&#x27;async1&#x27;);</span><br><span class="line">  return Promise.resolve(&#x27;async1 success&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">async1().then(res =&gt; console.log(res))</span><br><span class="line">console.log(&#x27;script start&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样的输出结果就是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">error!!!</span><br><span class="line">async1</span><br><span class="line">async1 success</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="24-代码输出结果"><a href="#24-代码输出结果" class="headerlink" title="24. 代码输出结果"></a>24. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const first = () =&gt; (new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">    let p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        console.log(7);</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(5);</span><br><span class="line">            resolve(6);</span><br><span class="line">            console.log(p)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">        resolve(1);</span><br><span class="line">    &#125;);</span><br><span class="line">    resolve(2);</span><br><span class="line">    p.then((arg) =&gt; &#123;</span><br><span class="line">        console.log(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br><span class="line">first().then((arg) =&gt; &#123;</span><br><span class="line">    console.log(arg);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">Promise&#123;&lt;resolved&gt;: 1&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码的执行过程如下：</p>
<ol>
<li>首先会进入Promise，打印出3，之后进入下面的Promise，打印出7；</li>
<li>遇到了定时器，将其加入宏任务队列；</li>
<li>执行Promise p中的resolve，状态变为resolved，返回值为1；</li>
<li>执行Promise first中的resolve，状态变为resolved，返回值为2；</li>
<li>遇到p.then，将其加入微任务队列，遇到first().then，将其加入任务队列；</li>
<li>执行外面的代码，打印出4；</li>
<li>这样第一轮宏任务就执行完了，开始执行微任务队列中的任务，先后打印出1和2；</li>
<li>这样微任务就执行完了，开始执行下一轮宏任务，宏任务队列中有一个定时器，执行它，打印出5，由于执行已经变为resolved状态，所以 <code>resolve(6)</code>不会再执行；</li>
<li>最后 <code>console.log(p)</code>打印出 <code>Promise&#123;&lt;resolved&gt;: 1&#125;</code>；</li>
</ol>
<h3 id="25-代码输出结果"><a href="#25-代码输出结果" class="headerlink" title="25. 代码输出结果"></a>25. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const async1 = async () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;async1&#x27;);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timer1&#x27;)</span><br><span class="line">  &#125;, 2000)</span><br><span class="line">  await new Promise(resolve =&gt; &#123;</span><br><span class="line">    console.log(&#x27;promise1&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&#x27;async1 end&#x27;)</span><br><span class="line">  return &#x27;async1 success&#x27;</span><br><span class="line">&#125; </span><br><span class="line">console.log(&#x27;script start&#x27;);</span><br><span class="line">async1().then(res =&gt; console.log(res));</span><br><span class="line">console.log(&#x27;script end&#x27;);</span><br><span class="line">Promise.resolve(1)</span><br><span class="line">  .then(2)</span><br><span class="line">  .then(Promise.resolve(3))</span><br><span class="line">  .catch(4)</span><br><span class="line">  .then(res =&gt; console.log(res))</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;timer2&#x27;)</span><br><span class="line">&#125;, 1000)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">1</span><br><span class="line">timer2</span><br><span class="line">timer1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码的执行过程如下：</p>
<ol>
<li>首先执行同步带吗，打印出script start；</li>
<li>遇到定时器timer1将其加入宏任务队列；</li>
<li>之后是执行Promise，打印出promise1，由于Promise没有返回值，所以后面的代码不会执行；</li>
<li>然后执行同步代码，打印出script end；</li>
<li>继续执行下面的Promise，.then和.catch期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将resolve(1)的值传到最后一个then，直接打印出1；</li>
<li>遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1。</li>
</ol>
<h3 id="26-代码输出结果"><a href="#26-代码输出结果" class="headerlink" title="26. 代码输出结果"></a>26. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p1 = new Promise((resolve) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(&#x27;resolve3&#x27;);</span><br><span class="line">    console.log(&#x27;timer1&#x27;)</span><br><span class="line">  &#125;, 0)</span><br><span class="line">  resolve(&#x27;resovle1&#x27;);</span><br><span class="line">  resolve(&#x27;resolve2&#x27;);</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(res)  // resolve1</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(p1)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).finally(res =&gt; &#123;</span><br><span class="line">  console.log(&#x27;finally&#x27;, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>执行结果为如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">resolve1</span><br><span class="line">finally  undefined</span><br><span class="line">timer1</span><br><span class="line">Promise&#123;&lt;resolved&gt;: undefined&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="27-代码输出结果"><a href="#27-代码输出结果" class="headerlink" title="27. 代码输出结果"></a>27. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;1&#x27;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&#x27;2&#x27;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&#x27;3&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&#x27;4&#x27;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&#x27;5&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&#x27;6&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&#x27;7&#x27;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&#x27;8&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&#x27;9&#x27;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&#x27;10&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&#x27;11&#x27;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&#x27;12&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>（1）第一轮事件循环流程分析如下：</strong></p>
<ul>
<li>整体script作为第一个宏任务进入主线程，遇到 <code>console.log</code>，输出1。</li>
<li>遇到 <code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中。暂且记为 <code>setTimeout1</code>。</li>
<li>遇到 <code>process.nextTick()</code>，其回调函数被分发到微任务Event Queue中。记为 <code>process1</code>。</li>
<li>遇到 <code>Promise</code>，<code>new Promise</code>直接执行，输出7。<code>then</code>被分发到微任务Event Queue中。记为 <code>then1</code>。</li>
<li>又遇到了 <code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中，记为 <code>setTimeout2</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td>setTimeout1</td>
<td>process1</td>
</tr>
<tr>
<td>setTimeout2</td>
<td>then1</td>
</tr>
</tbody></table>
<p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。发现了 <code>process1</code>和 <code>then1</code>两个微任务：</p>
<ul>
<li>执行 <code>process1</code>，输出6。</li>
<li>执行 <code>then1</code>，输出8。</li>
</ul>
<p>第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</p>
<p><strong>（2）第二轮时间循环从</strong> <code>setTimeout1</code><strong>宏任务开始：</strong></p>
<ul>
<li>首先输出2。接下来遇到了 <code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为 <code>process2</code>。</li>
<li><code>new Promise</code>立即执行输出4，<code>then</code>也分发到微任务Event Queue中，记为 <code>then2</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td>setTimeout2</td>
<td>process2</td>
</tr>
<tr>
<td></td>
<td>then2</td>
</tr>
</tbody></table>
<p>第二轮事件循环宏任务结束，发现有 <code>process2</code>和 <code>then2</code>两个微任务可以执行：</p>
<ul>
<li>输出3。</li>
<li>输出5。</li>
</ul>
<p>第二轮事件循环结束，第二轮输出2，4，3，5。</p>
<p><strong>（3）第三轮事件循环开始，此时只剩setTimeout2了，执行。</strong></p>
<ul>
<li>直接输出9。</li>
<li>将 <code>process.nextTick()</code>分发到微任务Event Queue中。记为 <code>process3</code>。</li>
<li>直接执行 <code>new Promise</code>，输出11。</li>
<li>将 <code>then</code>分发到微任务Event Queue中，记为 <code>then3</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>process3</td>
</tr>
<tr>
<td></td>
<td>then3</td>
</tr>
</tbody></table>
<p>第三轮事件循环宏任务执行结束，执行两个微任务 <code>process3</code>和 <code>then3</code>：</p>
<ul>
<li>输出10。</li>
<li>输出12。</li>
</ul>
<p>第三轮事件循环结束，第三轮输出9，11，10，12。</p>
<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</p>
<h3 id="28-代码输出结果"><a href="#28-代码输出结果" class="headerlink" title="28. 代码输出结果"></a>28. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Promise(resolve =&gt;  &#123;</span><br><span class="line">  console.log(3)</span><br><span class="line">  resolve(4)</span><br><span class="line">&#125;).then(d =&gt; console.log(d))</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(5)</span><br><span class="line">  new Promise(resolve =&gt;  &#123;</span><br><span class="line">    resolve(6)</span><br><span class="line">  &#125;).then(d =&gt; console.log(d))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(7)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(8)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ol>
<li>首先执行script代码，打印出1；</li>
<li>遇到第一个定时器，加入到宏任务队列；</li>
<li>遇到Promise，执行代码，打印出3，遇到resolve，将其加入到微任务队列；</li>
<li>遇到第二个定时器，加入到宏任务队列；</li>
<li>遇到第三个定时器，加入到宏任务队列；</li>
<li>继续执行script代码，打印出8，第一轮执行结束；</li>
<li>执行微任务队列，打印出第一个Promise的resolve结果：4；</li>
<li>开始执行宏任务队列，执行第一个定时器，打印出2；</li>
<li>此时没有微任务，继续执行宏任务中的第二个定时器，首先打印出5，遇到Promise，首选打印出6，遇到resolve，将其加入到微任务队列；</li>
<li>执行微任务队列，打印出6；</li>
<li>执行宏任务队列中的最后一个定时器，打印出7。</li>
</ol>
<h3 id="29-代码输出结果"><a href="#29-代码输出结果" class="headerlink" title="29. 代码输出结果"></a>29. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(1);</span><br><span class="line">  </span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">  Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(4)</span><br><span class="line">  resolve(5)</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(6);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(7);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ol>
<li>首先执行scrip代码，打印出1；</li>
<li>遇到第一个定时器setTimeout，将其加入到宏任务队列；</li>
<li>遇到Promise，执行里面的同步代码，打印出4，遇到resolve，将其加入到微任务队列；</li>
<li>遇到第二个定时器setTimeout，将其加入到红任务队列；</li>
<li>执行script代码，打印出7，至此第一轮执行完成；</li>
<li>指定微任务队列中的代码，打印出resolve的结果：5；</li>
<li>执行宏任务中的第一个定时器setTimeout，首先打印出2，然后遇到 Promise.resolve().then()，将其加入到微任务队列；</li>
<li>执行完这个宏任务，就开始执行微任务队列，打印出3；</li>
<li>继续执行宏任务队列中的第二个定时器，打印出6。</li>
</ol>
<h3 id="30-代码输出结果"><a href="#30-代码输出结果" class="headerlink" title="30. 代码输出结果"></a>30. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;1&#x27;);</span><br><span class="line">    throw &#x27;Error&#x27;;</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;2&#x27;);</span><br><span class="line">&#125;).catch(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;3&#x27;);</span><br><span class="line">    throw &#x27;Error&#x27;;</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;4&#x27;);</span><br><span class="line">&#125;).catch(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;5&#x27;);</span><br><span class="line">&#125;).then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;6&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>执行结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">3 </span><br><span class="line">5 </span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在这道题目中，我们需要知道，无论是thne还是catch中，只要throw 抛出了错误，就会被catch捕获，如果没有throw出错误，就被继续执行后面的then。</p>
<h3 id="31-代码输出结果"><a href="#31-代码输出结果" class="headerlink" title="31. 代码输出结果"></a>31. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(function () &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;, 100);</span><br><span class="line"></span><br><span class="line">new Promise(function (resolve) &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">  resolve();</span><br><span class="line">  console.log(3);</span><br><span class="line">&#125;).then(function () &#123;</span><br><span class="line">  console.log(4);</span><br><span class="line">  new Promise((resove, reject) =&gt; &#123;</span><br><span class="line">    console.log(5);</span><br><span class="line">    setTimeout(() =&gt;  &#123;</span><br><span class="line">      console.log(6);</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">console.log(7);</span><br><span class="line">console.log(8);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码执行过程如下：</p>
<ol>
<li>首先遇到定时器，将其加入到宏任务队列；</li>
<li>遇到Promise，首先执行里面的同步代码，打印出2，遇到resolve，将其加入到微任务队列，执行后面同步代码，打印出3；</li>
<li>继续执行script中的代码，打印出7和8，至此第一轮代码执行完成；</li>
<li>执行微任务队列中的代码，首先打印出4，如遇到Promise，执行其中的同步代码，打印出5，遇到定时器，将其加入到宏任务队列中，此时宏任务队列中有两个定时器；</li>
<li>执行宏任务队列中的代码，这里我们需要注意是的第一个定时器的时间为100ms，第二个定时器的时间为10ms，所以先执行第二个定时器，打印出6；</li>
<li>此时微任务队列为空，继续执行宏任务队列，打印出1。</li>
</ol>
<p>做完这道题目，我们就需要格外注意，每个定时器的时间，并不是所有定时器的时间都为0哦。</p>
<h2 id="二、this"><a href="#二、this" class="headerlink" title="二、this"></a>二、this</h2><h3 id="1-代码输出结果-1"><a href="#1-代码输出结果-1" class="headerlink" title="1. 代码输出结果"></a>1. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  console.log( this.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doFoo() &#123;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  doFoo: doFoo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var a = 2; </span><br><span class="line">obj.doFoo()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：2</p>
<p>在Javascript中，this指向函数执行时的当前对象。在执行foo的时候，执行环境就是doFoo函数，执行环境为全局。所以，foo中的this是指向window的，所以会打印出2。</p>
<h3 id="2-代码输出结果-1"><a href="#2-代码输出结果-1" class="headerlink" title="2. 代码输出结果"></a>2. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 10</span><br><span class="line">var obj = &#123;</span><br><span class="line">  a: 20,</span><br><span class="line">  say: () =&gt; &#123;</span><br><span class="line">    console.log(this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say() </span><br><span class="line"></span><br><span class="line">var anotherObj = &#123; a: 30 &#125; </span><br><span class="line">obj.say.apply(anotherObj) </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：10 10</p>
<p>我么知道，箭头函数时不绑定this的，它的this来自原其父级所处的上下文，所以首先会打印全局中的 a 的值10。后面虽然让say方法指向了另外一个对象，但是仍不能改变箭头函数的特性，它的this仍然是指向全局的，所以依旧会输出10。</p>
<p>但是，如果是普通函数，那么就会有完全不一样的结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 10  </span><br><span class="line">var obj = &#123;  </span><br><span class="line">  a: 20,  </span><br><span class="line">  say()&#123;</span><br><span class="line">    console.log(this.a)  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">obj.say()   </span><br><span class="line">var anotherObj=&#123;a:30&#125;   </span><br><span class="line">obj.say.apply(anotherObj)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：20 30</p>
<p>这时，say方法中的this就会指向他所在的对象，输出其中的a的值。</p>
<h3 id="3-代码输出结果-1"><a href="#3-代码输出结果-1" class="headerlink" title="3. 代码输出结果"></a>3. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">  console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">a.call(null);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>打印结果：window对象</p>
<p>根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined，call方法将把全局对象（浏览器上是window对象）作为this的值。所以，不管传入null 还是 undefined，其this都是全局对象window。所以，在浏览器上答案是输出 window 对象。</p>
<p>要注意的是，在严格模式中，null 就是 null，undefined 就是 undefined：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line">a.call(null); // null</span><br><span class="line">a.call(undefined); // undefined</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-代码输出结果-1"><a href="#4-代码输出结果-1" class="headerlink" title="4. 代码输出结果"></a>4. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123; </span><br><span class="line">  name: &#x27;cuggz&#x27;, </span><br><span class="line">  fun: function()&#123; </span><br><span class="line">     console.log(this.name); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line">obj.fun()     // cuggz</span><br><span class="line">new obj.fun() // undefined</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-代码输出结果-1"><a href="#5-代码输出结果-1" class="headerlink" title="5. 代码输出结果"></a>5. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">   say: function() &#123;</span><br><span class="line">     var f1 = () =&gt;  &#123;</span><br><span class="line">       console.log(&quot;1111&quot;, this);</span><br><span class="line">     &#125;</span><br><span class="line">     f1();</span><br><span class="line">   &#125;,</span><br><span class="line">   pro: &#123;</span><br><span class="line">     getPro:() =&gt;  &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">var o = obj.say;</span><br><span class="line">o();</span><br><span class="line">obj.say();</span><br><span class="line">obj.pro.getPro();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1111 window对象</span><br><span class="line">1111 obj对象</span><br><span class="line">window对象</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>解析：</strong></p>
<ol>
<li>o()，o是在全局执行的，而f1是箭头函数，它是没有绑定this的，它的this指向其父级的this，其父级say方法的this指向的是全局作用域，所以会打印出window；</li>
<li>obj.say()，谁调用say，say 的this就指向谁，所以此时this指向的是obj对象；</li>
<li>obj.pro.getPro()，我们知道，箭头函数时不绑定this的，getPro处于pro中，而对象不构成单独的作用域，所以箭头的函数的this就指向了全局作用域window。</li>
</ol>
<h3 id="6-代码输出结果-1"><a href="#6-代码输出结果-1" class="headerlink" title="6. 代码输出结果"></a>6. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myObject = &#123;</span><br><span class="line">    foo: &quot;bar&quot;,</span><br><span class="line">    func: function() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        console.log(this.foo);  </span><br><span class="line">        console.log(self.foo);  </span><br><span class="line">        (function() &#123;</span><br><span class="line">            console.log(this.foo);  </span><br><span class="line">            console.log(self.foo);  </span><br><span class="line">        &#125;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：bar bar undefined bar</p>
<p><strong>解析：</strong></p>
<ol>
<li>首先func是由myObject调用的，this指向myObject。又因为var self = this;所以self指向myObject。</li>
<li>这个立即执行匿名函数表达式是由window调用的，this指向window 。立即执行匿名函数的作用域处于myObject.func的作用域中，在这个作用域找不到self变量，沿着作用域链向上查找self变量，找到了指向 myObject对象的self。</li>
</ol>
<h3 id="7-代码输出问题"><a href="#7-代码输出问题" class="headerlink" title="7. 代码输出问题"></a>7. 代码输出问题</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.number = 2;</span><br><span class="line">var obj = &#123;</span><br><span class="line"> number: 3,</span><br><span class="line"> db1: (function()&#123;</span><br><span class="line">   console.log(this);</span><br><span class="line">   this.number *= 4;</span><br><span class="line">   return function()&#123;</span><br><span class="line">     console.log(this);</span><br><span class="line">     this.number *= 5;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">var db1 = obj.db1;</span><br><span class="line">db1();</span><br><span class="line">obj.db1();</span><br><span class="line">console.log(obj.number);     // 15</span><br><span class="line">console.log(window.number);  // 40</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这道题目看清起来有点乱，但是实际上是考察this指向的:</p>
<ol>
<li>执行db1()时，this指向全局作用域，所以window.number * 4 = 8，然后执行匿名函数， 所以window.number * 5 = 40；</li>
<li>执行obj.db1();时，this指向obj对象，执行匿名函数，所以obj.numer * 5 = 15。</li>
</ol>
<h3 id="8-代码输出结果-1"><a href="#8-代码输出结果-1" class="headerlink" title="8. 代码输出结果"></a>8. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var length = 10;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(this.length);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var obj = &#123;</span><br><span class="line">  length: 5,</span><br><span class="line">  method: function(fn) &#123;</span><br><span class="line">    fn();</span><br><span class="line">    arguments[0]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">obj.method(fn, 1);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： 10 2</p>
<p><strong>解析：</strong></p>
<ol>
<li>第一次执行fn()，this指向window对象，输出10。</li>
<li>第二次执行arguments0，相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。</li>
</ol>
<h3 id="9-代码输出结果-1"><a href="#9-代码输出结果-1" class="headerlink" title="9. 代码输出结果"></a>9. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function printA()&#123;</span><br><span class="line">  console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line">var obj=&#123;</span><br><span class="line">  a:2,</span><br><span class="line">  foo:printA,</span><br><span class="line">  bar:function()&#123;</span><br><span class="line">    printA();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.foo(); // 2</span><br><span class="line">obj.bar(); // 1</span><br><span class="line">var foo = obj.foo;</span><br><span class="line">foo(); // 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： 2 1 1</p>
<p><strong>解析：</strong></p>
<ol>
<li>obj.foo()，foo 的this指向obj对象，所以a会输出2；</li>
<li>obj.bar()，printA在bar方法中执行，所以此时printA的this指向的是window，所以会输出1；</li>
<li>foo()，foo是在全局对象中执行的，所以其this指向的是window，所以会输出1；</li>
</ol>
<h3 id="10-代码输出结果-1"><a href="#10-代码输出结果-1" class="headerlink" title="10. 代码输出结果"></a>10. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 3;</span><br><span class="line">var y = 4;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    x: 1,</span><br><span class="line">    y: 6,</span><br><span class="line">    getX: function() &#123;</span><br><span class="line">        var x = 5;</span><br><span class="line">        return function() &#123;</span><br><span class="line">            return this.x;</span><br><span class="line">        &#125;();</span><br><span class="line">    &#125;,</span><br><span class="line">    getY: function() &#123;</span><br><span class="line">        var y = 7;</span><br><span class="line">        return this.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj.getX()) // 3</span><br><span class="line">console.log(obj.getY()) // 6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：3 6</p>
<p><strong>解析：</strong></p>
<ol>
<li>我们知道，匿名函数的this是指向全局对象的，所以this指向window，会打印出3；</li>
<li>getY是由obj调用的，所以其this指向的是obj对象，会打印出6。</li>
</ol>
<h3 id="11-代码输出结果-1"><a href="#11-代码输出结果-1" class="headerlink" title="11. 代码输出结果"></a>11. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 10; </span><br><span class="line">var obt = &#123; </span><br><span class="line">  a: 20, </span><br><span class="line">  fn: function()&#123; </span><br><span class="line">    var a = 30; </span><br><span class="line">    console.log(this.a)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">obt.fn();  // 20</span><br><span class="line">obt.fn.call(); // 10</span><br><span class="line">(obt.fn)(); // 20</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： 20 10 20</p>
<p><strong>解析：</strong></p>
<ol>
<li>obt.fn()，fn是由obt调用的，所以其this指向obt对象，会打印出20；</li>
<li>obt.fn.call()，这里call的参数啥都没写，就表示null，我们知道如果call的参数为undefined或null，那么this就会指向全局对象this，所以会打印出 10；</li>
<li>(obt.fn)()， 这里给表达式加了括号，而括号的作用是改变表达式的运算顺序，而在这里加与不加括号并无影响；相当于 obt.fn()，所以会打印出 20；</li>
</ol>
<h3 id="12-代码输出结果-1"><a href="#12-代码输出结果-1" class="headerlink" title="12. 代码输出结果"></a>12. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a(xx)&#123;</span><br><span class="line">  this.x = xx;</span><br><span class="line">  return this</span><br><span class="line">&#125;;</span><br><span class="line">var x = a(5);</span><br><span class="line">var y = a(6);</span><br><span class="line"></span><br><span class="line">console.log(x.x)  // undefined</span><br><span class="line">console.log(y.x)  // 6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： undefined 6</p>
<p><strong>解析：</strong></p>
<ol>
<li>最关键的就是var x = a(5)，函数a是在全局作用域调用，所以函数内部的this指向window对象。<strong>所以 this.x = 5 就相当于：window.x = 5。</strong>之后 return this，也就是说 var x = a(5) 中的x变量的值是window，这里的x将函数内部的x的值覆盖了。然后执行console.log(x.x)， 也就是console.log(window.x)，而window对象中没有x属性，所以会输出undefined。</li>
<li>当指向y.x时，会给全局变量中的x赋值为6，所以会打印出6。</li>
</ol>
<h3 id="13-代码输出结果-1"><a href="#13-代码输出结果-1" class="headerlink" title="13. 代码输出结果"></a>13. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo(something)&#123;</span><br><span class="line">    this.a = something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj1 = &#123;</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj1.foo(2); </span><br><span class="line">console.log(obj1.a); // 2</span><br><span class="line"></span><br><span class="line">obj1.foo.call(obj2, 3);</span><br><span class="line">console.log(obj2.a); // 3</span><br><span class="line"></span><br><span class="line">var bar = new obj1.foo(4)</span><br><span class="line">console.log(obj1.a); // 2</span><br><span class="line">console.log(bar.a); // 4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： 2 3 2 4</p>
<p><strong>解析：</strong></p>
<ol>
<li>首先执行obj1.foo(2); 会在obj中添加a属性，其值为2。之后执行obj1.a，a是右obj1调用的，所以this指向obj，打印出2；</li>
<li>执行 obj1.foo.call(obj2, 3) 时，会将foo的this指向obj2，后面就和上面一样了，所以会打印出3；</li>
<li>obj1.a会打印出2；</li>
<li>最后就是考察this绑定的优先级了，new 绑定是比隐式绑定优先级高，所以会输出4。</li>
</ol>
<h3 id="14-代码输出结果-1"><a href="#14-代码输出结果-1" class="headerlink" title="14. 代码输出结果"></a>14. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo(something)&#123;</span><br><span class="line">    this.a = something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">var bar = foo.bind(obj1);</span><br><span class="line">bar(2);</span><br><span class="line">console.log(obj1.a); // 2</span><br><span class="line"></span><br><span class="line">var baz = new bar(3);</span><br><span class="line">console.log(obj1.a); // 2</span><br><span class="line">console.log(baz.a); // 3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： 2 2 3</p>
<p>这道题目和上面题目差不多，主要都是考察this绑定的优先级。记住以下结论即可：<strong>this绑定的优先级：****new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定。</strong></p>
<h2 id="三、作用域-amp-变量提升-amp-闭包"><a href="#三、作用域-amp-变量提升-amp-闭包" class="headerlink" title="三、作用域&amp;变量提升&amp;闭包"></a>三、作用域&amp;变量提升&amp;闭包</h2><h3 id="1-代码输出结果-2"><a href="#1-代码输出结果-2" class="headerlink" title="1. 代码输出结果"></a>1. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">   var x = y = 1;</span><br><span class="line">&#125;)();</span><br><span class="line">var z;</span><br><span class="line"></span><br><span class="line">console.log(y); // 1</span><br><span class="line">console.log(z); // undefined</span><br><span class="line">console.log(x); // Uncaught ReferenceError: x is not defined</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这段代码的关键在于：var x = y = 1; 实际上这里是从右往左执行的，首先执行y = 1, 因为y没有使用var声明，所以它是一个全局变量，然后第二步是将y赋值给x，讲一个全局变量赋值给了一个局部变量，最终，x是一个局部变量，y是一个全局变量，所以打印x是报错。</p>
<h3 id="2-代码输出结果-2"><a href="#2-代码输出结果-2" class="headerlink" title="2. 代码输出结果"></a>2. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a, b</span><br><span class="line">(function () &#123;</span><br><span class="line">   console.log(a);</span><br><span class="line">   console.log(b);</span><br><span class="line">   var a = (b = 3);</span><br><span class="line">   console.log(a);</span><br><span class="line">   console.log(b);   </span><br><span class="line">&#125;)()</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">undefined </span><br><span class="line">undefined </span><br><span class="line">3 </span><br><span class="line">3 </span><br><span class="line">undefined </span><br><span class="line">3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这个题目和上面题目考察的知识点类似，b赋值为3，b此时是一个全局变量，而将3赋值给a，a是一个局部变量，所以最后打印的时候，a仍旧是undefined。</p>
<h3 id="3-代码输出结果-2"><a href="#3-代码输出结果-2" class="headerlink" title="3. 代码输出结果"></a>3. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var friendName = &#x27;World&#x27;;</span><br><span class="line">(function() &#123;</span><br><span class="line">  if (typeof friendName === &#x27;undefined&#x27;) &#123;</span><br><span class="line">    var friendName = &#x27;Jack&#x27;;</span><br><span class="line">    console.log(&#x27;Goodbye &#x27; + friendName);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;Hello &#x27; + friendName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：Goodbye Jack</p>
<p>我们知道，在 JavaScript中， Function 和 var 都会被提升（变量提升），所以上面的代码就相当于：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;World!&#x27;;</span><br><span class="line">(function () &#123;</span><br><span class="line">    var name;</span><br><span class="line">    if (typeof name === &#x27;undefined&#x27;) &#123;</span><br><span class="line">        name = &#x27;Jack&#x27;;</span><br><span class="line">        console.log(&#x27;Goodbye &#x27; + name);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&#x27;Hello &#x27; + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样，答案就一目了然了。</p>
<h3 id="4-代码输出结果-2"><a href="#4-代码输出结果-2" class="headerlink" title="4. 代码输出结果"></a>4. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn1()&#123;</span><br><span class="line">  console.log(&#x27;fn1&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">var fn2</span><br><span class="line"> </span><br><span class="line">fn1()</span><br><span class="line">fn2()</span><br><span class="line"> </span><br><span class="line">fn2 = function() &#123;</span><br><span class="line">  console.log(&#x27;fn2&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fn2()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fn1</span><br><span class="line">Uncaught TypeError: fn2 is not a function</span><br><span class="line">fn2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里也是在考察变量提升，关键在于第一个fn2()，这时fn2仍是一个undefined的变量，所以会报错fn2不是一个函数。</p>
<h3 id="5-代码输出结果-2"><a href="#5-代码输出结果-2" class="headerlink" title="5. 代码输出结果"></a>5. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    var temp = 10;</span><br><span class="line">    function b() &#123;</span><br><span class="line">        console.log(temp); // 10</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line">function a() &#123;</span><br><span class="line">    var temp = 10;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">function b() &#123;</span><br><span class="line">    console.log(temp); // 报错 Uncaught ReferenceError: temp is not defined</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在上面的两段代码中，第一段是可以正常输出，这个应该没啥问题，关键在于第二段代码，它会报错Uncaught ReferenceError: temp is not defined。这时因为在b方法执行时，temp 的值为undefined。</p>
<h3 id="6-代码输出结果-2"><a href="#6-代码输出结果-2" class="headerlink" title="6. 代码输出结果"></a>6. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a=3;</span><br><span class="line">function c()&#123;</span><br><span class="line">   alert(a);</span><br><span class="line">&#125;</span><br><span class="line">(function()&#123;</span><br><span class="line"> var a=4;</span><br><span class="line"> c();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>js中变量的作用域链与定义时的环境有关，与执行时无关。执行环境只会改变this、传递的参数、全局变量等</p>
<h3 id="7-代码输出问题-1"><a href="#7-代码输出问题-1" class="headerlink" title="7. 代码输出问题"></a>7. 代码输出问题</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fun(n, o) &#123;</span><br><span class="line">  console.log(o)</span><br><span class="line">  return &#123;</span><br><span class="line">    fun: function(m)&#123;</span><br><span class="line">      return fun(m, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);</span><br><span class="line">var b = fun(0).fun(1).fun(2).fun(3);</span><br><span class="line">var c = fun(0).fun(1);  c.fun(2);  c.fun(3);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">undefined  0  0  0</span><br><span class="line">undefined  0  1  2</span><br><span class="line">undefined  0  1  1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这是一道关于闭包的题目，对于fun方法，调用之后返回的是一个对象。我们知道，当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值。所以 <code>console.log(o);</code> 会输出undefined。而a就是是fun(0)返回的那个对象。也就是说，函数fun中参数 n 的值是0，而返回的那个对象中，需要一个参数n，而这个对象的作用域中没有n，它就继续沿着作用域向上一级的作用域中寻找n，最后在函数fun中找到了n，n的值是0。了解了这一点，其他运算就很简单了，以此类推。</p>
<h3 id="8-代码输出结果-2"><a href="#8-代码输出结果-2" class="headerlink" title="8. 代码输出结果"></a>8. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = function() &#123;return true;&#125;;   </span><br><span class="line">g = function() &#123;return false;&#125;;   </span><br><span class="line">(function() &#123;   </span><br><span class="line">   if (g() &amp;&amp; [] == ![]) &#123;   </span><br><span class="line">      f = function f() &#123;return false;&#125;;   </span><br><span class="line">      function g() &#123;return true;&#125;  //在匿名函数内部发生函数提升 因此if判断中的g()返回true  </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;)();   </span><br><span class="line">console.log(f());</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果： false</p>
<p>这里首先定义了两个变量f和g，我们知道变量是可以重新赋值的。后面是一个匿名自执行函数，在 if 条件中调用了函数 g()，由于在匿名函数中，又重新定义了函数g，就覆盖了外部定义的变量g，所以，这里调用的是内部函数 g 方法，返回为 true。第一个条件通过，进入第二个条件。</p>
<p>第二个条件是[] == ![]，先看 ![] ，在 JavaScript 中，当用于布尔运算时，比如在这里，对象的非空引用被视为 true，空引用 null 则被视为 false。由于这里不是一个 null, 而是一个没有元素的数组，所以 [] 被视为 true, 而 ![] 的结果就是 false 了。当一个布尔值参与到条件运算的时候，true 会被看作 1, 而 false 会被看作 0。现在条件变成了 [] == 0 的问题了，当一个对象参与条件比较的时候，它会被求值，求值的结果是数组成为一个字符串，[] 的结果就是 ‘’ ，而 ‘’ 会被当作 0 ，所以，条件成立。</p>
<p>两个条件都成立，所以会执行条件中的代码， f 在定义是没有使用var，所以他是一个全局变量。因此，这里会通过闭包访问到外部的变量 f, 重新赋值，现在执行 f 函数返回值已经成为 false 了。而 g 则不会有这个问题，这里是一个函数内定义的 g，不会影响到外部的 g 函数。所以最后的结果就是 false。</p>
<h2 id="四、原型-amp-继承"><a href="#四、原型-amp-继承" class="headerlink" title="四、原型&amp;继承"></a>四、原型&amp;继承</h2><h3 id="1-代码输出结果-3"><a href="#1-代码输出结果-3" class="headerlink" title="1. 代码输出结果"></a>1. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">var p2 = new Person(&#x27;king&#x27;);</span><br><span class="line">console.log(p2.__proto__) //Person.prototype</span><br><span class="line">console.log(p2.__proto__.__proto__) //Object.prototype</span><br><span class="line">console.log(p2.__proto__.__proto__.__proto__) // null</span><br><span class="line">console.log(p2.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错</span><br><span class="line">console.log(p2.__proto__.__proto__.__proto__.__proto__.__proto__)//null后面没有了，报错</span><br><span class="line">console.log(p2.constructor)//Person</span><br><span class="line">console.log(p2.prototype)//undefined p2是实例，没有prototype属性</span><br><span class="line">console.log(Person.constructor)//Function 一个空函数</span><br><span class="line">console.log(Person.prototype)//打印出Person.prototype这个对象里所有的方法和属性</span><br><span class="line">console.log(Person.prototype.constructor)//Person</span><br><span class="line">console.log(Person.prototype.__proto__)// Object.prototype</span><br><span class="line">console.log(Person.__proto__) //Function.prototype</span><br><span class="line">console.log(Function.prototype.__proto__)//Object.prototype</span><br><span class="line">console.log(Function.__proto__)//Function.prototype</span><br><span class="line">console.log(Object.__proto__)//Function.prototype</span><br><span class="line">console.log(Object.prototype.__proto__)//null</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这道义题目考察原型、原型链的基础，记住就可以了。</p>
<h3 id="2-代码输出结果-3"><a href="#2-代码输出结果-3" class="headerlink" title="2. 代码输出结果"></a>2. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// a</span><br><span class="line">function Foo () &#123;</span><br><span class="line"> getName = function () &#123;</span><br><span class="line">   console.log(1);</span><br><span class="line"> &#125;</span><br><span class="line"> return this;</span><br><span class="line">&#125;</span><br><span class="line">// b</span><br><span class="line">Foo.getName = function () &#123;</span><br><span class="line"> console.log(2);</span><br><span class="line">&#125;</span><br><span class="line">// c</span><br><span class="line">Foo.prototype.getName = function () &#123;</span><br><span class="line"> console.log(3);</span><br><span class="line">&#125;</span><br><span class="line">// d</span><br><span class="line">var getName = function () &#123;</span><br><span class="line"> console.log(4);</span><br><span class="line">&#125;</span><br><span class="line">// e</span><br><span class="line">function getName () &#123;</span><br><span class="line"> console.log(5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName();           // 2</span><br><span class="line">getName();               // 4</span><br><span class="line">Foo().getName();         // 1</span><br><span class="line">getName();               // 1 </span><br><span class="line">new Foo.getName();       // 2</span><br><span class="line">new Foo().getName();     // 3</span><br><span class="line">new new Foo().getName(); // 3</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：2 4 1 1 2 3 3</p>
<p><strong>解析：</strong></p>
<ol>
<li>**Foo.getName()**，Foo为一个函数对象，对象都可以有属性，b 处定义Foo的getName属性为函数，输出2；</li>
<li>**getName()**，这里看d、e处，d为函数表达式，e为函数声明，两者区别在于变量提升，函数声明的 5 会被后边函数表达式的 4 覆盖；</li>
<li>**Foo().getName()**，这里要看a处，在Foo内部将全局的getName重新赋值为 console.log(1) 的函数，执行Foo()返回 this，这个this指向window，Foo().getName() 即为window.getName()，输出 1；</li>
<li>**getName()**，上面3中，全局的getName已经被重新赋值，所以这里依然输出 1；</li>
<li>**new Foo.getName()**，这里等价于 new (Foo.getName())，先执行 Foo.getName()，输出 2，然后new一个实例；</li>
<li>**new Foo().getName()**，这里等价于 (new Foo()).getName(), 先new一个Foo的实例，再执行这个实例的getName方法，但是这个实例本身没有这个方法，所以去原型链__protot__上边找，实例.protot === Foo.prototype，所以输出 3；</li>
<li>**new new Foo().getName()**，这里等价于new (new Foo().getName())，如上述6，先输出 3，然后new 一个 new Foo().getName() 的实例。</li>
</ol>
<h3 id="3-代码输出结果-3"><a href="#3-代码输出结果-3" class="headerlink" title="3. 代码输出结果"></a>3. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var F = function() &#123;&#125;;</span><br><span class="line">Object.prototype.a = function() &#123;</span><br><span class="line">  console.log(&#x27;a&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">Function.prototype.b = function() &#123;</span><br><span class="line">  console.log(&#x27;b&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">var f = new F();</span><br><span class="line">f.a();</span><br><span class="line">f.b();</span><br><span class="line">F.a();</span><br><span class="line">F.b()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">Uncaught TypeError: f.b is not a function</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>解析：</strong></p>
<ol>
<li>f 并不是 Function 的实例，因为它本来就不是构造函数，调用的是 Function 原型链上的相关属性和方法，只能访问到 Object 原型链。所以 f.a() 输出 a ，而 f.b() 就报错了。</li>
<li>F 是个构造函数，而 F 是构造函数 Function 的一个实例。因为 F instanceof Object === true，F instanceof Function === true，由此可以得出结论：F 是 Object 和 Function 两个的实例，即 F 能访问到 a， 也能访问到 b。所以 F.a() 输出 a ，F.b() 输出 b。</li>
</ol>
<h3 id="4-代码输出结果-3"><a href="#4-代码输出结果-3" class="headerlink" title="4. 代码输出结果"></a>4. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Foo()&#123;</span><br><span class="line">    Foo.a = function()&#123;</span><br><span class="line">        console.log(1);</span><br><span class="line">    &#125;</span><br><span class="line">    this.a = function()&#123;</span><br><span class="line">        console.log(2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.a = function()&#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.a = function()&#123;</span><br><span class="line">    console.log(4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.a();</span><br><span class="line">let obj = new Foo();</span><br><span class="line">obj.a();</span><br><span class="line">Foo.a();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：4 2 1</p>
<p><strong>解析：</strong></p>
<ol>
<li>Foo.a() 这个是调用 Foo 函数的静态方法 a，虽然 Foo 中有优先级更高的属性方法 a，但 Foo 此时没有被调用，所以此时输出 Foo 的静态方法 a 的结果：4</li>
<li>let obj = new Foo(); 使用了 new 方法调用了函数，返回了函数实例对象，此时 Foo 函数内部的属性方法初始化，原型链建立。</li>
<li>obj.a() ; 调用 obj 实例上的方法 a，该实例上目前有两个 a 方法：一个是内部属性方法，另一个是原型上的方法。当这两者都存在时，首先查找 ownProperty ，如果没有才去原型链上找，所以调用实例上的 a 输出：2</li>
<li>Foo.a() ; 根据第2步可知 Foo 函数内部的属性方法已初始化，覆盖了同名的静态方法，所以输出：1</li>
</ol>
<h3 id="5-代码输出结果-3"><a href="#5-代码输出结果-3" class="headerlink" title="5. 代码输出结果"></a>5. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Dog() &#123;</span><br><span class="line">  this.name = &#x27;puppy&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.bark = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;woof!woof!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">const dog = new Dog()</span><br><span class="line">console.log(Dog.prototype.constructor === Dog &amp;&amp; dog.constructor === Dog &amp;&amp; dog instanceof Dog)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：true</p>
<p><strong>解析：</strong></p>
<p>因为constructor是prototype上的属性，所以dog.constructor实际上就是指向Dog.prototype.constructor；constructor属性指向构造函数。instanceof而实际检测的是类型是否在实例的原型链上。</p>
<p>constructor是prototype上的属性，这一点很容易被忽略掉。constructor和instanceof 的作用是不同的，感性地来说，constructor的限制比较严格，它只能严格对比对象的构造函数是不是指定的值；而instanceof比较松散，只要检测的类型在原型链上，就会返回true。</p>
<h3 id="6-代码输出结果-3"><a href="#6-代码输出结果-3" class="headerlink" title="6. 代码输出结果"></a>6. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var A = &#123;n: 4399&#125;;</span><br><span class="line">var B =  function()&#123;this.n = 9999&#125;;</span><br><span class="line">var C =  function()&#123;var n = 8888&#125;;</span><br><span class="line">B.prototype = A;</span><br><span class="line">C.prototype = A;</span><br><span class="line">var b = new B();</span><br><span class="line">var c = new C();</span><br><span class="line">A.n++</span><br><span class="line">console.log(b.n);</span><br><span class="line">console.log(c.n);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：9999 4400</p>
<p><strong>解析：</strong></p>
<ol>
<li>console.log(b.n)，在查找b.n是首先查找 b 对象自身有没有 n 属性，如果没有会去原型（prototype）上查找，当执行var b = new B()时，函数内部this.n=9999(此时this指向 b) 返回b对象，b对象有自身的n属性，所以返回 9999。</li>
<li>console.log(c.n)，同理，当执行var c = new C()时，c对象没有自身的n属性，向上查找，找到原型 （prototype）上的 n 属性，因为 A.n++(此时对象A中的n为4400)， 所以返回4400。</li>
</ol>
<h3 id="7-代码输出问题-2"><a href="#7-代码输出问题-2" class="headerlink" title="7. 代码输出问题"></a>7. 代码输出问题</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function A()&#123;</span><br><span class="line">&#125;</span><br><span class="line">function B(a)&#123;</span><br><span class="line">　　this.a = a;</span><br><span class="line">&#125;</span><br><span class="line">function C(a)&#123;</span><br><span class="line">　　if(a)&#123;</span><br><span class="line">this.a = a;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.a = 1;</span><br><span class="line">B.prototype.a = 1;</span><br><span class="line">C.prototype.a = 1;</span><br><span class="line"> </span><br><span class="line">console.log(new A().a);</span><br><span class="line">console.log(new B().a);</span><br><span class="line">console.log(new C(2).a);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：1 undefined 2</p>
<p><strong>解析：</strong></p>
<ol>
<li>console.log(new A().a)，new A()为构造函数创建的对象，本身没有a属性，所以向它的原型去找，发现原型的a属性的属性值为1，故该输出值为1；</li>
<li>console.log(new B().a)，ew B()为构造函数创建的对象，该构造函数有参数a，但该对象没有传参，故该输出值为undefined;</li>
<li>console.log(new C(2).a)，new C()为构造函数创建的对象，该构造函数有参数a，且传的实参为2，执行函数内部，发现if为真，执行this.a = 2,故属性a的值为2。</li>
</ol>
<h3 id="8-代码输出问题"><a href="#8-代码输出问题" class="headerlink" title="8. 代码输出问题"></a>8. 代码输出问题</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Parent() &#123;</span><br><span class="line">    this.a = 1;</span><br><span class="line">    this.b = [1, 2, this.a];</span><br><span class="line">    this.c = &#123; demo: 5 &#125;;</span><br><span class="line">    this.show = function () &#123;</span><br><span class="line">        console.log(this.a , this.b , this.c.demo );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child() &#123;</span><br><span class="line">    this.a = 2;</span><br><span class="line">    this.change = function () &#123;</span><br><span class="line">        this.b.push(this.a);</span><br><span class="line">        this.a = this.b.length;</span><br><span class="line">        this.c.demo = this.a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = new Parent();</span><br><span class="line">var parent = new Parent();</span><br><span class="line">var child1 = new Child();</span><br><span class="line">var child2 = new Child();</span><br><span class="line">child1.a = 11;</span><br><span class="line">child2.a = 12;</span><br><span class="line">parent.show();</span><br><span class="line">child1.show();</span><br><span class="line">child2.show();</span><br><span class="line">child1.change();</span><br><span class="line">child2.change();</span><br><span class="line">parent.show();</span><br><span class="line">child1.show();</span><br><span class="line">child2.show();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent.show(); // 1  [1,2,1] 5</span><br><span class="line"></span><br><span class="line">child1.show(); // 11 [1,2,1] 5</span><br><span class="line">child2.show(); // 12 [1,2,1] 5</span><br><span class="line"></span><br><span class="line">parent.show(); // 1 [1,2,1] 5</span><br><span class="line"></span><br><span class="line">child1.show(); // 5 [1,2,1,11,12] 5</span><br><span class="line"></span><br><span class="line">child2.show(); // 6 [1,2,1,11,12] 5</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这道题目值得审题，他涉及到的知识点很多，例如<strong>this的指向、原型、原型链、类的继承、数据类型</strong>等。</p>
<p><strong>解析</strong>：</p>
<ol>
<li>parent.show()，可以直接获得所需的值，没啥好说的；</li>
<li>child1.show()，<code>Child</code>的构造函数原本是指向 <code>Child</code>的，题目显式将 <code>Child</code>类的原型对象指向了 <code>Parent</code>类的一个实例，需要注意 <code>Child.prototype</code>指向的是 <code>Parent</code>的实例 <code>parent</code>，而不是指向 <code>Parent</code>这个类。</li>
<li>child2.show()，这个也没啥好说的；</li>
<li>parent.show()，<code>parent</code>是一个 <code>Parent</code>类的实例，<code>Child.prorotype</code>指向的是 <code>Parent</code>类的另一个实例，两者在堆内存中互不影响，所以上述操作不影响 <code>parent</code>实例，所以输出结果不变；</li>
<li>child1.show()，<code>child1</code>执行了 <code>change()</code>方法后，发生了怎样的变化呢?</li>
<li><ul>
<li>this.b.push(this.a)，由于this的动态指向特性，this.b会指向 <code>Child.prototype</code>上的b数组,this.a会指向 <code>child1</code>的a属性,所以 <code>Child.prototype.b</code>变成了**[1,2,1,11]**;</li>
<li>this.a = this.b.length，这条语句中 <code>this.a</code>和 <code>this.b</code>的指向与上一句一致，故结果为 <code>child1.a</code>变为4;</li>
<li>this.c.demo = this.a++，由于 <code>child1</code>自身属性并没有c这个属性，所以此处的 <code>this.c</code>会指向 <code>Child.prototype.c</code>，<code>this.a</code>值为4，为原始类型，故赋值操作时会直接赋值，<code>Child.prototype.c.demo</code>的结果为4，而 <code>this.a</code>随后自增为5(4 + 1 = 5)。</li>
</ul>
</li>
<li><code>child2</code>执行了 <code>change()</code>方法, 而 <code>child2</code>和 <code>child1</code>均是 <code>Child</code>类的实例，所以他们的原型链指向同一个原型对象 <code>Child.prototype</code>,也就是同一个 <code>parent</code>实例，所以 <code>child2.change()</code>中所有影响到原型对象的语句都会影响 <code>child1</code>的最终输出结果。</li>
<li><ul>
<li>this.b.push(this.a)，由于this的动态指向特性，this.b会指向 <code>Child.prototype</code>上的b数组,this.a会指向 <code>child2</code>的a属性,所以 <code>Child.prototype.b</code>变成了**[1,2,1,11,12]**;</li>
<li>this.a = this.b.length，这条语句中 <code>this.a</code>和 <code>this.b</code>的指向与上一句一致，故结果为 <code>child2.a</code>变为5;</li>
<li>this.c.demo = this.a++，由于 <code>child2</code>自身属性并没有c这个属性，所以此处的 <code>this.c</code>会指向 <code>Child.prototype.c</code>，故执行结果为 <code>Child.prototype.c.demo</code>的值变为 <code>child2.a</code>的值5，而 <code>child2.a</code>最终自增为6(5 + 1 = 6)。</li>
</ul>
</li>
</ol>
<h3 id="9-代码输出结果-2"><a href="#9-代码输出结果-2" class="headerlink" title="9. 代码输出结果"></a>9. 代码输出结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function SuperType()&#123;</span><br><span class="line">    this.property = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class="line">    return this.property;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function SubType()&#123;</span><br><span class="line">    this.subproperty = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">SubType.prototype.getSubValue = function ()&#123;</span><br><span class="line">    return this.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance = new SubType();</span><br><span class="line">console.log(instance.getSuperValue());</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>输出结果：true</p>
<p>实际上，这段代码就是在实现原型链继承，SubType继承了SuperType，本质是重写了SubType的原型对象，代之以一个新类型的实例。SubType的原型被重写了，所以instance.constructor指向的是SuperType。具体如下：</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/sc/sc1.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h1 id="手写代码面试题"><a href="#手写代码面试题" class="headerlink" title="手写代码面试题"></a>手写代码面试题</h1><p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://bingjs.com:8008/img/sx/sx1.png"
                      alt="img"
                ><figcaption>img</figcaption></figure></p>
<h2 id="一、JavaScript-基础"><a href="#一、JavaScript-基础" class="headerlink" title="一、JavaScript 基础"></a>一、JavaScript 基础</h2><h3 id="1-手写-Object-create"><a href="#1-手写-Object-create" class="headerlink" title="1. 手写 Object.create"></a>1. 手写 Object.create</h3><p>思路：将传入的对象作为原型</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function create(obj) &#123;</span><br><span class="line">  function F() &#123;&#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  return new F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-手写-instanceof-方法"><a href="#2-手写-instanceof-方法" class="headerlink" title="2. 手写 instanceof 方法"></a>2. 手写 instanceof 方法</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>
<p>实现步骤：</p>
<ol>
<li>首先获取类型的原型</li>
<li>然后获得对象的原型</li>
<li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 null，因为原型链最终为 null</li>
</ol>
<p>具体实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function myInstanceof(left, right) &#123;</span><br><span class="line">  let proto = Object.getPrototypeOf(left), // 获取对象的原型</span><br><span class="line">      prototype = right.prototype; // 获取构造函数的 prototype 对象</span><br><span class="line"></span><br><span class="line">  // 判断构造函数的 prototype 对象是否在对象的原型链上</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    if (!proto) return false;</span><br><span class="line">    if (proto === prototype) return true;</span><br><span class="line"></span><br><span class="line">    proto = Object.getPrototypeOf(proto);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-手写-new-操作符"><a href="#3-手写-new-操作符" class="headerlink" title="3. 手写 new 操作符"></a>3. 手写 new 操作符</h3><p>在调用 <code>new</code> 的过程中会发生以上四件事情：</p>
<p>（1）首先创建了一个新的空对象</p>
<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>
<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>
<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function objectFactory() &#123;</span><br><span class="line">  let newObject = null;</span><br><span class="line">  let constructor = Array.prototype.shift.call(arguments);</span><br><span class="line">  let result = null;</span><br><span class="line">  // 判断参数是否是一个函数</span><br><span class="line">  if (typeof constructor !== &quot;function&quot;) &#123;</span><br><span class="line">    console.error(&quot;type error&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  // 新建一个空对象，对象的原型为构造函数的 prototype 对象</span><br><span class="line">  newObject = Object.create(constructor.prototype);</span><br><span class="line">  // 将 this 指向新建对象，并执行函数</span><br><span class="line">  result = constructor.apply(newObject, arguments);</span><br><span class="line">  // 判断返回对象</span><br><span class="line">  let flag = result &amp;&amp; (typeof result === &quot;object&quot; || typeof result === &quot;function&quot;);</span><br><span class="line">  // 判断返回结果</span><br><span class="line">  return flag ? result : newObject;</span><br><span class="line">&#125;</span><br><span class="line">// 使用方法</span><br><span class="line">objectFactory(构造函数, 初始化参数);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-手写-Promise"><a href="#4-手写-Promise" class="headerlink" title="4. 手写 Promise"></a>4. 手写 Promise</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const PENDING = &quot;pending&quot;;</span><br><span class="line">const RESOLVED = &quot;resolved&quot;;</span><br><span class="line">const REJECTED = &quot;rejected&quot;;</span><br><span class="line"></span><br><span class="line">function MyPromise(fn) &#123;</span><br><span class="line">  // 保存初始化状态</span><br><span class="line">  var self = this;</span><br><span class="line"></span><br><span class="line">  // 初始化状态</span><br><span class="line">  this.state = PENDING;</span><br><span class="line"></span><br><span class="line">  // 用于保存 resolve 或者 rejected 传入的值</span><br><span class="line">  this.value = null;</span><br><span class="line"></span><br><span class="line">  // 用于保存 resolve 的回调函数</span><br><span class="line">  this.resolvedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  // 用于保存 reject 的回调函数</span><br><span class="line">  this.rejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  // 状态转变为 resolved 方法</span><br><span class="line">  function resolve(value) &#123;</span><br><span class="line">    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变</span><br><span class="line">    if (value instanceof MyPromise) &#123;</span><br><span class="line">      return value.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 保证代码的执行顺序为本轮事件循环的末尾</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      // 只有状态为 pending 时才能转变，</span><br><span class="line">      if (self.state === PENDING) &#123;</span><br><span class="line">        // 修改状态</span><br><span class="line">        self.state = RESOLVED;</span><br><span class="line"></span><br><span class="line">        // 设置传入的值</span><br><span class="line">        self.value = value;</span><br><span class="line"></span><br><span class="line">        // 执行回调函数</span><br><span class="line">        self.resolvedCallbacks.forEach(callback =&gt; &#123;</span><br><span class="line">          callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 状态转变为 rejected 方法</span><br><span class="line">  function reject(value) &#123;</span><br><span class="line">    // 保证代码的执行顺序为本轮事件循环的末尾</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      // 只有状态为 pending 时才能转变</span><br><span class="line">      if (self.state === PENDING) &#123;</span><br><span class="line">        // 修改状态</span><br><span class="line">        self.state = REJECTED;</span><br><span class="line"></span><br><span class="line">        // 设置传入的值</span><br><span class="line">        self.value = value;</span><br><span class="line"></span><br><span class="line">        // 执行回调函数</span><br><span class="line">        self.rejectedCallbacks.forEach(callback =&gt; &#123;</span><br><span class="line">          callback(value);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 将两个方法传入函数执行</span><br><span class="line">  try &#123;</span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // 遇到错误时，捕获错误，执行 reject 函数</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = function(onResolved, onRejected) &#123;</span><br><span class="line">  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数</span><br><span class="line">  onResolved =</span><br><span class="line">    typeof onResolved === &quot;function&quot;</span><br><span class="line">      ? onResolved</span><br><span class="line">      : function(value) &#123;</span><br><span class="line">          return value;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">  onRejected =</span><br><span class="line">    typeof onRejected === &quot;function&quot;</span><br><span class="line">      ? onRejected</span><br><span class="line">      : function(error) &#123;</span><br><span class="line">          throw error;</span><br><span class="line">        &#125;;</span><br><span class="line">    return new MyPromise((resolve,reject)=&gt; &#123;</span><br><span class="line">      // 如果是等待状态，则将函数加入对应列表中</span><br><span class="line">      if (this.state === PENDING) &#123;</span><br><span class="line">        this.resolvedCallbacks.push(onResolved);</span><br><span class="line">        this.rejectedCallbacks.push(onRejected);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 如果状态已经凝固，则直接执行对应状态的函数</span><br><span class="line"></span><br><span class="line">      if (this.state === RESOLVED) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">          let res = onResolved(this.val)</span><br><span class="line">          if(res instanceof MyPromsie)&#123;</span><br><span class="line">            res.then(v =&gt; &#123;</span><br><span class="line">              resolve(v)</span><br><span class="line">            &#125;,error =&gt; &#123;</span><br><span class="line">              reject(error)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;catch(error)&#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (this.state === REJECTED) &#123;</span><br><span class="line">        onRejected(this.value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-手写-Promise-then"><a href="#5-手写-Promise-then" class="headerlink" title="5. 手写 Promise.then"></a>5. 手写 Promise.then</h3><p><code>then</code> 方法返回一个新的 <code>promise</code> 实例，为了在 <code>promise</code> 状态发生变化时（<code>resolve</code> / <code>reject</code> 被调用时）再执行 <code>then</code> 里的函数，我们使用一个 <code>callbacks</code> 数组先把传给then的函数暂存起来，等状态改变时再调用。</p>
<p><strong>那么，怎么保证后一个</strong> <code>then</code> <strong>里的方法在前一个</strong> <code>then</code><strong>（可能是异步）结束之后再执行呢？</strong></p>
<p>我们可以将传给 <code>then</code> 的函数和新 <code>promise</code> 的 <code>resolve</code> 一起 <code>push</code> 到前一个 <code>promise</code> 的 <code>callbacks</code> 数组中，达到承前启后的效果：</p>
<ul>
<li>承前：当前一个 <code>promise </code>完成后，调用其 <code>resolve </code>变更状态，在这个 <code>resolve </code>里会依次调用 <code>callbacks </code>里的回调，这样就执行了 <code>then </code>里的方法了</li>
<li>启后：上一步中，当 <code>then </code>里的方法执行完成后，返回一个结果，如果这个结果是个简单的值，就直接调用新 <code>promise </code>的 <code>resolve</code>，让其状态变更，这又会依次调用新 <code>promise </code>的 <code>callbacks </code>数组里的方法，循环往复。如果返回的结果是个 <code>promise</code>，则需要等它完成之后再触发新 <code>promise </code>的 <code>resolve</code>，所以可以在其结果的 <code>then </code>里调用新 <code>promise </code>的 <code>resolve</code></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">then(onFulfilled, onReject)&#123;</span><br><span class="line">    // 保存前一个promise的this</span><br><span class="line">    const self = this; </span><br><span class="line">    return new MyPromise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 封装前一个promise成功时执行的函数</span><br><span class="line">      let fulfilled = () =&gt; &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">          const result = onFulfilled(self.value); // 承前</span><br><span class="line">          return result instanceof MyPromise? result.then(resolve, reject) : resolve(result); //启后</span><br><span class="line">        &#125;catch(err)&#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 封装前一个promise失败时执行的函数</span><br><span class="line">      let rejected = () =&gt; &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">          const result = onReject(self.reason);</span><br><span class="line">          return result instanceof MyPromise? result.then(resolve, reject) : reject(result);</span><br><span class="line">        &#125;catch(err)&#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      switch(self.status)&#123;</span><br><span class="line">        case PENDING: </span><br><span class="line">          self.onFulfilledCallbacks.push(fulfilled);</span><br><span class="line">          self.onRejectedCallbacks.push(rejected);</span><br><span class="line">          break;</span><br><span class="line">        case FULFILLED:</span><br><span class="line">          fulfilled();</span><br><span class="line">          break;</span><br><span class="line">        case REJECT:</span><br><span class="line">          rejected();</span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<ul>
<li>连续多个 <code>then </code>里的回调方法是同步注册的，但注册到了不同的 <code>callbacks </code>数组中，因为每次 <code>then </code>都返回新的 <code>promise </code>实例（参考上面的例子和图）</li>
<li>注册完成后开始执行构造函数中的异步事件，异步完成之后依次调用 <code>callbacks </code>数组中提前注册的回调</li>
</ul>
<h3 id="6-手写-Promise-all"><a href="#6-手写-Promise-all" class="headerlink" title="6. 手写 Promise.all"></a>6. 手写 Promise.all</h3><p><strong>1) 核心思路</strong></p>
<ol>
<li>接收一个 Promise 实例的数组或具有 Iterator 接口的对象作为参数</li>
<li>这个方法返回一个新的 promise 对象，</li>
<li>遍历传入的参数，用Promise.resolve()将参数”包一层”，使其变成一个promise对象</li>
<li>参数所有回调成功才是成功，返回值数组与参数顺序一致</li>
<li>参数数组其中一个失败，则触发失败状态，第一个触发失败的 Promise 错误信息作为 Promise.all 的错误信息。</li>
</ol>
<p><strong>2）实现代码</strong></p>
<p>一般来说，Promise.all 用来处理多个并发请求，也是为了页面数据构造的方便，将一个页面所用到的在不同接口的数据一起请求过来，不过，如果其中一个接口失败了，多个请求也就失败了，页面可能啥也出不来，这就看当前页面的耦合程度了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function promiseAll(promises) &#123;</span><br><span class="line">  return new Promise(function(resolve, reject) &#123;</span><br><span class="line">    if(!Array.isArray(promises))&#123;</span><br><span class="line">        throw new TypeError(`argument must be a array`)</span><br><span class="line">    &#125;</span><br><span class="line">    var resolvedCounter = 0;</span><br><span class="line">    var promiseNum = promises.length;</span><br><span class="line">    var resolvedResult = [];</span><br><span class="line">    for (let i = 0; i &lt; promiseNum; i++) &#123;</span><br><span class="line">      Promise.resolve(promises[i]).then(value=&gt;&#123;</span><br><span class="line">        resolvedCounter++;</span><br><span class="line">        resolvedResult[i] = value;</span><br><span class="line">        if (resolvedCounter == promiseNum) &#123;</span><br><span class="line">            return resolve(resolvedResult)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,error=&gt;&#123;</span><br><span class="line">        return reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// test</span><br><span class="line">let p1 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        resolve(1)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">let p2 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        resolve(2)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;)</span><br><span class="line">let p3 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        resolve(3)</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">&#125;)</span><br><span class="line">promiseAll([p3, p1, p2]).then(res =&gt; &#123;</span><br><span class="line">    console.log(res) // [3, 1, 2]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="7-手写-Promise-race"><a href="#7-手写-Promise-race" class="headerlink" title="7. 手写 Promise.race"></a>7. 手写 Promise.race</h3><p>该方法的参数是 Promise 实例数组, 然后其 then 注册的回调方法是数组中的某一个 Promise 的状态变为 fulfilled 的时候就执行. 因为 Promise 的状态<strong>只能改变一次</strong>, 那么我们只需要把 Promise.race 中产生的 Promise 对象的 resolve 方法, 注入到数组中的每一个 Promise 实例中的回调函数中即可.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.race = function (args) &#123;</span><br><span class="line">  return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">    for(let i = 0; i &lt; args.length; i++)&#123;</span><br><span class="line">      Promise.resolve(args[i]).then(resolve,reject)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-手写防抖函数"><a href="#8-手写防抖函数" class="headerlink" title="8. 手写防抖函数"></a>8. 手写防抖函数</h3><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 函数防抖的实现</span><br><span class="line">function debounce(fn, wait) &#123;</span><br><span class="line">  let timer = null;</span><br><span class="line"></span><br><span class="line">  return function() &#123;</span><br><span class="line">    let context = this,</span><br><span class="line">        args = arguments;</span><br><span class="line"></span><br><span class="line">    // 如果此时存在定时器的话，则取消之前的定时器重新记时</span><br><span class="line">    if (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 设置定时器，使事件间隔指定事件后执行</span><br><span class="line">    timer = setTimeout(() =&gt; &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9-手写节流函数"><a href="#9-手写节流函数" class="headerlink" title="9. 手写节流函数"></a>9. 手写节流函数</h3><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 函数节流的实现;</span><br><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  let curTime = Date.now();</span><br><span class="line"></span><br><span class="line">  return function() &#123;</span><br><span class="line">    let context = this,</span><br><span class="line">        args = arguments,</span><br><span class="line">        nowTime = Date.now();</span><br><span class="line"></span><br><span class="line">    // 如果两次时间间隔超过了指定时间，则执行函数。</span><br><span class="line">    if (nowTime - curTime &gt;= delay) &#123;</span><br><span class="line">      curTime = Date.now();</span><br><span class="line">      return fn.apply(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function throttle(fn,wait)&#123;</span><br><span class="line">  let timer = null</span><br><span class="line">  return function()&#123;</span><br><span class="line">    let context = this, args = arguments</span><br><span class="line">    if(!timer)&#123;</span><br><span class="line">      timer = setTimeOut(()=&gt;&#123;</span><br><span class="line">        fn.apply(context,args)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="10-手写类型判断函数"><a href="#10-手写类型判断函数" class="headerlink" title="10. 手写类型判断函数"></a>10. 手写类型判断函数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getType(value) &#123;</span><br><span class="line">  // 判断数据是 null 的情况</span><br><span class="line">  if (value === null) &#123;</span><br><span class="line">    return value + &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  // 判断数据是引用类型的情况</span><br><span class="line">  if (typeof value === &quot;object&quot;) &#123;</span><br><span class="line">    let valueClass = Object.prototype.toString.call(value),</span><br><span class="line">      type = valueClass.split(&quot; &quot;)[1].split(&quot;&quot;);</span><br><span class="line">    type.pop();</span><br><span class="line">    return type.join(&quot;&quot;).toLowerCase();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 判断数据是基本数据类型的情况和函数的情况</span><br><span class="line">    return typeof value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="11-手写-call-函数"><a href="#11-手写-call-函数" class="headerlink" title="11. 手写 call 函数"></a>11. 手写 call 函数</h3><p>call 函数的实现步骤：</p>
<ol>
<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>
<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>
<li>处理传入的参数，截取第一个参数后的所有参数。</li>
<li>将函数作为上下文对象的一个属性。</li>
<li>使用上下文对象来调用这个方法，并保存返回结果。</li>
<li>删除刚才新增的属性。</li>
<li>返回结果。</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// call函数实现</span><br><span class="line">Function.prototype.myCall = function(context) &#123;</span><br><span class="line">  // 判断调用对象</span><br><span class="line">  if (typeof this !== &quot;function&quot;) &#123;</span><br><span class="line">    console.error(&quot;type error&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 获取参数</span><br><span class="line">  let args = [...arguments].slice(1),</span><br><span class="line">      result = null;</span><br><span class="line">  // 判断 context 是否传入，如果未传入则设置为 window</span><br><span class="line">  context = context || window;</span><br><span class="line">  // 将调用函数设为对象的方法</span><br><span class="line">  context.fn = this;</span><br><span class="line">  // 调用函数</span><br><span class="line">  result = context.fn(...args);</span><br><span class="line">  // 将属性删除</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="12-手写-apply-函数"><a href="#12-手写-apply-函数" class="headerlink" title="12. 手写 apply 函数"></a>12. 手写 apply 函数</h3><p>apply 函数的实现步骤：</p>
<ol>
<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>
<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>
<li>将函数作为上下文对象的一个属性。</li>
<li>判断参数值是否传入</li>
<li>使用上下文对象来调用这个方法，并保存返回结果。</li>
<li>删除刚才新增的属性</li>
<li>返回结果</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// apply 函数实现</span><br><span class="line">Function.prototype.myApply = function(context) &#123;</span><br><span class="line">  // 判断调用对象是否为函数</span><br><span class="line">  if (typeof this !== &quot;function&quot;) &#123;</span><br><span class="line">    throw new TypeError(&quot;Error&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  let result = null;</span><br><span class="line">  // 判断 context 是否存在，如果未传入则为 window</span><br><span class="line">  context = context || window;</span><br><span class="line">  // 将函数设为对象的方法</span><br><span class="line">  context.fn = this;</span><br><span class="line">  // 调用方法</span><br><span class="line">  if (arguments[1]) &#123;</span><br><span class="line">    result = context.fn(...arguments[1]);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  // 将属性删除</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="13-手写-bind-函数"><a href="#13-手写-bind-函数" class="headerlink" title="13. 手写 bind 函数"></a>13. 手写 bind 函数</h3><p>bind 函数的实现步骤：</p>
<ol>
<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>
<li>保存当前函数的引用，获取其余传入参数值。</li>
<li>创建一个函数返回</li>
<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bind 函数实现</span><br><span class="line">Function.prototype.myBind = function(context) &#123;</span><br><span class="line">  // 判断调用对象是否为函数</span><br><span class="line">  if (typeof this !== &quot;function&quot;) &#123;</span><br><span class="line">    throw new TypeError(&quot;Error&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 获取参数</span><br><span class="line">  var args = [...arguments].slice(1),</span><br><span class="line">      fn = this;</span><br><span class="line">  var bound = function() &#123;</span><br><span class="line">    // 根据调用方式，传入不同绑定值</span><br><span class="line">    return fn.apply(</span><br><span class="line">      this instanceof Fn ? this : context,</span><br><span class="line">      args.concat(...arguments)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  f = Function() &#123;&#125;</span><br><span class="line">  f.prototype = fn.prototype</span><br><span class="line">  bound.prototype = new f();</span><br><span class="line">  return bound;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="14-函数柯里化的实现"><a href="#14-函数柯里化的实现" class="headerlink" title="14. 函数柯里化的实现"></a>14. 函数柯里化的实现</h3><p>函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function curry(fn, args) &#123;</span><br><span class="line">  // 获取函数需要的参数长度</span><br><span class="line">  let length = fn.length;</span><br><span class="line"></span><br><span class="line">  args = args || [];</span><br><span class="line"></span><br><span class="line">  return function() &#123;</span><br><span class="line">    let subArgs = args.slice(0);</span><br><span class="line"></span><br><span class="line">    // 拼接得到现有的所有参数</span><br><span class="line">    for (let i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">      subArgs.push(arguments[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断参数的长度是否已经满足函数所需参数的长度</span><br><span class="line">    if (subArgs.length &gt;= length) &#123;</span><br><span class="line">      // 如果满足，执行函数</span><br><span class="line">      return fn.apply(this, subArgs);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 如果不满足，递归返回科里化的函数，等待参数的传入</span><br><span class="line">      return curry.call(this, fn, subArgs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// es6 实现</span><br><span class="line">function curry(fn, ...args) &#123;</span><br><span class="line">  return fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="15-实现AJAX请求"><a href="#15-实现AJAX请求" class="headerlink" title="15. 实现AJAX请求"></a>15. 实现AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>
<p>创建AJAX请求的步骤：</p>
<ul>
<li><strong>创建一个 XMLHttpRequest 对象</strong>。</li>
<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>
<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>
<li>当对象的属性和监听函数设置完成后，最后<strong>调用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const SERVER_URL = &quot;/server&quot;;</span><br><span class="line">let xhr = new XMLHttpRequest();</span><br><span class="line">// 创建 Http 请求</span><br><span class="line">xhr.open(&quot;GET&quot;, SERVER_URL, true);</span><br><span class="line">// 设置状态监听函数</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">  if (this.readyState !== 4) return;</span><br><span class="line">  // 当请求成功时</span><br><span class="line">  if (this.status === 200) &#123;</span><br><span class="line">    handle(this.response);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.error(this.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 设置请求失败时的监听函数</span><br><span class="line">xhr.onerror = function() &#123;</span><br><span class="line">  console.error(this.statusText);</span><br><span class="line">&#125;;</span><br><span class="line">// 设置请求头信息</span><br><span class="line">xhr.responseType = &quot;json&quot;;</span><br><span class="line">xhr.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">// 发送 Http 请求</span><br><span class="line">xhr.send(null);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="16-使用Promise封装AJAX请求"><a href="#16-使用Promise封装AJAX请求" class="headerlink" title="16. 使用Promise封装AJAX请求"></a>16. 使用Promise封装AJAX请求</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// promise 封装实现：</span><br><span class="line">function getJSON(url) &#123;</span><br><span class="line">  // 创建一个 promise 对象</span><br><span class="line">  let promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    let xhr = new XMLHttpRequest();</span><br><span class="line">    // 新建一个 http 请求</span><br><span class="line">    xhr.open(&quot;GET&quot;, url, true);</span><br><span class="line">    // 设置状态的监听函数</span><br><span class="line">    xhr.onreadystatechange = function() &#123;</span><br><span class="line">      if (this.readyState !== 4) return;</span><br><span class="line">      // 当请求成功或失败时，改变 promise 的状态</span><br><span class="line">      if (this.status === 200) &#123;</span><br><span class="line">        resolve(this.response);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        reject(new Error(this.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 设置错误监听函数</span><br><span class="line">    xhr.onerror = function() &#123;</span><br><span class="line">      reject(new Error(this.statusText));</span><br><span class="line">    &#125;;</span><br><span class="line">    // 设置响应的数据类型</span><br><span class="line">    xhr.responseType = &quot;json&quot;;</span><br><span class="line">    // 设置请求头信息</span><br><span class="line">    xhr.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">    // 发送 http 请求</span><br><span class="line">    xhr.send(null);</span><br><span class="line">  &#125;);</span><br><span class="line">  return promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="17-实现浅拷贝"><a href="#17-实现浅拷贝" class="headerlink" title="17. 实现浅拷贝"></a>17. 实现浅拷贝</h3><p>浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</p>
<h4 id="（1）Object-assign"><a href="#（1）Object-assign" class="headerlink" title="（1）Object.assign()"></a>（1）Object.assign()</h4><p><code>Object.assign()</code>是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：<code>Object.assign(target, source_1, ···)</code>，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。</p>
<p><strong>注意：</strong></p>
<ul>
<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。</li>
<li>因为 <code>null </code>和 <code>undefined</code> 不能转化为对象，所以第一个参数不能为 <code>null</code>或 <code>undefined</code>，会报错。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let target = &#123;a: 1&#125;;</span><br><span class="line">let object2 = &#123;b: 2&#125;;</span><br><span class="line">let object3 = &#123;c: 3&#125;;</span><br><span class="line">Object.assign(target,object2,object3);  </span><br><span class="line">console.log(target);  // &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（2）扩展运算符"><a href="#（2）扩展运算符" class="headerlink" title="（2）扩展运算符"></a>（2）扩展运算符</h4><p>使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：<code>let cloneObj = &#123; ...obj &#125;;</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;a:1,b:&#123;c:1&#125;&#125;</span><br><span class="line">let obj2 = &#123;...obj1&#125;;</span><br><span class="line">obj1.a = 2;</span><br><span class="line">console.log(obj1); //&#123;a:2,b:&#123;c:1&#125;&#125;</span><br><span class="line">console.log(obj2); //&#123;a:1,b:&#123;c:1&#125;&#125;</span><br><span class="line">obj1.b.c = 2;</span><br><span class="line">console.log(obj1); //&#123;a:2,b:&#123;c:2&#125;&#125;</span><br><span class="line">console.log(obj2); //&#123;a:1,b:&#123;c:2&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（3）数组方法实现数组浅拷贝"><a href="#（3）数组方法实现数组浅拷贝" class="headerlink" title="（3）数组方法实现数组浅拷贝"></a>（3）数组方法实现数组浅拷贝</h4><p><strong>1）Array.prototype.slice</strong></p>
<ul>
<li><code>slice()</code>方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：<code>array.slice(start, end)</code>，该方法不会改变原始数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4];</span><br><span class="line">console.log(arr.slice()); // [1,2,3,4]</span><br><span class="line">console.log(arr.slice() === arr); //false</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>2）Array.prototype.concat</strong></p>
<ul>
<li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4];</span><br><span class="line">console.log(arr.concat()); // [1,2,3,4]</span><br><span class="line">console.log(arr.concat() === arr); //false</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（4）手写实现浅拷贝"><a href="#（4）手写实现浅拷贝" class="headerlink" title="（4）手写实现浅拷贝"></a>（4）手写实现浅拷贝</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 浅拷贝的实现;</span><br><span class="line"></span><br><span class="line">function shallowCopy(object) &#123;</span><br><span class="line">  // 只拷贝对象</span><br><span class="line">  if (!object || typeof object !== &quot;object&quot;) return;</span><br><span class="line"></span><br><span class="line">  // 根据 object 的类型判断是新建一个数组还是对象</span><br><span class="line">  let newObject = Array.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // 遍历 object，并且判断是 object 的属性才拷贝</span><br><span class="line">  for (let key in object) &#123;</span><br><span class="line">    if (object.hasOwnProperty(key)) &#123;</span><br><span class="line">      newObject[key] = object[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Object.keys(object).forEach(key =&gt; &#123;</span><br><span class="line">    if(object.hasOwnProperty(key))&#123;</span><br><span class="line">      newObject[key] = object[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return newObject;</span><br><span class="line">&#125;// 浅拷贝的实现;</span><br><span class="line"></span><br><span class="line">function shallowCopy(object) &#123;</span><br><span class="line">  // 只拷贝对象</span><br><span class="line">  if (!object || typeof object !== &quot;object&quot;) return;</span><br><span class="line"></span><br><span class="line">  // 根据 object 的类型判断是新建一个数组还是对象</span><br><span class="line">  let newObject = Array.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // 遍历 object，并且判断是 object 的属性才拷贝</span><br><span class="line">  for (let key in object) &#123;</span><br><span class="line">    if (object.hasOwnProperty(key)) &#123;</span><br><span class="line">      newObject[key] = object[key];</span><br><span class="line">      //newObject[key] = typeof object[key] === &#x27;object&#x27; ? deepCopy(object[key]) : object[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return newObject;</span><br><span class="line">&#125;// 浅拷贝的实现;</span><br><span class="line">function shallowCopy(object) &#123;</span><br><span class="line">  // 只拷贝对象</span><br><span class="line">  if (!object || typeof object !== &quot;object&quot;) return;</span><br><span class="line">  // 根据 object 的类型判断是新建一个数组还是对象</span><br><span class="line">  let newObject = Array.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line">  // 遍历 object，并且判断是 object 的属性才拷贝</span><br><span class="line">  for (let key in object) &#123;</span><br><span class="line">    if (object.hasOwnProperty(key)) &#123;</span><br><span class="line">      newObject[key] = object[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="18-实现深拷贝"><a href="#18-实现深拷贝" class="headerlink" title="18. 实现深拷贝"></a>18. 实现深拷贝</h3><ul>
<li><strong>浅拷贝</strong>：浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用 Object.assign 和展开运算符来实现。</li>
<li><strong>深拷贝</strong>：深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败</li>
</ul>
<h4 id="（1）JSON-stringify"><a href="#（1）JSON-stringify" class="headerlink" title="（1）JSON.stringify()"></a>（1）JSON.stringify()</h4><ul>
<li><code>JSON.parse(JSON.stringify(obj))</code>是目前比较常用的深拷贝方法之一，它的原理就是利用 <code>JSON.stringify</code> 将 <code>js</code>对象序列化（JSON字符串），再使用 <code>JSON.parse</code>来反序列化(还原)js对象。</li>
<li>这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过 <code>JSON.stringify()</code>进行处理之后，都会消失。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;  a: 0,</span><br><span class="line">              b: &#123;</span><br><span class="line">                 c: 0</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">let obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">obj1.a = 1;</span><br><span class="line">obj1.b.c = 1;</span><br><span class="line">console.log(obj1); // &#123;a: 1, b: &#123;c: 1&#125;&#125;</span><br><span class="line">console.log(obj2); // &#123;a: 0, b: &#123;c: 0&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（2）函数库lodash的-cloneDeep方法"><a href="#（2）函数库lodash的-cloneDeep方法" class="headerlink" title="（2）函数库lodash的_.cloneDeep方法"></a>（2）函数库lodash的_.cloneDeep方法</h4><p>该函数库也有提供_.cloneDeep用来做 Deep Copy</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _ = require(&#x27;lodash&#x27;);</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: &#123; f: &#123; g: 1 &#125; &#125;,</span><br><span class="line">    c: [1, 2, 3]</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = _.cloneDeep(obj1);</span><br><span class="line">console.log(obj1.b.f === obj2.b.f);// false</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="（3）手写实现深拷贝函数"><a href="#（3）手写实现深拷贝函数" class="headerlink" title="（3）手写实现深拷贝函数"></a>（3）手写实现深拷贝函数</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 深拷贝的实现</span><br><span class="line">function deepCopy(object) &#123;</span><br><span class="line">  if (!object || typeof object !== &quot;object&quot;) return;</span><br><span class="line"></span><br><span class="line">  let newObject = Array.isArray(object) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  for (let key in object) &#123;</span><br><span class="line">    if (object.hasOwnProperty(key)) &#123;</span><br><span class="line">      newObject[key] =</span><br><span class="line">        typeof object[key] === &quot;object&quot; ? deepCopy(object[key]) : object[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Object.keys(object).forEach(key =&gt; &#123;</span><br><span class="line">    if(object.hasOwnProperty(key))&#123;</span><br><span class="line">      newObject[key] = typeof object[key] === &#x27;object&#x27; ? deepCopy(object[key]) : object[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return newObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h2><h3 id="1-实现日期格式化函数"><a href="#1-实现日期格式化函数" class="headerlink" title="1. 实现日期格式化函数"></a>1. 实现日期格式化函数</h3><p>输入：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dateFormat(new Date(&#x27;2020-12-01&#x27;), &#x27;yyyy/MM/dd&#x27;) // 2020/12/01</span><br><span class="line">dateFormat(new Date(&#x27;2020-04-01&#x27;), &#x27;yyyy/MM/dd&#x27;) // 2020/04/01</span><br><span class="line">dateFormat(new Date(&#x27;2020-04-01&#x27;), &#x27;yyyy年MM月dd日&#x27;) // 2020年04月01日</span><br><span class="line">const dateFormat = (dateInput, format)=&gt;&#123;</span><br><span class="line">    var day = dateInput.getDate() </span><br><span class="line">    var month = dateInput.getMonth() + 1  </span><br><span class="line">    var year = dateInput.getFullYear()   </span><br><span class="line">    format = format.replace(/yyyy/, year)</span><br><span class="line">    format = format.replace(/MM/,month)</span><br><span class="line">    format = format.replace(/dd/,day)</span><br><span class="line">    return format</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-交换a-b的值，不能用临时变量"><a href="#2-交换a-b的值，不能用临时变量" class="headerlink" title="2. 交换a,b的值，不能用临时变量"></a>2. 交换a,b的值，不能用临时变量</h3><p>巧妙的利用两个数的和、差：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-实现数组的乱序输出"><a href="#3-实现数组的乱序输出" class="headerlink" title="3. 实现数组的乱序输出"></a>3. 实现数组的乱序输出</h3><p>主要的实现思路就是：</p>
<ul>
<li>取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。</li>
<li>第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换</li>
<li>按照上面的规律执行，直到遍历完成</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</span><br><span class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;</span><br><span class="line">  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>还有一方法就是倒序遍历：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</span><br><span class="line">let length = arr.length,</span><br><span class="line">    randomIndex,</span><br><span class="line">    temp;</span><br><span class="line">  while (length) &#123;</span><br><span class="line">    randomIndex = Math.floor(Math.random() * length--);</span><br><span class="line">    temp = arr[length];</span><br><span class="line">    arr[length] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">console.log(arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-实现数组元素求和"><a href="#4-实现数组元素求和" class="headerlink" title="4. 实现数组元素求和"></a>4. 实现数组元素求和</h3><ul>
<li>arr=[1,2,3,4,5,6,7,8,9,10]，求和</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr=[1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">let sum = arr.reduce( (total,i) =&gt; total += i,0);</span><br><span class="line">console.log(sum);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>arr=[1,2,3,[[4,5],6],7,8,9]，求和</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var = arr=[1,2,3,[[4,5],6],7,8,9]</span><br><span class="line">let arr= arr.toString().split(&#x27;,&#x27;).reduce( (total,i) =&gt; total += Number(i),0);</span><br><span class="line">console.log(arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>递归实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, 2, 3, 4, 5, 6] </span><br><span class="line"></span><br><span class="line">function add(arr) &#123;</span><br><span class="line">    if (arr.length == 1) return arr[0] </span><br><span class="line">    return arr[0] + add(arr.slice(1)) </span><br><span class="line">&#125;</span><br><span class="line">console.log(add(arr)) // 21</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-实现数组的扁平化"><a href="#5-实现数组的扁平化" class="headerlink" title="5. 实现数组的扁平化"></a>5. 实现数组的扁平化</h3><p><strong>（1）递归实现</strong></p>
<p>普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, 4, 5]]];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">  let result = [];</span><br><span class="line"></span><br><span class="line">  for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if(Array.isArray(arr[i])) &#123;</span><br><span class="line">      result = result.concat(flatten(arr[i]));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line">flatten(arr);  //  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>（2）reduce 函数迭代</strong></p>
<p>从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, 4]]];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">    return arr.reduce(function(prev, next)&#123;</span><br><span class="line">        return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line">console.log(flatten(arr));//  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>（3）扩展运算符实现</strong></p>
<p>这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, 4]]];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">    while (arr.some(item =&gt; Array.isArray(item))) &#123;</span><br><span class="line">        arr = [].concat(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>（4）split 和 toString</strong></p>
<p>可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, 4]]];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">    return arr.toString().split(&#x27;,&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。</p>
<p><strong>（5）ES6 中的 flat</strong></p>
<p>我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：<code>arr.flat([depth])</code></p>
<p>其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, 4]]];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">  return arr.flat(Infinity);</span><br><span class="line">&#125;</span><br><span class="line">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。</p>
<p><strong>（6）正则和 JSON 方法</strong></p>
<p>在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1, [2, [3, [4, 5]]], 6];</span><br><span class="line">function flatten(arr) &#123;</span><br><span class="line">  let str = JSON.stringify(arr);</span><br><span class="line">  str = str.replace(/(\[|\])/g, &#x27;&#x27;);</span><br><span class="line">  str = &#x27;[&#x27; + str + &#x27;]&#x27;;</span><br><span class="line">  return JSON.parse(str); </span><br><span class="line">&#125;</span><br><span class="line">console.log(flatten(arr)); //  [1, 2, 3, 4，5]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="6-实现数组去重"><a href="#6-实现数组去重" class="headerlink" title="6. 实现数组去重"></a>6. 实现数组去重</h3><p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。</p>
<p>ES6方法（使用数据结构集合）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];</span><br><span class="line"></span><br><span class="line">Array.from(new Set(array)); // [1, 2, 3, 5, 9, 8]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>ES5方法：使用map存储不重复的数字</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];</span><br><span class="line"></span><br><span class="line">uniqueArray(array); // [1, 2, 3, 5, 9, 8]</span><br><span class="line"></span><br><span class="line">function uniqueArray(array) &#123;</span><br><span class="line">  let map = &#123;&#125;;</span><br><span class="line">  let res = [];</span><br><span class="line">  for(var i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">    if(!map.hasOwnProperty([array[i]])) &#123;</span><br><span class="line">      map[array[i]] = 1;</span><br><span class="line">      res.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="7-实现数组的flat方法"><a href="#7-实现数组的flat方法" class="headerlink" title="7. 实现数组的flat方法"></a>7. 实现数组的flat方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function _flat(arr, depth) &#123;</span><br><span class="line">  if(!Array.isArray(arr) || depth &lt;= 0) &#123;</span><br><span class="line">    return arr;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr.reduce((prev, cur) =&gt; &#123;</span><br><span class="line">    if (Array.isArray(cur)) &#123;</span><br><span class="line">      return prev.concat(_flat(cur, depth - 1))</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return prev.concat(cur);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-实现数组的push方法"><a href="#8-实现数组的push方法" class="headerlink" title="8. 实现数组的push方法"></a>8. 实现数组的push方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [];</span><br><span class="line">Array.prototype.push = function() &#123;</span><br><span class="line">    for( let i = 0 ; i &lt; arguments.length ; i++)&#123;</span><br><span class="line">        this[this.length] = arguments[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    return this.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9-实现数组的filter方法"><a href="#9-实现数组的filter方法" class="headerlink" title="9. 实现数组的filter方法"></a>9. 实现数组的filter方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype._filter = function(fn) &#123;</span><br><span class="line">    if (typeof fn !== &quot;function&quot;) &#123;</span><br><span class="line">        throw Error(&#x27;参数必须是一个函数&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    const res = [];</span><br><span class="line">    for (let i = 0, len = this.length; i &lt; len; i++) &#123;</span><br><span class="line">        fn(this[i]) &amp;&amp; res.push(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="10-实现数组的map方法"><a href="#10-实现数组的map方法" class="headerlink" title="10. 实现数组的map方法"></a>10. 实现数组的map方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype._map = function(fn) &#123;</span><br><span class="line">   if (typeof fn !== &quot;function&quot;) &#123;</span><br><span class="line">        throw Error(&#x27;参数必须是一个函数&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    const res = [];</span><br><span class="line">    for (let i = 0, len = this.length; i &lt; len; i++) &#123;</span><br><span class="line">        res.push(fn(this[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="11-实现字符串的repeat方法"><a href="#11-实现字符串的repeat方法" class="headerlink" title="11. 实现字符串的repeat方法"></a>11. 实现字符串的repeat方法</h3><p>输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function repeat(s, n) &#123;</span><br><span class="line">    return (new Array(n + 1)).join(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>递归：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function repeat(s, n) &#123;</span><br><span class="line">    return (n &gt; 0) ? s.concat(repeat(s, --n)) : &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="12-实现字符串翻转"><a href="#12-实现字符串翻转" class="headerlink" title="12. 实现字符串翻转"></a>12. 实现字符串翻转</h3><p>在字符串的原型链上添加一个方法，实现字符串翻转：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String.prototype._reverse = function(a)&#123;</span><br><span class="line">    return a.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var obj = new String();</span><br><span class="line">var res = obj._reverse (&#x27;hello&#x27;);</span><br><span class="line">console.log(res);    // olleh</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。</p>
<h3 id="13-将数字每千分位用逗号隔开"><a href="#13-将数字每千分位用逗号隔开" class="headerlink" title="13. 将数字每千分位用逗号隔开"></a>13. 将数字每千分位用逗号隔开</h3><p><strong>数字有小数版本：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let format = n =&gt; &#123;</span><br><span class="line">    let num = n.toString() // 转成字符串</span><br><span class="line">    let decimals = &#x27;&#x27;</span><br><span class="line">        // 判断是否有小数</span><br><span class="line">    num.indexOf(&#x27;.&#x27;) &gt; -1 ? decimals = num.split(&#x27;.&#x27;)[1] : decimals</span><br><span class="line">    let len = num.length</span><br><span class="line">    if (len &lt;= 3) &#123;</span><br><span class="line">        return num</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let temp = &#x27;&#x27;</span><br><span class="line">        let remainder = len % 3</span><br><span class="line">        decimals ? temp = &#x27;.&#x27; + decimals : temp</span><br><span class="line">        if (remainder &gt; 0) &#123; // 不是3的整数倍</span><br><span class="line">            return num.slice(0, remainder) + &#x27;,&#x27; + num.slice(remainder, len).match(/\d&#123;3&#125;/g).join(&#x27;,&#x27;) + temp</span><br><span class="line">        &#125; else &#123; // 是3的整数倍</span><br><span class="line">            return num.slice(0, len).match(/\d&#123;3&#125;/g).join(&#x27;,&#x27;) + temp </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">format(12323.33)  // &#x27;12,323.33&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>数字无小数版本：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let format = n =&gt; &#123;</span><br><span class="line">    let num = n.toString() </span><br><span class="line">    let len = num.length</span><br><span class="line">    if (len &lt;= 3) &#123;</span><br><span class="line">        return num</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let remainder = len % 3</span><br><span class="line">        if (remainder &gt; 0) &#123; // 不是3的整数倍</span><br><span class="line">            return num.slice(0, remainder) + &#x27;,&#x27; + num.slice(remainder, len).match(/\d&#123;3&#125;/g).join(&#x27;,&#x27;) </span><br><span class="line">        &#125; else &#123; // 是3的整数倍</span><br><span class="line">            return num.slice(0, len).match(/\d&#123;3&#125;/g).join(&#x27;,&#x27;) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">format(1232323)  // &#x27;1,232,323&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="14-实现非负大整数相加"><a href="#14-实现非负大整数相加" class="headerlink" title="14. 实现非负大整数相加"></a>14. 实现非负大整数相加</h3><p>JavaScript对数值有范围的限制，限制如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number.MAX_VALUE // 1.7976931348623157e+308</span><br><span class="line">Number.MAX_SAFE_INTEGER // 9007199254740991</span><br><span class="line">Number.MIN_VALUE // 5e-324</span><br><span class="line">Number.MIN_SAFE_INTEGER // -9007199254740991</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果想要对一个超大的整数(<code>&gt; Number.MAX_SAFE_INTEGER</code>)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 <code>Number.MAX_SAFE_INTEGER</code> 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。</p>
<p>实现一个算法进行大数的相加：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sumBigNumber(a, b) &#123;</span><br><span class="line">  let res = &#x27;&#x27;;</span><br><span class="line">  let temp = 0;</span><br><span class="line">  </span><br><span class="line">  a = a.split(&#x27;&#x27;);</span><br><span class="line">  b = b.split(&#x27;&#x27;);</span><br><span class="line">  </span><br><span class="line">  while (a.length || b.length || temp) &#123;</span><br><span class="line">    temp += ~~a.pop() + ~~b.pop();</span><br><span class="line">    res = (temp % 10) + res;</span><br><span class="line">    temp  = temp &gt; 9</span><br><span class="line">  &#125;</span><br><span class="line">  return res.replace(/^0+/, &#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>其主要的思路如下：</p>
<ul>
<li>首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化</li>
<li>初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算</li>
<li>将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位</li>
<li>判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加</li>
<li>重复上述操作，直至计算结束</li>
</ul>
<h3 id="15-实现-add-1-2-3"><a href="#15-实现-add-1-2-3" class="headerlink" title="15. 实现 add(1)(2)(3)"></a>15. 实现 add(1)(2)(3)</h3><p>函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>
<p>1）粗暴版</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function add (a) &#123;</span><br><span class="line">return function (b) &#123;</span><br><span class="line">    return function (c) &#123;</span><br><span class="line">      return a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(1)(2)(3)); // 6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>2）柯里化解决方案</p>
<ul>
<li>参数长度固定</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var add = function (m) &#123;</span><br><span class="line">  var temp = function (n) &#123;</span><br><span class="line">    return add(m + n);</span><br><span class="line">  &#125;</span><br><span class="line">  temp.toString = function () &#123;</span><br><span class="line">    return m;</span><br><span class="line">  &#125;</span><br><span class="line">  return temp;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(add(3)(4)(5)); // 12</span><br><span class="line">console.log(add(3)(6)(9)(25)); // 43</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>对于add(3)(4)(5)，其执行过程如下：</p>
<ol>
<li>先执行add(3)，此时m=3，并且返回temp函数；</li>
<li>执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数</li>
<li>执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数</li>
<li>由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。</li>
</ol>
<ul>
<li>参数长度不固定</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function add (...args) &#123;</span><br><span class="line">    //求和</span><br><span class="line">    return args.reduce((a, b) =&gt; a + b)</span><br><span class="line">&#125;</span><br><span class="line">function currying (fn) &#123;</span><br><span class="line">    let args = []</span><br><span class="line">    return function temp (...newArgs) &#123;</span><br><span class="line">        if (newArgs.length) &#123;</span><br><span class="line">            args = [</span><br><span class="line">                ...args,</span><br><span class="line">                ...newArgs</span><br><span class="line">            ]</span><br><span class="line">            return temp</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            let val = fn.apply(this, args)</span><br><span class="line">            args = [] //保证再次调用时清空</span><br><span class="line">            return val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let addCurry = currying(add)</span><br><span class="line">console.log(addCurry(1)(2)(3)(4, 5)())  //15</span><br><span class="line">console.log(addCurry(1)(2)(3, 4, 5)())  //15</span><br><span class="line">console.log(addCurry(1)(2, 3, 4, 5)())  //15</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="16-实现类数组转化为数组"><a href="#16-实现类数组转化为数组" class="headerlink" title="16. 实现类数组转化为数组"></a>16. 实现类数组转化为数组</h3><p>类数组转换为数组的方法有这样几种：</p>
<ul>
<li>通过 call 调用数组的 slice 方法来实现转换</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype.slice.call(arrayLike);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过 call 调用数组的 splice 方法来实现转换</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype.splice.call(arrayLike, 0);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过 apply 调用数组的 concat 方法来实现转换</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype.concat.apply([], arrayLike);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过 Array.from 方法来实现转换</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.from(arrayLike);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="17-使用-reduce-求和"><a href="#17-使用-reduce-求和" class="headerlink" title="17. 使用 reduce 求和"></a>17. 使用 reduce 求和</h3><p>arr = [1,2,3,4,5,6,7,8,9,10]，求和</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">arr.reduce((prev, cur) =&gt; &#123; return prev + cur &#125;, 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>arr = [1,2,3,[[4,5],6],7,8,9]，求和</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">arr.flat(Infinity).reduce((prev, cur) =&gt; &#123; return prev + cur &#125;, 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>arr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [&#123;a:9, b:3, c:4&#125;, &#123;a:1, b:3&#125;, &#123;a:3&#125;] </span><br><span class="line"></span><br><span class="line">arr.reduce((prev, cur) =&gt; &#123;</span><br><span class="line">    return prev + cur[&quot;a&quot;];</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="18-将js对象转化为树形结构"><a href="#18-将js对象转化为树形结构" class="headerlink" title="18. 将js对象转化为树形结构"></a>18. 将js对象转化为树形结构</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 转换前：</span><br><span class="line">source = [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line">            pid: 0,</span><br><span class="line">            name: &#x27;body&#x27;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            id: 2,</span><br><span class="line">            pid: 1,</span><br><span class="line">            name: &#x27;title&#x27;</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            id: 3,</span><br><span class="line">            pid: 2,</span><br><span class="line">            name: &#x27;div&#x27;</span><br><span class="line">          &#125;]</span><br><span class="line">// 转换为: </span><br><span class="line">tree = [&#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          pid: 0,</span><br><span class="line">          name: &#x27;body&#x27;,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            id: 2,</span><br><span class="line">            pid: 1,</span><br><span class="line">            name: &#x27;title&#x27;,</span><br><span class="line">            children: [&#123;</span><br><span class="line">              id: 3,</span><br><span class="line">              pid: 1,</span><br><span class="line">              name: &#x27;div&#x27;</span><br><span class="line">            &#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>代码实现：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jsonToTree(data) &#123;</span><br><span class="line">  // 初始化结果数组，并判断输入数据的格式</span><br><span class="line">  let result = []</span><br><span class="line">  if(!Array.isArray(data)) &#123;</span><br><span class="line">    return result</span><br><span class="line">  &#125;</span><br><span class="line">  // 使用map，将当前对象的id与当前对象对应存储起来</span><br><span class="line">  let map = &#123;&#125;;</span><br><span class="line">  data.forEach(item =&gt; &#123;</span><br><span class="line">    map[item.id] = item;</span><br><span class="line">  &#125;);</span><br><span class="line">  // </span><br><span class="line">  data.forEach(item =&gt; &#123;</span><br><span class="line">    let parent = map[item.pid];</span><br><span class="line">    if(parent) &#123;</span><br><span class="line">      (parent.children || (parent.children = [])).push(item);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="19-使用ES5和ES6求函数参数的和"><a href="#19-使用ES5和ES6求函数参数的和" class="headerlink" title="19. 使用ES5和ES6求函数参数的和"></a>19. 使用ES5和ES6求函数参数的和</h3><p>ES5：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sum() &#123;</span><br><span class="line">    let sum = 0</span><br><span class="line">    Array.prototype.forEach.call(arguments, function(item) &#123;</span><br><span class="line">        sum += item * 1</span><br><span class="line">    &#125;)</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>ES6：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sum(...nums) &#123;</span><br><span class="line">    let sum = 0</span><br><span class="line">    nums.forEach(function(item) &#123;</span><br><span class="line">        sum += item * 1</span><br><span class="line">    &#125;)</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="20-解析-URL-Params-为对象"><a href="#20-解析-URL-Params-为对象" class="headerlink" title="20. 解析 URL Params 为对象"></a>20. 解析 URL Params 为对象</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let url = &#x27;http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled&#x27;;</span><br><span class="line">parseParam(url)</span><br><span class="line">/* 结果</span><br><span class="line">&#123; user: &#x27;anonymous&#x27;,</span><br><span class="line">  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span><br><span class="line">  city: &#x27;北京&#x27;, // 中文需解码</span><br><span class="line">  enabled: true, // 未指定值得 key 约定为 true</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function parseParam(url) &#123;</span><br><span class="line">  const paramsStr = /.+\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来</span><br><span class="line">  const paramsArr = paramsStr.split(&#x27;&amp;&#x27;); // 将字符串以 &amp; 分割后存到数组中</span><br><span class="line">  let paramsObj = &#123;&#125;;</span><br><span class="line">  // 将 params 存到对象中</span><br><span class="line">  paramsArr.forEach(param =&gt; &#123;</span><br><span class="line">    if (/=/.test(param)) &#123; // 处理有 value 的参数</span><br><span class="line">      let [key, val] = param.split(&#x27;=&#x27;); // 分割 key 和 value</span><br><span class="line">      val = decodeURIComponent(val); // 解码</span><br><span class="line">      val = /^\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字</span><br><span class="line">      if (paramsObj.hasOwnProperty(key)) &#123; // 如果对象有 key，则添加一个值</span><br><span class="line">        paramsObj[key] = [].concat(paramsObj[key], val);</span><br><span class="line">      &#125; else &#123; // 如果对象没有这个 key，创建 key 并设置值</span><br><span class="line">        paramsObj[key] = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123; // 处理没有 value 的参数</span><br><span class="line">      paramsObj[param] = true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return paramsObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="三、场景应用"><a href="#三、场景应用" class="headerlink" title="三、场景应用"></a>三、场景应用</h2><h3 id="1-循环打印红黄绿"><a href="#1-循环打印红黄绿" class="headerlink" title="1. 循环打印红黄绿"></a>1. 循环打印红黄绿</h3><p>下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：<strong>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</strong></p>
<p>三个亮灯函数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function red() &#123;</span><br><span class="line">    console.log(&#x27;red&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function green() &#123;</span><br><span class="line">    console.log(&#x27;green&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function yellow() &#123;</span><br><span class="line">    console.log(&#x27;yellow&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这道题复杂的地方在于<strong>需要“交替重复”亮灯</strong>，而不是“亮完一次”就结束了。</p>
<h4 id="（1）用-callback-实现"><a href="#（1）用-callback-实现" class="headerlink" title="（1）用 callback 实现"></a>（1）用 callback 实现</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const task = (timer, light, callback) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        if (light === &#x27;red&#x27;) &#123;</span><br><span class="line">            red()</span><br><span class="line">        &#125;</span><br><span class="line">        else if (light === &#x27;green&#x27;) &#123;</span><br><span class="line">            green()</span><br><span class="line">        &#125;</span><br><span class="line">        else if (light === &#x27;yellow&#x27;) &#123;</span><br><span class="line">            yellow()</span><br><span class="line">        &#125;</span><br><span class="line">        callback()</span><br><span class="line">    &#125;, timer)</span><br><span class="line">&#125;</span><br><span class="line">task(3000, &#x27;red&#x27;, () =&gt; &#123;</span><br><span class="line">    task(2000, &#x27;green&#x27;, () =&gt; &#123;</span><br><span class="line">        task(1000, &#x27;yellow&#x27;, Function.prototype)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？</p>
<p>上面提到过递归，可以递归亮灯的一个周期：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const step = () =&gt; &#123;</span><br><span class="line">    task(3000, &#x27;red&#x27;, () =&gt; &#123;</span><br><span class="line">        task(2000, &#x27;green&#x27;, () =&gt; &#123;</span><br><span class="line">            task(1000, &#x27;yellow&#x27;, step)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">step()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>注意看黄灯亮的回调里又再次调用了 step 方法</strong> 以完成循环亮灯。</p>
<h4 id="（2）用-promise-实现"><a href="#（2）用-promise-实现" class="headerlink" title="（2）用 promise 实现"></a>（2）用 promise 实现</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const task = (timer, light) =&gt; </span><br><span class="line">    new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            if (light === &#x27;red&#x27;) &#123;</span><br><span class="line">                red()</span><br><span class="line">            &#125;</span><br><span class="line">            else if (light === &#x27;green&#x27;) &#123;</span><br><span class="line">                green()</span><br><span class="line">            &#125;</span><br><span class="line">            else if (light === &#x27;yellow&#x27;) &#123;</span><br><span class="line">                yellow()</span><br><span class="line">            &#125;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, timer)</span><br><span class="line">    &#125;)</span><br><span class="line">const step = () =&gt; &#123;</span><br><span class="line">    task(3000, &#x27;red&#x27;)</span><br><span class="line">        .then(() =&gt; task(2000, &#x27;green&#x27;))</span><br><span class="line">        .then(() =&gt; task(2100, &#x27;yellow&#x27;))</span><br><span class="line">        .then(step)</span><br><span class="line">&#125;</span><br><span class="line">step()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。</p>
<h4 id="（3）用-async-await-实现"><a href="#（3）用-async-await-实现" class="headerlink" title="（3）用 async/await 实现"></a>（3）用 async/await 实现</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const taskRunner =  async () =&gt; &#123;</span><br><span class="line">    await task(3000, &#x27;red&#x27;)</span><br><span class="line">    await task(2000, &#x27;green&#x27;)</span><br><span class="line">    await task(2100, &#x27;yellow&#x27;)</span><br><span class="line">    taskRunner()</span><br><span class="line">&#125;</span><br><span class="line">taskRunner()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-实现每隔一秒打印-1-2-3-4"><a href="#2-实现每隔一秒打印-1-2-3-4" class="headerlink" title="2. 实现每隔一秒打印 1,2,3,4"></a>2. 实现每隔一秒打印 1,2,3,4</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用闭包实现</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  (function(i) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      console.log(i);</span><br><span class="line">    &#125;, i * 1000);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line">// 使用 let 块级作用域</span><br><span class="line">for (let i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  setTimeout(function() &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;, i * 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-小孩报数问题"><a href="#3-小孩报数问题" class="headerlink" title="3. 小孩报数问题"></a>3. 小孩报数问题</h3><p>有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function childNum(num, count)&#123;</span><br><span class="line">    let allplayer = [];  </span><br><span class="line">    for(let i = 0; i &lt; num; i++)&#123;</span><br><span class="line">        allplayer[i] = i + 1;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    let exitCount = 0;    // 离开人数</span><br><span class="line">    let counter = 0;      // 记录报数</span><br><span class="line">    let curIndex = 0;     // 当前下标</span><br><span class="line">  </span><br><span class="line">    while(exitCount &lt; num - 1)&#123;</span><br><span class="line">        if(allplayer[curIndex] !== 0) counter++;  </span><br><span class="line">      </span><br><span class="line">        if(counter == count)&#123;</span><br><span class="line">            allplayer[curIndex] = 0;               </span><br><span class="line">            counter = 0;</span><br><span class="line">            exitCount++;  </span><br><span class="line">        &#125;</span><br><span class="line">        curIndex++;</span><br><span class="line">        if(curIndex == num)&#123;</span><br><span class="line">            curIndex = 0             </span><br><span class="line">        &#125;;         </span><br><span class="line">    &#125;  </span><br><span class="line">    for(i = 0; i &lt; num; i++)&#123;</span><br><span class="line">        if(allplayer[i] !== 0)&#123;</span><br><span class="line">            return allplayer[i]</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">childNum(30, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-用Promise实现图片的异步加载"><a href="#4-用Promise实现图片的异步加载" class="headerlink" title="4. 用Promise实现图片的异步加载"></a>4. 用Promise实现图片的异步加载</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let imageAsync=(url)=&gt;&#123;</span><br><span class="line">            return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">                let img = new Image();</span><br><span class="line">                img.src = url;</span><br><span class="line">                img.οnlοad=()=&gt;&#123;</span><br><span class="line">                    console.log(`图片请求成功，此处进行通用操作`);</span><br><span class="line">                    resolve(image);</span><br><span class="line">                &#125;</span><br><span class="line">                img.οnerrοr=(err)=&gt;&#123;</span><br><span class="line">                    console.log(`失败，此处进行失败的通用操作`);</span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">imageAsync(&quot;url&quot;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;加载成功&quot;);</span><br><span class="line">&#125;).catch((error)=&gt;&#123;</span><br><span class="line">    console.log(&quot;加载失败&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="5-实现发布-订阅模式"><a href="#5-实现发布-订阅模式" class="headerlink" title="5. 实现发布-订阅模式"></a>5. 实现发布-订阅模式</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class EventCenter&#123;</span><br><span class="line">  // 1. 定义事件容器，用来装事件数组</span><br><span class="line">    let handlers = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  // 2. 添加事件方法，参数：事件名 事件方法</span><br><span class="line">  addEventListener(type, handler) &#123;</span><br><span class="line">    // 创建新数组容器</span><br><span class="line">    if (!this.handlers[type]) &#123;</span><br><span class="line">      this.handlers[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    // 存入事件</span><br><span class="line">    this.handlers[type].push(handler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 3. 触发事件，参数：事件名 事件参数</span><br><span class="line">  dispatchEvent(type, params) &#123;</span><br><span class="line">    // 若没有注册该事件则抛出错误</span><br><span class="line">    if (!this.handlers[type]) &#123;</span><br><span class="line">      return new Error(&#x27;该事件未注册&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 触发事件</span><br><span class="line">    this.handlers[type].forEach(handler =&gt; &#123;</span><br><span class="line">      handler(...params)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布</span><br><span class="line">  removeEventListener(type, handler) &#123;</span><br><span class="line">    if (!this.handlers[type]) &#123;</span><br><span class="line">      return new Error(&#x27;事件无效&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    if (!handler) &#123;</span><br><span class="line">      // 移除事件</span><br><span class="line">      delete this.handlers[type]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      const index = this.handlers[type].findIndex(el =&gt; el === handler)</span><br><span class="line">      if (index === -1) &#123;</span><br><span class="line">        return new Error(&#x27;无该绑定事件&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      // 移除事件</span><br><span class="line">      this.handlers[type].splice(index, 1)</span><br><span class="line">      if (this.handlers[type].length === 0) &#123;</span><br><span class="line">        delete this.handlers[type]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="6-查找文章中出现频率最高的单词"><a href="#6-查找文章中出现频率最高的单词" class="headerlink" title="6. 查找文章中出现频率最高的单词"></a>6. 查找文章中出现频率最高的单词</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function findMostWord(article) &#123;</span><br><span class="line">  // 合法性判断</span><br><span class="line">  if (!article) return;</span><br><span class="line">  // 参数处理</span><br><span class="line">  article = article.trim().toLowerCase();</span><br><span class="line">  let wordList = article.match(/[a-z]+/g),</span><br><span class="line">    visited = [],</span><br><span class="line">    maxNum = 0,</span><br><span class="line">    maxWord = &quot;&quot;;</span><br><span class="line">  article = &quot; &quot; + wordList.join(&quot;  &quot;) + &quot; &quot;;</span><br><span class="line">  // 遍历判断单词出现次数</span><br><span class="line">  wordList.forEach(function(item) &#123;</span><br><span class="line">    if (visited.indexOf(item) &lt; 0) &#123;</span><br><span class="line">      // 加入 visited </span><br><span class="line">      visited.push(item);</span><br><span class="line">      let word = new RegExp(&quot; &quot; + item + &quot; &quot;, &quot;g&quot;),</span><br><span class="line">        num = article.match(word).length;</span><br><span class="line">      if (num &gt; maxNum) &#123;</span><br><span class="line">        maxNum = num;</span><br><span class="line">        maxWord = item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return maxWord + &quot;  &quot; + maxNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="7-封装异步的fetch，使用async-await方式来使用"><a href="#7-封装异步的fetch，使用async-await方式来使用" class="headerlink" title="7. 封装异步的fetch，使用async await方式来使用"></a>7. 封装异步的fetch，使用async await方式来使用</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(async () =&gt; &#123;</span><br><span class="line">    class HttpRequestUtil &#123;</span><br><span class="line">        async get(url) &#123;</span><br><span class="line">            const res = await fetch(url);</span><br><span class="line">            const data = await res.json();</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line">        async post(url, data) &#123;</span><br><span class="line">            const res = await fetch(url, &#123;</span><br><span class="line">                method: &#x27;POST&#x27;,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                body: JSON.stringify(data)</span><br><span class="line">            &#125;);</span><br><span class="line">            const result = await res.json();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        async put(url, data) &#123;</span><br><span class="line">            const res = await fetch(url, &#123;</span><br><span class="line">                method: &#x27;PUT&#x27;,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: JSON.stringify(data)</span><br><span class="line">            &#125;);</span><br><span class="line">            const result = await res.json();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        async delete(url, data) &#123;</span><br><span class="line">            const res = await fetch(url, &#123;</span><br><span class="line">                method: &#x27;DELETE&#x27;,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                data: JSON.stringify(data)</span><br><span class="line">            &#125;);</span><br><span class="line">            const result = await res.json();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const httpRequestUtil = new HttpRequestUtil();</span><br><span class="line">    const res = await httpRequestUtil.get(&#x27;http://golderbrother.cn/&#x27;);</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="8-实现prototype继承"><a href="#8-实现prototype继承" class="headerlink" title="8. 实现prototype继承"></a>8. 实现prototype继承</h3><p>所谓的原型链继承就是让新实例的原型等于父类的实例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父方法</span><br><span class="line">function SupperFunction(flag1)&#123;</span><br><span class="line">    this.flag1 = flag1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子方法</span><br><span class="line">function SubFunction(flag2)&#123;</span><br><span class="line">    this.flag2 = flag2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父实例</span><br><span class="line">var superInstance = new SupperFunction(true);</span><br><span class="line"></span><br><span class="line">//子继承父</span><br><span class="line">SubFunction.prototype = superInstance;</span><br><span class="line"></span><br><span class="line">//子实例</span><br><span class="line">var subInstance = new SubFunction(false);</span><br><span class="line">//子调用自己和父的属性</span><br><span class="line">subInstance.flag1;   // true</span><br><span class="line">subInstance.flag2;   // false</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9-实现双向数据绑定"><a href="#9-实现双向数据绑定" class="headerlink" title="9. 实现双向数据绑定"></a>9. 实现双向数据绑定</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125;</span><br><span class="line">let input = document.getElementById(&#x27;input&#x27;)</span><br><span class="line">let span = document.getElementById(&#x27;span&#x27;)</span><br><span class="line">// 数据劫持</span><br><span class="line">Object.defineProperty(obj, &#x27;text&#x27;, &#123;</span><br><span class="line">  configurable: true,</span><br><span class="line">  enumerable: true,</span><br><span class="line">  get() &#123;</span><br><span class="line">    console.log(&#x27;获取数据了&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  set(newVal) &#123;</span><br><span class="line">    console.log(&#x27;数据更新了&#x27;)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    span.innerHTML = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 输入监听</span><br><span class="line">input.addEventListener(&#x27;keyup&#x27;, function(e) &#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="10-实现简单路由"><a href="#10-实现简单路由" class="headerlink" title="10. 实现简单路由"></a>10. 实现简单路由</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// hash路由</span><br><span class="line">class Route&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    // 路由存储对象</span><br><span class="line">    this.routes = &#123;&#125;</span><br><span class="line">    // 当前hash</span><br><span class="line">    this.currentHash = &#x27;&#x27;</span><br><span class="line">    // 绑定this，避免监听时this指向改变</span><br><span class="line">    this.freshRoute = this.freshRoute.bind(this)</span><br><span class="line">    // 监听</span><br><span class="line">    window.addEventListener(&#x27;load&#x27;, this.freshRoute, false)</span><br><span class="line">    window.addEventListener(&#x27;hashchange&#x27;, this.freshRoute, false)</span><br><span class="line">  &#125;</span><br><span class="line">  // 存储</span><br><span class="line">  storeRoute (path, cb) &#123;</span><br><span class="line">    this.routes[path] = cb || function () &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 更新</span><br><span class="line">  freshRoute () &#123;</span><br><span class="line">    this.currentHash = location.hash.slice(1) || &#x27;/&#x27;</span><br><span class="line">    this.routes[this.currentHash]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="11-实现斐波那契数列"><a href="#11-实现斐波那契数列" class="headerlink" title="11. 实现斐波那契数列"></a>11. 实现斐波那契数列</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 递归</span><br><span class="line">function fn (n)&#123;</span><br><span class="line">    if(n==0) return 0</span><br><span class="line">    if(n==1) return 1</span><br><span class="line">    return fn(n-2)+fn(n-1)</span><br><span class="line">&#125;</span><br><span class="line">// 优化</span><br><span class="line">function fibonacci2(n) &#123;</span><br><span class="line">    const arr = [1, 1, 2];</span><br><span class="line">    const arrLen = arr.length;</span><br><span class="line"></span><br><span class="line">    if (n &lt;= arrLen) &#123;</span><br><span class="line">        return arr[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (let i = arrLen; i &lt; n; i++) &#123;</span><br><span class="line">        arr.push(arr[i - 1] + arr[ i - 2]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr[arr.length - 1];</span><br><span class="line">&#125;</span><br><span class="line">// 非递归</span><br><span class="line">function fn(n) &#123;</span><br><span class="line">    let pre1 = 1;</span><br><span class="line">    let pre2 = 1;</span><br><span class="line">    let current = 2;</span><br><span class="line"></span><br><span class="line">    if (n &lt;= 2) &#123;</span><br><span class="line">        return current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (let i = 2; i &lt; n; i++) &#123;</span><br><span class="line">        pre1 = pre2;</span><br><span class="line">        pre2 = current;</span><br><span class="line">        current = pre1 + pre2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="12-字符串出现的不重复最长长度"><a href="#12-字符串出现的不重复最长长度" class="headerlink" title="12. 字符串出现的不重复最长长度"></a>12. 字符串出现的不重复最长长度</h3><p>用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lengthOfLongestSubstring = function (s) &#123;</span><br><span class="line">    let map = new Map();</span><br><span class="line">    let i = -1</span><br><span class="line">    let res = 0</span><br><span class="line">    let n = s.length</span><br><span class="line">    for (let j = 0; j &lt; n; j++) &#123;</span><br><span class="line">        if (map.has(s[j])) &#123;</span><br><span class="line">            i = Math.max(i, map.get(s[j]))</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, j - i)</span><br><span class="line">        map.set(s[j], j)</span><br><span class="line">    &#125;</span><br><span class="line">    return res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="13-使用-setTimeout-实现-setInterval"><a href="#13-使用-setTimeout-实现-setInterval" class="headerlink" title="13. 使用 setTimeout 实现 setInterval"></a>13. 使用 setTimeout 实现 setInterval</h3><p>setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。</p>
<p>针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。</p>
<p>实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function mySetInterval(fn, timeout) &#123;</span><br><span class="line">  // 控制器，控制定时器是否继续执行</span><br><span class="line">  var timer = &#123;</span><br><span class="line">    flag: true</span><br><span class="line">  &#125;;</span><br><span class="line">  // 设置递归函数，模拟定时器执行。</span><br><span class="line">  function interval() &#123;</span><br><span class="line">    if (timer.flag) &#123;</span><br><span class="line">      fn();</span><br><span class="line">      setTimeout(interval, timeout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 启动定时器</span><br><span class="line">  setTimeout(interval, timeout);</span><br><span class="line">  // 返回控制器</span><br><span class="line">  return timer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="14-实现-jsonp"><a href="#14-实现-jsonp" class="headerlink" title="14. 实现 jsonp"></a>14. 实现 jsonp</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 动态的加载js文件</span><br><span class="line">function addScript(src) &#123;</span><br><span class="line">  const script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">  script.src = src;</span><br><span class="line">  script.type = &quot;text/javascript&quot;;</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">addScript(&quot;http://xxx.xxx.com/xxx.js?callback=handleRes&quot;);</span><br><span class="line">// 设置一个全局的callback函数来接收回调结果</span><br><span class="line">function handleRes(res) &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;</span><br><span class="line">// 接口返回的数据格式</span><br><span class="line">handleRes(&#123;a: 1, b: 2&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="15-判断对象是否存在循环引用"><a href="#15-判断对象是否存在循环引用" class="headerlink" title="15. 判断对象是否存在循环引用"></a>15. 判断对象是否存在循环引用</h3><p>循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用 <code>JSON.stringify()</code>对该类对象进行序列化，就会报错: <code>Converting circular structure to JSON.</code></p>
<p>下面方法可以用来判断一个对象中是否已存在循环引用：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const isCycleObject = (obj,parent) =&gt; &#123;</span><br><span class="line">    const parentArr = parent || [obj];</span><br><span class="line">    for(let i in obj) &#123;</span><br><span class="line">        if(typeof obj[i] === &#x27;object&#x27;) &#123;</span><br><span class="line">            let flag = false;</span><br><span class="line">            parentArr.forEach((pObj) =&gt; &#123;</span><br><span class="line">                if(pObj === obj[i])&#123;</span><br><span class="line">                    flag = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            if(flag) return true;</span><br><span class="line">            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);</span><br><span class="line">            if(flag) return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const a = 1;</span><br><span class="line">const b = &#123;a&#125;;</span><br><span class="line">const c = &#123;b&#125;;</span><br><span class="line">const o = &#123;d:&#123;a:3&#125;,c&#125;</span><br><span class="line">o.c.b.aa = a;</span><br><span class="line"></span><br><span class="line">console.log(isCycleObject(o)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>查找有序二维数组的目标值：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var findNumberIn2DArray = function(matrix, target) &#123;</span><br><span class="line">    if (matrix == null || matrix.length == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    let row = 0;</span><br><span class="line">    let column = matrix[0].length - 1;</span><br><span class="line">    while (row &lt; matrix.length &amp;&amp; column &gt;= 0) &#123;</span><br><span class="line">        if (matrix[row][column] == target) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if (matrix[row][column] &gt; target) &#123;</span><br><span class="line">            column--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>二维数组斜向打印：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function printMatrix(arr)&#123;</span><br><span class="line">  let m = arr.length, n = arr[0].length</span><br><span class="line">    let res = []</span><br><span class="line">  </span><br><span class="line">  // 左上角，从0 到 n - 1 列进行打印</span><br><span class="line">  for (let k = 0; k &lt; n; k++) &#123;</span><br><span class="line">    for (let i = 0, j = k; i &lt; m &amp;&amp; j &gt;= 0; i++, j--) &#123;</span><br><span class="line">      res.push(arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 右下角，从1 到 n - 1 行进行打印</span><br><span class="line">  for (let k = 1; k &lt; m; k++) &#123;</span><br><span class="line">    for (let i = k, j = n - 1; i &lt; m &amp;&amp; j &gt;= 0; i++, j--) &#123;</span><br><span class="line">      res.push(arr[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
